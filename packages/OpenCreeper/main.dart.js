// Generated by dart2js, the Dart to JavaScript compiler version: 1.1.0-dev.5.11.
// The code supports the following hooks:
// dartPrint(message)   - if this function is defined it is called
//                        instead of the Dart [print] method.
// dartMainRunner(main) - if this function is defined, the Dart [main]
//                        method will not be invoked directly.
//                        Instead, a closure that will invoke [main] is
//                        passed to [dartMainRunner].
(function($) {
function dart() {}var A = new dart;
delete A.x;
var B = new dart;
delete B.x;
var C = new dart;
delete C.x;
var D = new dart;
delete D.x;
var E = new dart;
delete E.x;
var F = new dart;
delete F.x;
var G = new dart;
delete G.x;
var H = new dart;
delete H.x;
var J = new dart;
delete J.x;
var K = new dart;
delete K.x;
var L = new dart;
delete L.x;
var M = new dart;
delete M.x;
var N = new dart;
delete N.x;
var O = new dart;
delete O.x;
var P = new dart;
delete P.x;
var Q = new dart;
delete Q.x;
var R = new dart;
delete R.x;
var S = new dart;
delete S.x;
var T = new dart;
delete T.x;
var U = new dart;
delete U.x;
var V = new dart;
delete V.x;
var W = new dart;
delete W.x;
var X = new dart;
delete X.x;
var Y = new dart;
delete Y.x;
var Z = new dart;
delete Z.x;
function Isolate() {}
init();

$ = Isolate.$isolateProperties;
var $$ = {};

// Native classes
(function (reflectionData) {
  "use strict";
  function map(x){x={x:x};delete x.x;return x}
    function processStatics(descriptor) {
      for (var property in descriptor) {
        if (!hasOwnProperty.call(descriptor, property)) continue;
        if (property === "") continue;
        var element = descriptor[property];
        var firstChar = property.substring(0, 1);
        var previousProperty;
        if (firstChar === "+") {
          mangledGlobalNames[previousProperty] = property.substring(1);
          if (descriptor[property] == 1) descriptor[previousProperty].$reflectable = 1;
          if (element && element.length) init.typeInformation[previousProperty] = element;
        } else if (firstChar === "@") {
          property = property.substring(1);
          $[property]["@"] = element;
        } else if (firstChar === "*") {
          globalObject[previousProperty].$defaultValues = element;
          var optionalMethods = descriptor.$methodsWithOptionalArguments;
          if (!optionalMethods) {
            descriptor.$methodsWithOptionalArguments = optionalMethods = {}
          }
          optionalMethods[property] = previousProperty;
        } else if (typeof element === "function") {
          globalObject[previousProperty = property] = element;
          functions.push(property);
          init.globalFunctions[property] = element;
        } else if (element.constructor === Array) {
          addStubs(globalObject, element, property, true, descriptor, functions);
        } else {
          previousProperty = property;
          var newDesc = {};
          var previousProp;
          for (var prop in element) {
            if (!hasOwnProperty.call(element, prop)) continue;
            firstChar = prop.substring(0, 1);
            if (prop === "static") {
              processStatics(init.statics[property] = element[prop]);
            } else if (firstChar === "+") {
              mangledNames[previousProp] = prop.substring(1);
              if (element[prop] == 1) element[previousProp].$reflectable = 1;
            } else if (firstChar === "@" && prop !== "@") {
              newDesc[prop.substring(1)]["@"] = element[prop];
            } else if (firstChar === "*") {
              newDesc[previousProp].$defaultValues = element[prop];
              var optionalMethods = newDesc.$methodsWithOptionalArguments;
              if (!optionalMethods) {
                newDesc.$methodsWithOptionalArguments = optionalMethods={}
              }
              optionalMethods[prop] = previousProp;
            } else {
              var elem = element[prop];
              if (prop && elem != null && elem.constructor === Array && prop !== "<>") {
                addStubs(newDesc, elem, prop, false, element, []);
              } else {
                newDesc[previousProp = prop] = elem;
              }
            }
          }
          $$[property] = [globalObject, newDesc];
          classes.push(property);
        }
      }
    }
  function addStubs(descriptor, array, name, isStatic, originalDescriptor, functions) {
    var f, funcs = [originalDescriptor[name] = descriptor[name] = f = (function() {
  var result = array[0];
  if (result != null && typeof result != "function") {
    throw new Error(
        name + ": expected value of type 'function' at index " + (0) +
        " but got " + (typeof result));
  }
  return result;
})()];
    f.$stubName = name;
    functions.push(name);
    for (var index = 0; index < array.length; index += 2) {
      f = array[index + 1];
      if (typeof f != "function") break;
      f.$stubName = (function() {
  var result = array[index + 2];
  if (result != null && typeof result != "string") {
    throw new Error(
        name + ": expected value of type 'string' at index " + (index + 2) +
        " but got " + (typeof result));
  }
  return result;
})();
      funcs.push(f);
      if (f.$stubName) {
        originalDescriptor[f.$stubName] = descriptor[f.$stubName] = f;
        functions.push(f.$stubName);
      }
    }
    for (var i = 0; i < funcs.length; index++, i++) {
      funcs[i].$callName = (function() {
  var result = array[index + 1];
  if (result != null && typeof result != "string") {
    throw new Error(
        name + ": expected value of type 'string' at index " + (index + 1) +
        " but got " + (typeof result));
  }
  return result;
})();
    }
    var getterStubName = (function() {
  var result = array[++index];
  if (result != null && typeof result != "string") {
    throw new Error(
        name + ": expected value of type 'string' at index " + (++index) +
        " but got " + (typeof result));
  }
  return result;
})();
    array = array.slice(++index);
    var requiredParameterInfo = (function() {
  var result = array[0];
  if (result != null && (typeof result != "number" || (result|0) !== result)) {
    throw new Error(
        name + ": expected value of type 'int' at index " + (0) +
        " but got " + (typeof result));
  }
  return result;
})();
    var requiredParameterCount = requiredParameterInfo >> 1;
    var isAccessor = (requiredParameterInfo & 1) === 1;
    var isSetter = requiredParameterInfo === 3;
    var isGetter = requiredParameterInfo === 1;
    var optionalParameterInfo = (function() {
  var result = array[1];
  if (result != null && (typeof result != "number" || (result|0) !== result)) {
    throw new Error(
        name + ": expected value of type 'int' at index " + (1) +
        " but got " + (typeof result));
  }
  return result;
})();
    var optionalParameterCount = optionalParameterInfo >> 1;
    var optionalParametersAreNamed = (optionalParameterInfo & 1) === 1;
    var isIntercepted = requiredParameterCount + optionalParameterCount != funcs[0].length;
    var functionTypeIndex = (function() {
  var result = array[2];
  if (result != null && (typeof result != "number" || (result|0) !== result) && typeof result != "function") {
    throw new Error(
        name + ": expected value of type 'function or int' at index " + (2) +
        " but got " + (typeof result));
  }
  return result;
})();
    var isReflectable = array.length > requiredParameterCount + optionalParameterCount + 3;
    if (getterStubName) {
      f = tearOff(funcs, array, isStatic, name, isIntercepted);
      if (isStatic) init.globalFunctions[name] = f;
      originalDescriptor[getterStubName] = descriptor[getterStubName] = f;
      funcs.push(f);
      if (getterStubName) functions.push(getterStubName);
      f.$stubName = getterStubName;
      f.$callName = null;
    }
    if (isReflectable) {
      for (var i = 0; i < funcs.length; i++) {
        funcs[i].$reflectable = 1;
        funcs[i].$reflectionInfo = array;
      }
    }
    if (isReflectable) {
      var unmangledNameIndex = optionalParameterCount * 2 + requiredParameterCount + 3;
      var unmangledName = (function() {
  var result = array[unmangledNameIndex];
  if (result != null && typeof result != "string") {
    throw new Error(
        name + ": expected value of type 'string' at index " + (unmangledNameIndex) +
        " but got " + (typeof result));
  }
  return result;
})();
      var reflectionName = unmangledName + ":" + requiredParameterCount + ":" + optionalParameterCount;
      if (isGetter) {
        reflectionName = unmangledName;
      } else if (isSetter) {
        reflectionName = unmangledName + "=";
      }
      if (isStatic) {
        init.mangledGlobalNames[name] = reflectionName;
      } else {
        init.mangledNames[name] = reflectionName;
      }
      funcs[0].$reflectionName = reflectionName;
      funcs[0].$metadataIndex = unmangledNameIndex + 1;
      if (optionalParameterCount) descriptor[unmangledName + "*"] = funcs[0];
    }
  }
  function tearOffGetterNoCsp(funcs, reflectionInfo, name, isIntercepted) {
    return isIntercepted
        ? new Function("funcs", "reflectionInfo", "name", "H", "c",
            "return function tearOff_" + name + (functionCounter++)+ "(x) {" +
              "if (c === null) c = H.closureFromTearOff(" +
                  "this, funcs, reflectionInfo, false, [x], name);" +
              "return new c(this, funcs[0], x, name);" +
            "}")(funcs, reflectionInfo, name, H, null)
        : new Function("funcs", "reflectionInfo", "name", "H", "c",
            "return function tearOff_" + name + (functionCounter++)+ "() {" +
              "if (c === null) c = H.closureFromTearOff(" +
                  "this, funcs, reflectionInfo, false, [], name);" +
              "return new c(this, funcs[0], null, name);" +
            "}")(funcs, reflectionInfo, name, H, null)
  }
  function tearOffGetterCsp(funcs, reflectionInfo, name, isIntercepted) {
    var cache = null;
    return isIntercepted
        ? function(x) {
            if (cache === null) cache = H.closureFromTearOff(this, funcs, reflectionInfo, false, [x], name);
            return new cache(this, funcs[0], x, name)
          }
        : function() {
            if (cache === null) cache = H.closureFromTearOff(this, funcs, reflectionInfo, false, [], name);
            return new cache(this, funcs[0], null, name)
          }
  }
  function tearOff(funcs, reflectionInfo, isStatic, name, isIntercepted) {
    var cache;
    return isStatic
        ? function() {
            if (cache === void 0) cache = H.closureFromTearOff(this, funcs, reflectionInfo, true, [], name).prototype;
            return cache;
          }
        : tearOffGetter(funcs, reflectionInfo, name, isIntercepted);
  }
  var functionCounter = 0;
  var tearOffGetter = (typeof dart_precompiled == "function")
      ? tearOffGetterCsp : tearOffGetterNoCsp;
  if (!init.libraries) init.libraries = [];
  if (!init.mangledNames) init.mangledNames = map();
  if (!init.mangledGlobalNames) init.mangledGlobalNames = map();
  if (!init.statics) init.statics = map();
  if (!init.typeInformation) init.typeInformation = map();
  if (!init.globalFunctions) init.globalFunctions = map();
  var libraries = init.libraries;
  var mangledNames = init.mangledNames;
  var mangledGlobalNames = init.mangledGlobalNames;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var length = reflectionData.length;
  for (var i = 0; i < length; i++) {
    var data = reflectionData[i];
    var name = data[0];
    var uri = data[1];
    var metadata = data[2];
    var globalObject = data[3];
    var descriptor = data[4];
    var isRoot = !!data[5];
    var fields = descriptor && descriptor[""];
    var classes = [];
    var functions = [];
    processStatics(descriptor);
    libraries.push([name, uri, classes, functions, metadata, fields, isRoot,
                    globalObject]);
  }
})
([
["_foreign_helper", "dart:_foreign_helper", , H, {
  "": "",
  JS_CONST: {
    "": "Object;code"
  }
}],
["_interceptors", "dart:_interceptors", , J, {
  "": "",
  getInterceptor: function(object) {
    return void 0;
  },
  makeDispatchRecord: function(interceptor, proto, extension, indexability) {
    return {i: interceptor, p: proto, e: extension, x: indexability};
  },
  getNativeInterceptor: function(object) {
    var record, proto, objectProto, interceptor;
    record = object[init.dispatchPropertyName];
    if (record == null)
      if ($.initNativeDispatchFlag == null) {
        H.initNativeDispatch();
        record = object[init.dispatchPropertyName];
      }
    if (record != null) {
      proto = record.p;
      if (false === proto)
        return record.i;
      if (true === proto)
        return object;
      objectProto = Object.getPrototypeOf(object);
      if (proto === objectProto)
        return record.i;
      if (record.e === objectProto)
        throw H.wrapException(P.UnimplementedError$("Return interceptor for " + H.S(proto(object, record))));
    }
    interceptor = H.lookupAndCacheInterceptor(object);
    if (interceptor == null)
      return C.UnknownJavaScriptObject_methods;
    return interceptor;
  },
  Interceptor: {
    "": "Object;",
    $eq: function(receiver, other) {
      return receiver === other;
    },
    get$hashCode: function(receiver) {
      return H.Primitives_objectHashCode(receiver);
    },
    toString$0: function(receiver) {
      return H.Primitives_objectToString(receiver);
    },
    "%": "CanvasGradient|CanvasPattern|DOMError|DOMImplementation|FileError|MediaError|MediaKeyError|Navigator|NavigatorUserMediaError|PositionError|SQLError|SVGAnimatedEnumeration|SVGAnimatedLength|SVGAnimatedLengthList|SVGAnimatedNumber|SVGAnimatedNumberList|SVGAnimatedString"
  },
  JSBool: {
    "": "bool/Interceptor;",
    toString$0: function(receiver) {
      return String(receiver);
    },
    get$hashCode: function(receiver) {
      return receiver ? 519018 : 218159;
    },
    $isbool: true
  },
  JSNull: {
    "": "Interceptor;",
    $eq: function(receiver, other) {
      return null == other;
    },
    toString$0: function(receiver) {
      return "null";
    },
    get$hashCode: function(receiver) {
      return 0;
    }
  },
  JavaScriptObject: {
    "": "Interceptor;",
    get$hashCode: function(_) {
      return 0;
    }
  },
  PlainJavaScriptObject: {
    "": "JavaScriptObject;"
  },
  UnknownJavaScriptObject: {
    "": "JavaScriptObject;"
  },
  JSArray: {
    "": "List/Interceptor;",
    add$1: function(receiver, value) {
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("add"));
      receiver.push(value);
    },
    removeAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        throw H.wrapException(P.RangeError$value(index));
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("removeAt"));
      return receiver.splice(index, 1)[0];
    },
    clear$0: function(receiver) {
      this.set$length(receiver, 0);
    },
    forEach$1: function(receiver, f) {
      return H.IterableMixinWorkaround_forEach(receiver, f);
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    sublist$2: function(receiver, start, end) {
      if (start < 0 || start > receiver.length)
        throw H.wrapException(P.RangeError$range(start, 0, receiver.length));
      if (end < start || end > receiver.length)
        throw H.wrapException(P.RangeError$range(end, start, receiver.length));
      if (start === end)
        return H.setRuntimeTypeInfo([], [H.getTypeArgumentByIndex(receiver, 0)]);
      return H.setRuntimeTypeInfo(receiver.slice(start, end), [H.getTypeArgumentByIndex(receiver, 0)]);
    },
    toString$0: function(receiver) {
      return H.IterableMixinWorkaround_toStringIterable(receiver, "[", "]");
    },
    toList$1$growable: function(receiver, growable) {
      var t1;
      if (growable)
        return H.setRuntimeTypeInfo(receiver.slice(), [H.getTypeArgumentByIndex(receiver, 0)]);
      else {
        t1 = H.setRuntimeTypeInfo(receiver.slice(), [H.getTypeArgumentByIndex(receiver, 0)]);
        t1.fixed$length = init;
        return t1;
      }
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    get$iterator: function(receiver) {
      return new H.ListIterator(receiver, receiver.length, 0, null);
    },
    get$hashCode: function(receiver) {
      return H.Primitives_objectHashCode(receiver);
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    set$length: function(receiver, newLength) {
      if (newLength < 0)
        throw H.wrapException(P.RangeError$value(newLength));
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("set length"));
      receiver.length = newLength;
    },
    $index: function(receiver, index) {
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(new P.ArgumentError(index));
      if (index >= receiver.length || index < 0)
        throw H.wrapException(P.RangeError$value(index));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      if (!!receiver.immutable$list)
        H.throwExpression(P.UnsupportedError$("indexed set"));
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(new P.ArgumentError(index));
      if (index >= receiver.length || index < 0)
        throw H.wrapException(P.RangeError$value(index));
      receiver[index] = value;
    },
    $isList: true,
    $asList: null,
    $isList: true,
    $isEfficientLength: true,
    static: {JSArray_JSArray$fixed: function($length, $E) {
        var t1;
        if (typeof $length !== "number" || Math.floor($length) !== $length || $length < 0)
          throw H.wrapException(P.ArgumentError$("Length must be a non-negative integer: " + H.S($length)));
        t1 = H.setRuntimeTypeInfo(new Array($length), [$E]);
        t1.fixed$length = init;
        return t1;
      }}
  },
  JSNumber: {
    "": "num/Interceptor;",
    compareTo$1: function(receiver, b) {
      var bIsNegative;
      if (typeof b !== "number")
        throw H.wrapException(new P.ArgumentError(b));
      if (receiver < b)
        return -1;
      else if (receiver > b)
        return 1;
      else if (receiver === b) {
        if (receiver === 0) {
          bIsNegative = this.get$isNegative(b);
          if (this.get$isNegative(receiver) === bIsNegative)
            return 0;
          if (this.get$isNegative(receiver))
            return -1;
          return 1;
        }
        return 0;
      } else if (isNaN(receiver)) {
        if (this.get$isNaN(b))
          return 0;
        return 1;
      } else
        return -1;
    },
    get$isNegative: function(receiver) {
      return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
    },
    get$isNaN: function(receiver) {
      return isNaN(receiver);
    },
    remainder$1: function(receiver, b) {
      return receiver % b;
    },
    abs$0: function(receiver) {
      return Math.abs(receiver);
    },
    toInt$0: function(receiver) {
      var t1;
      if (receiver >= -2147483648 && receiver <= 2147483647)
        return receiver | 0;
      if (isFinite(receiver)) {
        t1 = receiver < 0 ? Math.ceil(receiver) : Math.floor(receiver);
        return t1 + 0;
      }
      throw H.wrapException(P.UnsupportedError$('' + receiver));
    },
    floor$0: function(receiver) {
      return this.toInt$0(Math.floor(receiver));
    },
    roundToDouble$0: function(receiver) {
      if (receiver < 0)
        return -Math.round(-receiver);
      else
        return Math.round(receiver);
    },
    clamp$2: function(receiver, lowerLimit, upperLimit) {
      if (C.JSInt_methods.compareTo$1(lowerLimit, upperLimit) > 0)
        throw H.wrapException(new P.ArgumentError(lowerLimit));
      if (this.compareTo$1(receiver, lowerLimit) < 0)
        return lowerLimit;
      if (this.compareTo$1(receiver, upperLimit) > 0)
        return upperLimit;
      return receiver;
    },
    toStringAsFixed$1: function(receiver, fractionDigits) {
      var result;
      if (fractionDigits > 20)
        throw H.wrapException(P.RangeError$(fractionDigits));
      result = receiver.toFixed(fractionDigits);
      if (receiver === 0 && this.get$isNegative(receiver))
        return "-" + result;
      return result;
    },
    toString$0: function(receiver) {
      if (receiver === 0 && 1 / receiver < 0)
        return "-0.0";
      else
        return "" + receiver;
    },
    get$hashCode: function(receiver) {
      return receiver & 0x1FFFFFFF;
    },
    $add: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(new P.ArgumentError(other));
      return receiver + other;
    },
    $sub: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(new P.ArgumentError(other));
      return receiver - other;
    },
    $div: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(new P.ArgumentError(other));
      return receiver / other;
    },
    $mul: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(new P.ArgumentError(other));
      return receiver * other;
    },
    $mod: function(receiver, other) {
      var result = receiver % other;
      if (result === 0)
        return 0;
      if (result > 0)
        return result;
      if (other < 0)
        return result - other;
      else
        return result + other;
    },
    $tdiv: function(receiver, other) {
      if ((receiver | 0) === receiver && (other | 0) === other && 0 !== other && -1 !== other)
        return receiver / other | 0;
      else
        return this.toInt$0(receiver / other);
    },
    _tdivFast$1: function(receiver, other) {
      return (receiver | 0) === receiver ? receiver / other | 0 : this.toInt$0(receiver / other);
    },
    _shrOtherPositive$1: function(receiver, other) {
      var t1;
      if (receiver > 0)
        t1 = other > 31 ? 0 : receiver >>> other;
      else {
        t1 = other > 31 ? 31 : other;
        t1 = receiver >> t1 >>> 0;
      }
      return t1;
    },
    $lt: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver < other;
    },
    $gt: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(new P.ArgumentError(other));
      return receiver > other;
    },
    $ge: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver >= other;
    },
    $isnum: true,
    static: {"": "JSNumber__MIN_INT32,JSNumber__MAX_INT32"}
  },
  JSInt: {
    "": "int/JSNumber;",
    $isnum: true,
    $isint: true
  },
  JSDouble: {
    "": "double/JSNumber;",
    $isnum: true
  },
  JSString: {
    "": "String/Interceptor;",
    codeUnitAt$1: function(receiver, index) {
      if (index < 0)
        throw H.wrapException(P.RangeError$value(index));
      if (index >= receiver.length)
        throw H.wrapException(P.RangeError$value(index));
      return receiver.charCodeAt(index);
    },
    $add: function(receiver, other) {
      if (typeof other !== "string")
        throw H.wrapException(new P.ArgumentError(other));
      return receiver + other;
    },
    split$1: function(receiver, pattern) {
      return receiver.split(pattern);
    },
    startsWith$2: function(receiver, pattern, index) {
      var endIndex;
      if (index > receiver.length)
        throw H.wrapException(P.RangeError$range(index, 0, receiver.length));
      endIndex = index + pattern.length;
      if (endIndex > receiver.length)
        return false;
      return pattern === receiver.substring(index, endIndex);
    },
    startsWith$1: function($receiver, pattern) {
      return this.startsWith$2($receiver, pattern, 0);
    },
    substring$2: function(receiver, startIndex, endIndex) {
      if (endIndex == null)
        endIndex = receiver.length;
      if (typeof endIndex !== "number" || Math.floor(endIndex) !== endIndex)
        H.throwExpression(P.ArgumentError$(endIndex));
      if (startIndex < 0)
        throw H.wrapException(P.RangeError$value(startIndex));
      if (typeof endIndex !== "number")
        return H.iae(endIndex);
      if (startIndex > endIndex)
        throw H.wrapException(P.RangeError$value(startIndex));
      if (endIndex > receiver.length)
        throw H.wrapException(P.RangeError$value(endIndex));
      return receiver.substring(startIndex, endIndex);
    },
    substring$1: function($receiver, startIndex) {
      return this.substring$2($receiver, startIndex, null);
    },
    toLowerCase$0: function(receiver) {
      return receiver.toLowerCase();
    },
    trim$0: function(receiver) {
      var endIndex, startIndex, codeUnit, endIndex0, endIndex1;
      for (endIndex = receiver.length, startIndex = 0; startIndex < endIndex;) {
        if (startIndex >= endIndex)
          H.throwExpression(P.RangeError$value(startIndex));
        codeUnit = receiver.charCodeAt(startIndex);
        if (codeUnit === 32 || codeUnit === 13 || J.JSString__isWhitespace(codeUnit))
          ++startIndex;
        else
          break;
      }
      if (startIndex === endIndex)
        return "";
      for (endIndex0 = endIndex; true; endIndex0 = endIndex1) {
        endIndex1 = endIndex0 - 1;
        if (endIndex1 < 0)
          H.throwExpression(P.RangeError$value(endIndex1));
        if (endIndex1 >= endIndex)
          H.throwExpression(P.RangeError$value(endIndex1));
        codeUnit = receiver.charCodeAt(endIndex1);
        if (codeUnit === 32 || codeUnit === 13 || J.JSString__isWhitespace(codeUnit))
          ;
        else
          break;
      }
      if (startIndex === 0 && endIndex0 === endIndex)
        return receiver;
      return receiver.substring(startIndex, endIndex0);
    },
    get$isEmpty: function(receiver) {
      return receiver.length === 0;
    },
    compareTo$1: function(receiver, other) {
      var t1;
      if (typeof other !== "string")
        throw H.wrapException(new P.ArgumentError(other));
      if (receiver === other)
        t1 = 0;
      else
        t1 = receiver < other ? -1 : 1;
      return t1;
    },
    toString$0: function(receiver) {
      return receiver;
    },
    get$hashCode: function(receiver) {
      var t1, hash, i;
      for (t1 = receiver.length, hash = 0, i = 0; i < t1; ++i) {
        hash = 536870911 & hash + receiver.charCodeAt(i);
        hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
        hash ^= hash >> 6;
      }
      hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
      hash ^= hash >> 11;
      return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(new P.ArgumentError(index));
      if (index >= receiver.length || index < 0)
        throw H.wrapException(P.RangeError$value(index));
      return receiver[index];
    },
    $isString: true,
    static: {JSString__isWhitespace: function(codeUnit) {
        if (codeUnit < 256)
          switch (codeUnit) {
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 32:
            case 133:
            case 160:
              return true;
            default:
              return false;
          }
        switch (codeUnit) {
          case 5760:
          case 6158:
          case 8192:
          case 8193:
          case 8194:
          case 8195:
          case 8196:
          case 8197:
          case 8198:
          case 8199:
          case 8200:
          case 8201:
          case 8202:
          case 8232:
          case 8233:
          case 8239:
          case 8287:
          case 12288:
          case 65279:
            return true;
          default:
            return false;
        }
      }}
  }
}],
["_isolate_helper", "dart:_isolate_helper", , H, {
  "": "",
  _callInIsolate: function(isolate, $function) {
    var result = isolate.eval$1($function);
    init.globalState.topEventLoop.run$0();
    return result;
  },
  startRootIsolate: function(entry) {
    var t1, t2, rootContext;
    t1 = new H._Manager(0, 0, 1, null, null, null, null, null, null, null, null, null, entry);
    t1._Manager$1(entry);
    init.globalState = t1;
    if (init.globalState.isWorker === true)
      return;
    t1 = init.globalState;
    t2 = t1.nextIsolateId;
    t1.nextIsolateId = t2 + 1;
    rootContext = new H._IsolateContext(t2, P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSInt, H.RawReceivePortImpl), P.LinkedHashSet_LinkedHashSet(null, null, null, J.JSInt), new Isolate());
    init.globalState.rootContext = rootContext;
    init.globalState.currentContext = rootContext;
    t1 = H.getDynamicRuntimeType();
    t2 = H.buildFunctionType(t1, [t1])._isTest$1(entry);
    if (t2)
      rootContext.eval$1(new H.startRootIsolate_closure(entry));
    else {
      t1 = H.buildFunctionType(t1, [t1, t1])._isTest$1(entry);
      if (t1)
        rootContext.eval$1(new H.startRootIsolate_closure0(entry));
      else
        rootContext.eval$1(entry);
    }
    init.globalState.topEventLoop.run$0();
  },
  IsolateNatives_computeThisScript: function() {
    var currentScript = init.currentScript;
    if (currentScript != null)
      return String(currentScript.src);
    if (typeof version == "function" && typeof os == "object" && "system" in os)
      return H.IsolateNatives_computeThisScriptD8();
    if (typeof version == "function" && typeof system == "function")
      return thisFilename();
    return;
  },
  IsolateNatives_computeThisScriptD8: function() {
    var stack, matches;
    stack = new Error().stack;
    if (stack == null) {
      stack = (function() {try { throw new Error() } catch(e) { return e.stack }})();
      if (stack == null)
        throw H.wrapException(P.UnsupportedError$("No stack trace"));
    }
    matches = stack.match(new RegExp("^ *at [^(]*\\((.*):[0-9]*:[0-9]*\\)$", "m"));
    if (matches != null)
      return matches[1];
    matches = stack.match(new RegExp("^[^@]*@(.*):[0-9]*$", "m"));
    if (matches != null)
      return matches[1];
    throw H.wrapException(P.UnsupportedError$("Cannot extract URI from \"" + stack + "\""));
  },
  IsolateNatives__processWorkerMessage: function(sender, e) {
    var msg, t1, functionName, entryPoint, args, message, isSpawnUri, replyTo, t2, context, uri, t3, t4, t5, worker, t6, workerId;
    msg = H._deserializeMessage(e.data);
    t1 = J.getInterceptor$asx(msg);
    switch (t1.$index(msg, "command")) {
      case "start":
        init.globalState.currentManagerId = t1.$index(msg, "id");
        functionName = t1.$index(msg, "functionName");
        entryPoint = functionName == null ? init.globalState.entry : init.globalFunctions[functionName]();
        args = t1.$index(msg, "args");
        message = H._deserializeMessage(t1.$index(msg, "msg"));
        isSpawnUri = t1.$index(msg, "isSpawnUri");
        replyTo = H._deserializeMessage(t1.$index(msg, "replyTo"));
        t1 = init.globalState;
        t2 = t1.nextIsolateId;
        t1.nextIsolateId = t2 + 1;
        context = new H._IsolateContext(t2, P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSInt, H.RawReceivePortImpl), P.LinkedHashSet_LinkedHashSet(null, null, null, J.JSInt), new Isolate());
        init.globalState.topEventLoop.events._add$1(new H._IsolateEvent(context, new H.IsolateNatives__processWorkerMessage_closure(entryPoint, args, message, isSpawnUri, replyTo), "worker-start"));
        init.globalState.currentContext = context;
        init.globalState.topEventLoop.run$0();
        break;
      case "spawn-worker":
        t2 = t1.$index(msg, "functionName");
        uri = t1.$index(msg, "uri");
        t3 = t1.$index(msg, "args");
        t4 = t1.$index(msg, "msg");
        t5 = t1.$index(msg, "isSpawnUri");
        t1 = t1.$index(msg, "replyPort");
        if (uri == null)
          uri = $.get$IsolateNatives_thisScript();
        worker = new Worker(uri);
        worker.onmessage = function(e) { H.IsolateNatives__processWorkerMessage(worker, e); };
        t6 = init.globalState;
        workerId = t6.nextManagerId;
        t6.nextManagerId = workerId + 1;
        t6 = $.get$IsolateNatives_workerIds();
        t6.$indexSet(t6, worker, workerId);
        t6 = init.globalState.managers;
        t6.$indexSet(t6, workerId, worker);
        worker.postMessage(H._serializeMessage(H.fillLiteralMap(["command", "start", "id", workerId, "replyTo", H._serializeMessage(t1), "args", t3, "msg", H._serializeMessage(t4), "isSpawnUri", t5, "functionName", t2], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null))));
        break;
      case "message":
        if (t1.$index(msg, "port") != null)
          J.send$1$x(t1.$index(msg, "port"), t1.$index(msg, "msg"));
        init.globalState.topEventLoop.run$0();
        break;
      case "close":
        t1 = init.globalState.managers;
        t2 = $.get$IsolateNatives_workerIds();
        t1.remove$1(t1, t2.$index(t2, sender));
        sender.terminate();
        init.globalState.topEventLoop.run$0();
        break;
      case "log":
        H.IsolateNatives__log(t1.$index(msg, "msg"));
        break;
      case "print":
        if (init.globalState.isWorker === true) {
          t1 = init.globalState.mainManager;
          t2 = H._serializeMessage(H.fillLiteralMap(["command", "print", "msg", msg], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
          t1.toString;
          self.postMessage(t2);
        } else
          P.print(t1.$index(msg, "msg"));
        break;
      case "error":
        throw H.wrapException(t1.$index(msg, "msg"));
      default:
    }
  },
  IsolateNatives__log: function(msg) {
    var trace, t1, t2, exception;
    if (init.globalState.isWorker === true) {
      t1 = init.globalState.mainManager;
      t2 = H._serializeMessage(H.fillLiteralMap(["command", "log", "msg", msg], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
      t1.toString;
      self.postMessage(t2);
    } else
      try {
        $.get$globalThis().console.log(msg);
      } catch (exception) {
        H.unwrapException(exception);
        trace = new H._StackTrace(exception, null);
        throw H.wrapException(P.Exception_Exception(trace));
      }

  },
  _serializeMessage: function(message) {
    var t1;
    if (init.globalState.supportsWorkers === true) {
      t1 = new H._JsSerializer(0, new H._MessageTraverserVisitedMap());
      t1._visited = new H._JsVisitedMap(null);
      return t1.traverse$1(message);
    } else {
      t1 = new H._JsCopier(new H._MessageTraverserVisitedMap());
      t1._visited = new H._JsVisitedMap(null);
      return t1.traverse$1(message);
    }
  },
  _deserializeMessage: function(message) {
    if (init.globalState.supportsWorkers === true)
      return new H._JsDeserializer(null).deserialize$1(message);
    else
      return message;
  },
  _MessageTraverser_isPrimitive: function(x) {
    return x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean";
  },
  _Deserializer_isPrimitive: function(x) {
    return x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean";
  },
  startRootIsolate_closure: {
    "": "Closure:12;entry_0",
    call$0: function() {
      this.entry_0.call$1([]);
    }
  },
  startRootIsolate_closure0: {
    "": "Closure:12;entry_1",
    call$0: function() {
      this.entry_1.call$2([], null);
    }
  },
  _Manager: {
    "": "Object;nextIsolateId,currentManagerId,nextManagerId,currentContext,rootContext,topEventLoop,fromCommandLine,isWorker,supportsWorkers,isolates,mainManager,managers,entry",
    _Manager$1: function(entry) {
      var t1, t2, t3, $function;
      t1 = $.get$globalWindow() == null;
      t2 = $.get$globalWorker();
      t3 = t1 && $.get$globalPostMessageDefined() === true;
      this.isWorker = t3;
      if (!t3)
        t2 = t2 != null && $.get$IsolateNatives_thisScript() != null;
      else
        t2 = true;
      this.supportsWorkers = t2;
      this.fromCommandLine = t1 && !t3;
      t2 = H._IsolateEvent;
      t3 = H.setRuntimeTypeInfo(new P.ListQueue(null, 0, 0, 0), [t2]);
      t3.ListQueue$1(null, t2);
      this.topEventLoop = new H._EventLoop(t3, 0);
      this.isolates = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSInt, H._IsolateContext);
      this.managers = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSInt, null);
      if (this.isWorker === true) {
        t1 = new H._MainManagerStub();
        this.mainManager = t1;
        $function = function (e) { H.IsolateNatives__processWorkerMessage(t1, e); };
        $.get$globalThis().onmessage = $function;
        $.get$globalThis().dartPrint = function (object) {};
      }
    }
  },
  _IsolateContext: {
    "": "Object;id,ports,weakPorts,isolateStatics<",
    eval$1: function(code) {
      var old, result;
      old = init.globalState.currentContext;
      init.globalState.currentContext = this;
      $ = this.isolateStatics;
      result = null;
      try {
        result = code.call$0();
      } finally {
        init.globalState.currentContext = old;
        if (old != null)
          $ = old.get$isolateStatics();
      }
      return result;
    },
    lookup$1: function(portId) {
      var t1 = this.ports;
      return t1.$index(t1, portId);
    },
    register$2: function(_, portId, port) {
      var t1 = this.ports;
      if (t1.containsKey$1(portId))
        throw H.wrapException(P.Exception_Exception("Registry: ports must be registered only once."));
      t1.$indexSet(t1, portId, port);
      this._updateGlobalState$0();
    },
    _updateGlobalState$0: function() {
      var t1, t2;
      t1 = this.id;
      if (this.ports._collection$_length - this.weakPorts._collection$_length > 0) {
        t2 = init.globalState.isolates;
        t2.$indexSet(t2, t1, this);
      } else {
        t2 = init.globalState.isolates;
        t2.remove$1(t2, t1);
      }
    }
  },
  _EventLoop: {
    "": "Object;events,activeTimerCount",
    dequeue$0: function() {
      var t1 = this.events;
      if (t1._head === t1._tail)
        return;
      return t1.removeFirst$0();
    },
    runIteration$0: function() {
      var $event, t1, t2;
      $event = this.dequeue$0();
      if ($event == null) {
        if (init.globalState.rootContext != null && init.globalState.isolates.containsKey$1(init.globalState.rootContext.id) && init.globalState.fromCommandLine === true && init.globalState.rootContext.ports._collection$_length === 0)
          H.throwExpression(P.Exception_Exception("Program exited with open ReceivePorts."));
        t1 = init.globalState;
        if (t1.isWorker === true && t1.isolates._collection$_length === 0 && t1.topEventLoop.activeTimerCount === 0) {
          t1 = t1.mainManager;
          t2 = H._serializeMessage(H.fillLiteralMap(["command", "close"], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
          t1.toString;
          self.postMessage(t2);
        }
        return false;
      }
      $event.process$0();
      return true;
    },
    _runHelper$0: function() {
      if ($.get$globalWindow() != null)
        new H._EventLoop__runHelper_next(this).call$0();
      else
        for (; this.runIteration$0();)
          ;
    },
    run$0: function() {
      var e, trace, exception, t1, t2;
      if (init.globalState.isWorker !== true)
        this._runHelper$0();
      else
        try {
          this._runHelper$0();
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          trace = new H._StackTrace(exception, null);
          t1 = init.globalState.mainManager;
          t2 = H._serializeMessage(H.fillLiteralMap(["command", "error", "msg", H.S(e) + "\n" + H.S(trace)], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
          t1.toString;
          self.postMessage(t2);
        }

    }
  },
  _EventLoop__runHelper_next: {
    "": "Closure:1;this_0",
    call$0: function() {
      if (!this.this_0.runIteration$0())
        return;
      P.Timer_Timer(C.Duration_0, this);
    }
  },
  _IsolateEvent: {
    "": "Object;isolate,fn,message",
    process$0: function() {
      this.isolate.eval$1(this.fn);
    }
  },
  _MainManagerStub: {
    "": "Object;"
  },
  IsolateNatives__processWorkerMessage_closure: {
    "": "Closure:12;entryPoint_0,args_1,message_2,isSpawnUri_3,replyTo_4",
    call$0: function() {
      var t1, t2, t3, t4, t5, t6, t7;
      t1 = this.entryPoint_0;
      t2 = this.args_1;
      t3 = this.message_2;
      t4 = init.globalState.currentContext.id;
      $.Primitives_mirrorFunctionCacheName = $.Primitives_mirrorFunctionCacheName + ("_" + t4);
      $.Primitives_mirrorInvokeCacheName = $.Primitives_mirrorInvokeCacheName + ("_" + t4);
      t4 = $.RawReceivePortImpl__nextFreeId;
      $.RawReceivePortImpl__nextFreeId = t4 + 1;
      t5 = new H.RawReceivePortImpl(t4, null, false);
      t6 = init.globalState.currentContext;
      t7 = t6.weakPorts;
      t7.add$1(t7, t4);
      t6.register$2(t6, t4, t5);
      t4 = new H.ReceivePortImpl(t5, null);
      t4.ReceivePortImpl$fromRawReceivePort$1(t5);
      $.controlPort = t4;
      J.send$1$x(this.replyTo_4, ["spawned", new H._NativeJsSendPort(t5, init.globalState.currentContext.id)]);
      if (this.isSpawnUri_3 !== true)
        t1.call$1(t3);
      else {
        t4 = H.getDynamicRuntimeType();
        t5 = H.buildFunctionType(t4, [t4, t4])._isTest$1(t1);
        if (t5)
          t1.call$2(t2, t3);
        else {
          t3 = H.buildFunctionType(t4, [t4])._isTest$1(t1);
          if (t3)
            t1.call$1(t2);
          else
            t1.call$0();
        }
      }
    }
  },
  _BaseSendPort: {
    "": "Object;",
    $isSendPort: true
  },
  _NativeJsSendPort: {
    "": "_BaseSendPort;_receivePort,_isolateId",
    send$1: function(_, message) {
      var t1, t2, t3, isolate, shouldSerialize;
      t1 = {};
      t2 = init.globalState.isolates;
      t3 = this._isolateId;
      isolate = t2.$index(t2, t3);
      if (isolate == null)
        return;
      if (this._receivePort.get$_isClosed())
        return;
      shouldSerialize = init.globalState.currentContext != null && init.globalState.currentContext.id !== t3;
      t1.msg_0 = message;
      if (shouldSerialize)
        t1.msg_0 = H._serializeMessage(message);
      t2 = init.globalState.topEventLoop;
      t3 = "receive " + H.S(message);
      t2.events._add$1(new H._IsolateEvent(isolate, new H._NativeJsSendPort_send_closure(t1, this, shouldSerialize), t3));
    },
    $eq: function(_, other) {
      var t1;
      if (other == null)
        return false;
      t1 = J.getInterceptor(other);
      return typeof other === "object" && other !== null && !!t1.$is_NativeJsSendPort && J.$eq(this._receivePort, other._receivePort);
    },
    get$hashCode: function(_) {
      return this._receivePort.get$_id();
    },
    $is_NativeJsSendPort: true,
    $isSendPort: true
  },
  _NativeJsSendPort_send_closure: {
    "": "Closure:12;box_0,this_1,shouldSerialize_2",
    call$0: function() {
      var t1, t2;
      t1 = this.this_1._receivePort;
      if (!t1.get$_isClosed()) {
        if (this.shouldSerialize_2) {
          t2 = this.box_0;
          t2.msg_0 = H._deserializeMessage(t2.msg_0);
        }
        t1.__isolate_helper$_add$1(this.box_0.msg_0);
      }
    }
  },
  _WorkerSendPort: {
    "": "_BaseSendPort;_workerId,_receivePortId,_isolateId",
    send$1: function(_, message) {
      var workerMessage, t1, manager;
      workerMessage = H._serializeMessage(H.fillLiteralMap(["command", "message", "port", this, "msg", message], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
      if (init.globalState.isWorker === true) {
        init.globalState.mainManager.toString;
        self.postMessage(workerMessage);
      } else {
        t1 = init.globalState.managers;
        manager = t1.$index(t1, this._workerId);
        if (manager != null)
          manager.postMessage(workerMessage);
      }
    },
    $eq: function(_, other) {
      var t1;
      if (other == null)
        return false;
      t1 = J.getInterceptor(other);
      return typeof other === "object" && other !== null && !!t1.$is_WorkerSendPort && J.$eq(this._workerId, other._workerId) && J.$eq(this._isolateId, other._isolateId) && J.$eq(this._receivePortId, other._receivePortId);
    },
    get$hashCode: function(_) {
      var t1, t2, t3;
      t1 = this._workerId;
      if (typeof t1 !== "number")
        return t1.$shl();
      t2 = this._isolateId;
      if (typeof t2 !== "number")
        return t2.$shl();
      t3 = this._receivePortId;
      if (typeof t3 !== "number")
        return H.iae(t3);
      return (t1 << 16 ^ t2 << 8 ^ t3) >>> 0;
    },
    $is_WorkerSendPort: true,
    $isSendPort: true
  },
  RawReceivePortImpl: {
    "": "Object;_id<,_handler,_isClosed<",
    _handler$1: function(arg0) {
      return this._handler.call$1(arg0);
    },
    close$0: function(_) {
      var t1, t2;
      if (this._isClosed)
        return;
      this._isClosed = true;
      this._handler = null;
      t1 = init.globalState.currentContext;
      t2 = t1.ports;
      t2.remove$1(t2, this._id);
      t1._updateGlobalState$0();
    },
    __isolate_helper$_add$1: function(dataEvent) {
      if (this._isClosed)
        return;
      this._handler$1(dataEvent);
    },
    static: {"": "RawReceivePortImpl__nextFreeId"}
  },
  ReceivePortImpl: {
    "": "Stream;_rawPort,_controller",
    listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
      var t1 = this._controller;
      t1.toString;
      return H.setRuntimeTypeInfo(new P._ControllerStream(t1), [null]).listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, onError);
    },
    close$0: [function(_) {
      var t1 = this._rawPort;
      t1.close$0(t1);
      t1 = this._controller;
      t1.close$0(t1);
    }, "call$0", "get$close", 0, 0, 1],
    ReceivePortImpl$fromRawReceivePort$1: function(_rawPort) {
      var t1 = P.StreamController_StreamController(this.get$close(this), null, null, null, true, null);
      this._controller = t1;
      this._rawPort._handler = t1.get$add(t1);
    }
  },
  _JsSerializer: {
    "": "_Serializer;_nextFreeRefId,_visited",
    visitSendPort$1: function(x) {
      if (!!x.$is_NativeJsSendPort)
        return ["sendport", init.globalState.currentManagerId, x._isolateId, x._receivePort.get$_id()];
      if (!!x.$is_WorkerSendPort)
        return ["sendport", x._workerId, x._isolateId, x._receivePortId];
      throw H.wrapException("Illegal underlying port " + H.S(x));
    }
  },
  _JsCopier: {
    "": "_Copier;_visited",
    visitSendPort$1: function(x) {
      if (!!x.$is_NativeJsSendPort)
        return new H._NativeJsSendPort(x._receivePort, x._isolateId);
      if (!!x.$is_WorkerSendPort)
        return new H._WorkerSendPort(x._workerId, x._receivePortId, x._isolateId);
      throw H.wrapException("Illegal underlying port " + H.S(x));
    }
  },
  _JsDeserializer: {
    "": "_Deserializer;_deserialized",
    deserializeSendPort$1: function(list) {
      var t1, managerId, isolateId, receivePortId, isolate, receivePort;
      t1 = J.getInterceptor$asx(list);
      managerId = t1.$index(list, 1);
      isolateId = t1.$index(list, 2);
      receivePortId = t1.$index(list, 3);
      if (J.$eq(managerId, init.globalState.currentManagerId)) {
        t1 = init.globalState.isolates;
        isolate = t1.$index(t1, isolateId);
        if (isolate == null)
          return;
        receivePort = isolate.lookup$1(receivePortId);
        if (receivePort == null)
          return;
        return new H._NativeJsSendPort(receivePort, isolateId);
      } else
        return new H._WorkerSendPort(managerId, receivePortId, isolateId);
    }
  },
  _JsVisitedMap: {
    "": "Object;tagged",
    $index: function(_, object) {
      return object.__MessageTraverser__attached_info__;
    },
    $indexSet: function(_, object, info) {
      this.tagged.push(object);
      object.__MessageTraverser__attached_info__ = info;
    },
    reset$0: function(_) {
      this.tagged = [];
    },
    cleanup$0: function() {
      var $length, i, t1;
      for ($length = this.tagged.length, i = 0; i < $length; ++i) {
        t1 = this.tagged;
        if (i >= t1.length)
          return H.ioore(t1, i);
        t1[i].__MessageTraverser__attached_info__ = null;
      }
      this.tagged = null;
    }
  },
  _MessageTraverserVisitedMap: {
    "": "Object;",
    $index: function(_, object) {
      return;
    },
    $indexSet: function(_, object, info) {
    },
    reset$0: function(_) {
    },
    cleanup$0: function() {
      return;
    }
  },
  _MessageTraverser: {
    "": "Object;",
    traverse$1: function(x) {
      var result, t1;
      if (H._MessageTraverser_isPrimitive(x))
        return this.visitPrimitive$1(x);
      t1 = this._visited;
      t1.reset$0(t1);
      result = null;
      try {
        result = this._dispatch$1(x);
      } finally {
        this._visited.cleanup$0();
      }
      return result;
    },
    _dispatch$1: function(x) {
      var t1;
      if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
        return this.visitPrimitive$1(x);
      t1 = J.getInterceptor(x);
      if (typeof x === "object" && x !== null && (x.constructor === Array || !!t1.$isList))
        return this.visitList$1(x);
      if (typeof x === "object" && x !== null && !!t1.$isMap)
        return this.visitMap$1(x);
      if (typeof x === "object" && x !== null && !!t1.$isSendPort)
        return this.visitSendPort$1(x);
      return this.visitObject$1(x);
    },
    visitObject$1: function(x) {
      throw H.wrapException("Message serialization: Illegal value " + H.S(x) + " passed");
    }
  },
  _Copier: {
    "": "_MessageTraverser;",
    visitPrimitive$1: function(x) {
      return x;
    },
    visitList$1: function(list) {
      var t1, copy, len, t2, i;
      t1 = this._visited;
      copy = t1.$index(t1, list);
      if (copy != null)
        return copy;
      t1 = J.getInterceptor$asx(list);
      len = t1.get$length(list);
      copy = Array(len);
      copy.fixed$length = init;
      t2 = this._visited;
      t2.$indexSet(t2, list, copy);
      for (i = 0; i < len; ++i)
        copy[i] = this._dispatch$1(t1.$index(list, i));
      return copy;
    },
    visitMap$1: function(map) {
      var t1, t2, copy;
      t1 = {};
      t2 = this._visited;
      copy = t2.$index(t2, map);
      t1.copy_0 = copy;
      if (copy != null)
        return copy;
      copy = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
      t1.copy_0 = copy;
      t2 = this._visited;
      t2.$indexSet(t2, map, copy);
      map.forEach$1(map, new H._Copier_visitMap_closure(t1, this));
      return t1.copy_0;
    },
    visitSendPort$1: function(x) {
      return H.throwExpression(P.UnimplementedError$(null));
    }
  },
  _Copier_visitMap_closure: {
    "": "Closure:13;box_0,this_1",
    call$2: function(key, val) {
      var t1 = this.this_1;
      J.$indexSet$ax(this.box_0.copy_0, t1._dispatch$1(key), t1._dispatch$1(val));
    }
  },
  _Serializer: {
    "": "_MessageTraverser;",
    visitPrimitive$1: function(x) {
      return x;
    },
    visitList$1: function(list) {
      var t1, copyId, id;
      t1 = this._visited;
      copyId = t1.$index(t1, list);
      if (copyId != null)
        return ["ref", copyId];
      id = this._nextFreeRefId;
      this._nextFreeRefId = id + 1;
      t1 = this._visited;
      t1.$indexSet(t1, list, id);
      return ["list", id, this._serializeList$1(list)];
    },
    visitMap$1: function(map) {
      var t1, copyId, id;
      t1 = this._visited;
      copyId = t1.$index(t1, map);
      if (copyId != null)
        return ["ref", copyId];
      id = this._nextFreeRefId;
      this._nextFreeRefId = id + 1;
      t1 = this._visited;
      t1.$indexSet(t1, map, id);
      return ["map", id, this._serializeList$1(J.toList$0$ax(map.get$keys())), this._serializeList$1(J.toList$0$ax(map.get$values(map)))];
    },
    _serializeList$1: function(list) {
      var t1, len, result, i, t2;
      t1 = J.getInterceptor$asx(list);
      len = t1.get$length(list);
      result = [];
      C.JSArray_methods.set$length(result, len);
      for (i = 0; i < len; ++i) {
        t2 = this._dispatch$1(t1.$index(list, i));
        if (i >= result.length)
          return H.ioore(result, i);
        result[i] = t2;
      }
      return result;
    },
    visitSendPort$1: function(x) {
      return H.throwExpression(P.UnimplementedError$(null));
    }
  },
  _Deserializer: {
    "": "Object;",
    deserialize$1: function(x) {
      if (H._Deserializer_isPrimitive(x))
        return x;
      this._deserialized = P.HashMap_HashMap(null, null, null, null, null);
      return this._deserializeHelper$1(x);
    },
    _deserializeHelper$1: function(x) {
      var t1, id;
      if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
        return x;
      t1 = J.getInterceptor$asx(x);
      switch (t1.$index(x, 0)) {
        case "ref":
          id = t1.$index(x, 1);
          t1 = this._deserialized;
          return t1.$index(t1, id);
        case "list":
          return this._deserializeList$1(x);
        case "map":
          return this._deserializeMap$1(x);
        case "sendport":
          return this.deserializeSendPort$1(x);
        default:
          return this.deserializeObject$1(x);
      }
    },
    _deserializeList$1: function(x) {
      var t1, id, dartList, len, i;
      t1 = J.getInterceptor$asx(x);
      id = t1.$index(x, 1);
      dartList = t1.$index(x, 2);
      t1 = this._deserialized;
      t1.$indexSet(t1, id, dartList);
      t1 = J.getInterceptor$asx(dartList);
      len = t1.get$length(dartList);
      if (typeof len !== "number")
        return H.iae(len);
      i = 0;
      for (; i < len; ++i)
        t1.$indexSet(dartList, i, this._deserializeHelper$1(t1.$index(dartList, i)));
      return dartList;
    },
    _deserializeMap$1: function(x) {
      var result, t1, id, t2, keys, values, len, i;
      result = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
      t1 = J.getInterceptor$asx(x);
      id = t1.$index(x, 1);
      t2 = this._deserialized;
      t2.$indexSet(t2, id, result);
      keys = t1.$index(x, 2);
      values = t1.$index(x, 3);
      t1 = J.getInterceptor$asx(keys);
      len = t1.get$length(keys);
      if (typeof len !== "number")
        return H.iae(len);
      t2 = J.getInterceptor$asx(values);
      i = 0;
      for (; i < len; ++i)
        result.$indexSet(result, this._deserializeHelper$1(t1.$index(keys, i)), this._deserializeHelper$1(t2.$index(values, i)));
      return result;
    },
    deserializeObject$1: function(x) {
      throw H.wrapException("Unexpected serialized object");
    }
  },
  TimerImpl: {
    "": "Object;_once,_inEventLoop,_handle",
    cancel$0: function() {
      var t1, t2, t3;
      t1 = $.get$globalThis();
      if (t1.setTimeout != null) {
        if (this._inEventLoop)
          throw H.wrapException(P.UnsupportedError$("Timer in event loop cannot be canceled."));
        t2 = this._handle;
        if (t2 == null)
          return;
        t3 = init.globalState.topEventLoop;
        t3.activeTimerCount = t3.activeTimerCount - 1;
        if (this._once)
          t1.clearTimeout(t2);
        else
          t1.clearInterval(t2);
        this._handle = null;
      } else
        throw H.wrapException(P.UnsupportedError$("Canceling a timer."));
    },
    TimerImpl$periodic$2: function(milliseconds, callback) {
      var t1, t2;
      t1 = $.get$globalThis();
      if (t1.setTimeout != null) {
        t2 = init.globalState.topEventLoop;
        t2.activeTimerCount = t2.activeTimerCount + 1;
        this._handle = t1.setInterval(H.convertDartClosureToJS(new H.TimerImpl$periodic_closure(this, callback), 0), milliseconds);
      } else
        throw H.wrapException(P.UnsupportedError$("Periodic timer."));
    },
    TimerImpl$2: function(milliseconds, callback) {
      var t1, t2;
      if (milliseconds === 0)
        t1 = $.get$globalThis().setTimeout == null || init.globalState.isWorker === true;
      else
        t1 = false;
      if (t1) {
        this._handle = 1;
        t1 = init.globalState.topEventLoop;
        t2 = init.globalState.currentContext;
        t1.events._add$1(new H._IsolateEvent(t2, new H.TimerImpl_internalCallback(this, callback), "timer"));
        this._inEventLoop = true;
      } else {
        t1 = $.get$globalThis();
        if (t1.setTimeout != null) {
          t2 = init.globalState.topEventLoop;
          t2.activeTimerCount = t2.activeTimerCount + 1;
          this._handle = t1.setTimeout(H.convertDartClosureToJS(new H.TimerImpl_internalCallback0(this, callback), 0), milliseconds);
        } else
          throw H.wrapException(P.UnsupportedError$("Timer greater than 0."));
      }
    },
    static: {TimerImpl$: function(milliseconds, callback) {
        var t1 = new H.TimerImpl(true, false, null);
        t1.TimerImpl$2(milliseconds, callback);
        return t1;
      }, TimerImpl$periodic: function(milliseconds, callback) {
        var t1 = new H.TimerImpl(false, false, null);
        t1.TimerImpl$periodic$2(milliseconds, callback);
        return t1;
      }}
  },
  TimerImpl_internalCallback: {
    "": "Closure:1;this_0,callback_1",
    call$0: function() {
      this.this_0._handle = null;
      this.callback_1.call$0();
    }
  },
  TimerImpl_internalCallback0: {
    "": "Closure:1;this_2,callback_3",
    call$0: function() {
      this.this_2._handle = null;
      var t1 = init.globalState.topEventLoop;
      t1.activeTimerCount = t1.activeTimerCount - 1;
      this.callback_3.call$0();
    }
  },
  TimerImpl$periodic_closure: {
    "": "Closure:12;this_0,callback_1",
    call$0: function() {
      this.callback_1.call$1(this.this_0);
    }
  }
}],
["_js_helper", "dart:_js_helper", , H, {
  "": "",
  isJsIndexable: function(object, record) {
    var result, t1;
    if (record != null) {
      result = record.x;
      if (result != null)
        return result;
    }
    t1 = J.getInterceptor(object);
    return typeof object === "object" && object !== null && !!t1.$isJavaScriptIndexingBehavior;
  },
  S: function(value) {
    var res;
    if (typeof value === "string")
      return value;
    if (typeof value === "number") {
      if (value !== 0)
        return "" + value;
    } else if (true === value)
      return "true";
    else if (false === value)
      return "false";
    else if (value == null)
      return "null";
    res = J.toString$0(value);
    if (typeof res !== "string")
      throw H.wrapException(P.ArgumentError$(value));
    return res;
  },
  Primitives_objectHashCode: function(object) {
    var hash = object.$identityHash;
    if (hash == null) {
      hash = Math.random() * 0x3fffffff | 0;
      object.$identityHash = hash;
    }
    return hash;
  },
  Primitives__throwFormatException: [function(string) {
    throw H.wrapException(P.FormatException$(string));
  }, "call$1", "Primitives__throwFormatException$closure", 2, 0, 0],
  Primitives_parseDouble: function(source, handleError) {
    var result, trimmed;
    handleError = H.Primitives__throwFormatException$closure();
    if (!/^\s*[+-]?(?:Infinity|NaN|(?:\.\d+|\d+(?:\.\d*)?)(?:[eE][+-]?\d+)?)\s*$/.test(source))
      return handleError.call$1(source);
    result = parseFloat(source);
    if (isNaN(result)) {
      trimmed = C.JSString_methods.trim$0(source);
      if (trimmed === "NaN" || trimmed === "+NaN" || trimmed === "-NaN")
        return result;
      return handleError.call$1(source);
    }
    return result;
  },
  Primitives_objectTypeName: function(object) {
    var $name, decompiled;
    $name = C.JS_CONST_IX5(J.getInterceptor(object));
    if ($name === "Object") {
      decompiled = String(object.constructor).match(/^\s*function\s*(\S*)\s*\(/)[1];
      if (typeof decompiled === "string")
        $name = decompiled;
    }
    if (J.getInterceptor$s($name).codeUnitAt$1($name, 0) === 36)
      $name = C.JSString_methods.substring$1($name, 1);
    return $name + H.joinArguments(H.getRuntimeTypeInfo(object), 0, null);
  },
  Primitives_objectToString: function(object) {
    return "Instance of '" + H.Primitives_objectTypeName(object) + "'";
  },
  Primitives_numMicroseconds: function() {
    if (typeof window != "undefined" && window !== null) {
      var performance = window.performance;
      if (performance != null && typeof performance.webkitNow == "function")
        return C.JSNumber_methods.toInt$0(Math.floor(1000 * performance.webkitNow()));
    }
    return 1000 * Date.now();
  },
  Primitives__fromCharCodeApply: function(array) {
    var end, t1, result, i, subarray, t2;
    end = array.length;
    for (t1 = end <= 500, result = "", i = 0; i < end; i += 500) {
      if (t1)
        subarray = array;
      else {
        t2 = i + 500;
        t2 = t2 < end ? t2 : end;
        subarray = array.slice(i, t2);
      }
      result += String.fromCharCode.apply(null, subarray);
    }
    return result;
  },
  Primitives_stringFromCodePoints: function(codePoints) {
    var a, t1, i;
    a = [];
    a.$builtinTypeInfo = [J.JSInt];
    for (t1 = new H.ListIterator(codePoints, codePoints.length, 0, null); t1.moveNext$0();) {
      i = t1._current;
      if (typeof i !== "number" || Math.floor(i) !== i)
        throw H.wrapException(P.ArgumentError$(i));
      if (i <= 65535)
        a.push(i);
      else if (i <= 1114111) {
        a.push(55296 + (C.JSInt_methods._shrOtherPositive$1(i - 65536, 10) & 1023));
        a.push(56320 + (i & 1023));
      } else
        throw H.wrapException(P.ArgumentError$(i));
    }
    return H.Primitives__fromCharCodeApply(a);
  },
  Primitives_stringFromCharCodes: function(charCodes) {
    var t1, i;
    for (t1 = new H.ListIterator(charCodes, charCodes.length, 0, null); t1.moveNext$0();) {
      i = t1._current;
      if (typeof i !== "number" || Math.floor(i) !== i)
        throw H.wrapException(P.ArgumentError$(i));
      if (i < 0)
        throw H.wrapException(P.ArgumentError$(i));
      if (i > 65535)
        return H.Primitives_stringFromCodePoints(charCodes);
    }
    return H.Primitives__fromCharCodeApply(charCodes);
  },
  Primitives_getProperty: function(object, key) {
    if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
      throw H.wrapException(new P.ArgumentError(object));
    return object[key];
  },
  Primitives_setProperty: function(object, key, value) {
    if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
      throw H.wrapException(new P.ArgumentError(object));
    object[key] = value;
  },
  iae: function(argument) {
    throw H.wrapException(P.ArgumentError$(argument));
  },
  ioore: function(receiver, index) {
    if (receiver == null)
      J.get$length$asx(receiver);
    if (typeof index !== "number" || Math.floor(index) !== index)
      H.iae(index);
    throw H.wrapException(P.RangeError$value(index));
  },
  wrapException: function(ex) {
    var wrapper;
    if (ex == null)
      ex = new P.NullThrownError();
    wrapper = new Error();
    wrapper.dartException = ex;
    if ("defineProperty" in Object) {
      Object.defineProperty(wrapper, "message", { get: H.toStringWrapper });
      wrapper.name = "";
    } else
      wrapper.toString = H.toStringWrapper;
    return wrapper;
  },
  toStringWrapper: function() {
    return J.toString$0(this.dartException);
  },
  throwExpression: function(ex) {
    var wrapper;
    if (ex == null)
      ex = new P.NullThrownError();
    wrapper = new Error();
    wrapper.dartException = ex;
    if ("defineProperty" in Object) {
      Object.defineProperty(wrapper, "message", { get: H.toStringWrapper });
      wrapper.name = "";
    } else
      wrapper.toString = H.toStringWrapper;
    throw wrapper;
  },
  unwrapException: function(ex) {
    var t1, message, number, ieErrorCode, t2, t3, t4, nullLiteralCall, t5, t6, t7, t8, t9, match;
    t1 = new H.unwrapException_saveStackTrace(ex);
    if (ex == null)
      return;
    if (typeof ex !== "object")
      return ex;
    if ("dartException" in ex)
      return t1.call$1(ex.dartException);
    else if (!("message" in ex))
      return ex;
    message = ex.message;
    if ("number" in ex && typeof ex.number == "number") {
      number = ex.number;
      ieErrorCode = number & 65535;
      if ((C.JSInt_methods._shrOtherPositive$1(number, 16) & 8191) === 10)
        switch (ieErrorCode) {
          case 438:
            return t1.call$1(H.JsNoSuchMethodError$(H.S(message) + " (Error " + ieErrorCode + ")", null));
          case 445:
          case 5007:
            t2 = H.S(message) + " (Error " + ieErrorCode + ")";
            return t1.call$1(new H.NullError(t2, null));
          default:
        }
    }
    if (ex instanceof TypeError) {
      t2 = $.get$TypeErrorDecoder_noSuchMethodPattern();
      t3 = $.get$TypeErrorDecoder_notClosurePattern();
      t4 = $.get$TypeErrorDecoder_nullCallPattern();
      nullLiteralCall = $.get$TypeErrorDecoder_nullLiteralCallPattern();
      t5 = $.get$TypeErrorDecoder_undefinedCallPattern();
      t6 = $.get$TypeErrorDecoder_undefinedLiteralCallPattern();
      t7 = $.get$TypeErrorDecoder_nullPropertyPattern();
      $.get$TypeErrorDecoder_nullLiteralPropertyPattern();
      t8 = $.get$TypeErrorDecoder_undefinedPropertyPattern();
      t9 = $.get$TypeErrorDecoder_undefinedLiteralPropertyPattern();
      match = t2.matchTypeError$1(message);
      if (match != null)
        return t1.call$1(H.JsNoSuchMethodError$(message, match));
      else {
        match = t3.matchTypeError$1(message);
        if (match != null) {
          match.method = "call";
          return t1.call$1(H.JsNoSuchMethodError$(message, match));
        } else {
          match = t4.matchTypeError$1(message);
          if (match == null) {
            match = nullLiteralCall.matchTypeError$1(message);
            if (match == null) {
              match = t5.matchTypeError$1(message);
              if (match == null) {
                match = t6.matchTypeError$1(message);
                if (match == null) {
                  match = t7.matchTypeError$1(message);
                  if (match == null) {
                    match = nullLiteralCall.matchTypeError$1(message);
                    if (match == null) {
                      match = t8.matchTypeError$1(message);
                      if (match == null) {
                        match = t9.matchTypeError$1(message);
                        t2 = match != null;
                      } else
                        t2 = true;
                    } else
                      t2 = true;
                  } else
                    t2 = true;
                } else
                  t2 = true;
              } else
                t2 = true;
            } else
              t2 = true;
          } else
            t2 = true;
          if (t2) {
            t2 = match == null ? null : match.method;
            return t1.call$1(new H.NullError(message, t2));
          }
        }
      }
      t2 = typeof message === "string" ? message : "";
      return t1.call$1(new H.UnknownJsTypeError(t2));
    }
    if (ex instanceof RangeError) {
      if (typeof message === "string" && message.indexOf("call stack") !== -1)
        return new P.StackOverflowError();
      return t1.call$1(new P.ArgumentError(null));
    }
    if (typeof InternalError == "function" && ex instanceof InternalError)
      if (typeof message === "string" && message === "too much recursion")
        return new P.StackOverflowError();
    return ex;
  },
  objectHashCode: function(object) {
    if (object == null || typeof object != 'object')
      return J.get$hashCode$(object);
    else
      return H.Primitives_objectHashCode(object);
  },
  fillLiteralMap: function(keyValuePairs, result) {
    var $length, index, index0, index1;
    $length = keyValuePairs.length;
    for (index = 0; index < $length; index = index1) {
      index0 = index + 1;
      index1 = index0 + 1;
      result.$indexSet(result, keyValuePairs[index], keyValuePairs[index0]);
    }
    return result;
  },
  invokeClosure: function(closure, isolate, numberOfArguments, arg1, arg2, arg3, arg4) {
    var t1 = J.getInterceptor(numberOfArguments);
    if (t1.$eq(numberOfArguments, 0))
      return H._callInIsolate(isolate, new H.invokeClosure_closure(closure));
    else if (t1.$eq(numberOfArguments, 1))
      return H._callInIsolate(isolate, new H.invokeClosure_closure0(closure, arg1));
    else if (t1.$eq(numberOfArguments, 2))
      return H._callInIsolate(isolate, new H.invokeClosure_closure1(closure, arg1, arg2));
    else if (t1.$eq(numberOfArguments, 3))
      return H._callInIsolate(isolate, new H.invokeClosure_closure2(closure, arg1, arg2, arg3));
    else if (t1.$eq(numberOfArguments, 4))
      return H._callInIsolate(isolate, new H.invokeClosure_closure3(closure, arg1, arg2, arg3, arg4));
    else
      throw H.wrapException(P.Exception_Exception("Unsupported number of arguments for wrapped closure"));
  },
  convertDartClosureToJS: function(closure, arity) {
    var $function;
    if (closure == null)
      return;
    $function = closure.$identity;
    if (!!$function)
      return $function;
    $function = (function(closure, arity, context, invoke) {  return function(a1, a2, a3, a4) {     return invoke(closure, context, arity, a1, a2, a3, a4);  };})(closure,arity,init.globalState.currentContext,H.invokeClosure);
    closure.$identity = $function;
    return $function;
  },
  Closure_fromTearOff: function(receiver, functions, reflectionInfo, isStatic, jsArguments, propertyName) {
    var $function, callName, functionType, $prototype, $constructor, t1, isIntercepted, trampoline, signatureFunction, getReceiver, i, stub, stubCallName, t2;
    $function = functions[0];
    $function.$stubName;
    callName = $function.$callName;
    $function.$reflectionInfo = reflectionInfo;
    functionType = H.ReflectionInfo_ReflectionInfo($function).functionType;
    $prototype = isStatic ? Object.create(new H.TearOffClosure().constructor.prototype) : Object.create(new H.BoundClosure(null, null, null, null).constructor.prototype);
    $prototype.$initialize = $prototype.constructor;
    if (isStatic)
      $constructor = function(){this.$initialize()};
    else if (typeof dart_precompiled == "function") {
      t1 = function(a,b,c,d) {this.$initialize(a,b,c,d)};
      $constructor = t1;
    } else {
      t1 = $.Closure_functionCounter;
      $.Closure_functionCounter = J.$add$ns(t1, 1);
      t1 = new Function("a", "b", "c", "d", "this.$initialize(a,b,c,d);" + t1);
      $constructor = t1;
    }
    $prototype.constructor = $constructor;
    $constructor.prototype = $prototype;
    t1 = !isStatic;
    if (t1) {
      isIntercepted = jsArguments.length == 1 && true;
      trampoline = H.Closure_forwardCallTo($function, isIntercepted);
    } else {
      $prototype.$name = propertyName;
      trampoline = $function;
      isIntercepted = false;
    }
    if (typeof functionType == "number")
      signatureFunction = (function(s){return function(){return init.metadata[s]}})(functionType);
    else if (t1 && typeof functionType == "function") {
      getReceiver = isIntercepted ? H.BoundClosure_receiverOf : H.BoundClosure_selfOf;
      signatureFunction = function(f,r){return function(){return f.apply({$receiver:r(this)},arguments)}}(functionType,getReceiver);
    } else
      throw H.wrapException("Error in reflectionInfo.");
    $prototype.$signature = signatureFunction;
    $prototype[callName] = trampoline;
    for (t1 = functions.length, i = 1; i < t1; ++i) {
      stub = functions[i];
      stubCallName = stub.$callName;
      if (stubCallName != null) {
        t2 = isStatic ? stub : H.Closure_forwardCallTo(stub, isIntercepted);
        $prototype[stubCallName] = t2;
      }
    }
    $prototype["call*"] = $function;
    return $constructor;
  },
  Closure_cspForwardCall: function(arity, $function) {
    var getSelf = H.BoundClosure_selfOf;
    switch (arity) {
      case 0:
        return function(F,S){return function(){return F.call(S(this))}}($function,getSelf);
      case 1:
        return function(F,S){return function(a){return F.call(S(this),a)}}($function,getSelf);
      case 2:
        return function(F,S){return function(a,b){return F.call(S(this),a,b)}}($function,getSelf);
      case 3:
        return function(F,S){return function(a,b,c){return F.call(S(this),a,b,c)}}($function,getSelf);
      case 4:
        return function(F,S){return function(a,b,c,d){return F.call(S(this),a,b,c,d)}}($function,getSelf);
      case 5:
        return function(F,S){return function(a,b,c,d,e){return F.call(S(this),a,b,c,d,e)}}($function,getSelf);
      default:
        return function(f,s){return function(){return f.apply(s(this),arguments)}}($function,getSelf);
    }
  },
  Closure_forwardCallTo: function($function, isIntercepted) {
    var arity, t1, t2, $arguments;
    if (isIntercepted)
      return H.Closure_forwardInterceptedCallTo($function);
    arity = $function.length;
    if (typeof dart_precompiled == "function")
      return H.Closure_cspForwardCall(arity, $function);
    else if (arity === 0) {
      t1 = $.BoundClosure_selfFieldNameCache;
      if (t1 == null) {
        t1 = H.BoundClosure_computeFieldNamed("self");
        $.BoundClosure_selfFieldNameCache = t1;
      }
      t1 = "return function(){return F.call(this." + H.S(t1) + ");";
      t2 = $.Closure_functionCounter;
      $.Closure_functionCounter = J.$add$ns(t2, 1);
      return new Function("F", t1 + H.S(t2) + "}")($function);
    } else if (1 <= arity && arity < 27) {
      $arguments = "abcdefghijklmnopqrstuvwxyz".split("").splice(0, arity).join(",");
      t1 = "return function(" + $arguments + "){return F.call(this.";
      t2 = $.BoundClosure_selfFieldNameCache;
      if (t2 == null) {
        t2 = H.BoundClosure_computeFieldNamed("self");
        $.BoundClosure_selfFieldNameCache = t2;
      }
      t2 = t1 + H.S(t2) + "," + $arguments + ");";
      t1 = $.Closure_functionCounter;
      $.Closure_functionCounter = J.$add$ns(t1, 1);
      return new Function("F", t2 + H.S(t1) + "}")($function);
    } else
      return H.Closure_cspForwardCall(arity, $function);
  },
  Closure_cspForwardInterceptedCall: function(arity, $name, $function) {
    var getSelf, getReceiver;
    getSelf = H.BoundClosure_selfOf;
    getReceiver = H.BoundClosure_receiverOf;
    switch (arity) {
      case 0:
        throw H.wrapException(H.RuntimeError$("Intercepted function with no arguments."));
      case 1:
        return function(n,s,r){return function(){return s(this)[n](r(this))}}($name,getSelf,getReceiver);
      case 2:
        return function(n,s,r){return function(a){return s(this)[n](r(this),a)}}($name,getSelf,getReceiver);
      case 3:
        return function(n,s,r){return function(a,b){return s(this)[n](r(this),a,b)}}($name,getSelf,getReceiver);
      case 4:
        return function(n,s,r){return function(a,b,c){return s(this)[n](r(this),a,b,c)}}($name,getSelf,getReceiver);
      case 5:
        return function(n,s,r){return function(a,b,c,d){return s(this)[n](r(this),a,b,c,d)}}($name,getSelf,getReceiver);
      case 6:
        return function(n,s,r){return function(a,b,c,d,e){return s(this)[n](r(this),a,b,c,d,e)}}($name,getSelf,getReceiver);
      default:
        return function(f,s,r,a){return function(){a=[r(this)];Array.prototype.push.apply(a,arguments);return f.apply(s(this),a)}}($function,getSelf,getReceiver);
    }
  },
  Closure_forwardInterceptedCallTo: function($function) {
    var stubName, arity, t1, t2, $arguments;
    stubName = $function.$stubName;
    arity = $function.length;
    if (typeof dart_precompiled == "function")
      return H.Closure_cspForwardInterceptedCall(arity, stubName, $function);
    else if (arity === 1) {
      t1 = "return this." + H.S(H.BoundClosure_selfFieldName()) + "." + stubName + "(this." + H.S(H.BoundClosure_receiverFieldName()) + ");";
      t2 = $.Closure_functionCounter;
      $.Closure_functionCounter = J.$add$ns(t2, 1);
      return new Function(t1 + H.S(t2));
    } else if (1 < arity && arity < 28) {
      $arguments = "abcdefghijklmnopqrstuvwxyz".split("").splice(0, arity - 1).join(",");
      t1 = "return function(" + $arguments + "){return this." + H.S(H.BoundClosure_selfFieldName()) + "." + stubName + "(this." + H.S(H.BoundClosure_receiverFieldName()) + "," + $arguments + ");";
      t2 = $.Closure_functionCounter;
      $.Closure_functionCounter = J.$add$ns(t2, 1);
      return new Function(t1 + H.S(t2) + "}")();
    } else
      return H.Closure_cspForwardInterceptedCall(arity, stubName, $function);
  },
  closureFromTearOff: function(receiver, functions, reflectionInfo, isStatic, jsArguments, $name) {
    functions.fixed$length = init;
    reflectionInfo.fixed$length = init;
    return H.Closure_fromTearOff(receiver, functions, reflectionInfo, !!isStatic, jsArguments, $name);
  },
  throwCyclicInit: function(staticName) {
    throw H.wrapException(P.CyclicInitializationError$("Cyclic initialization for static " + H.S(staticName)));
  },
  buildFunctionType: function(returnType, parameterTypes, optionalParameterTypes) {
    return new H.RuntimeFunctionType(returnType, parameterTypes, optionalParameterTypes, null);
  },
  getDynamicRuntimeType: function() {
    return C.C_DynamicRuntimeType;
  },
  createRuntimeType: function($name) {
    return new H.TypeImpl($name, null);
  },
  setRuntimeTypeInfo: function(target, typeInfo) {
    if (target != null)
      target.$builtinTypeInfo = typeInfo;
    return target;
  },
  getRuntimeTypeInfo: function(target) {
    if (target == null)
      return;
    return target.$builtinTypeInfo;
  },
  getRuntimeTypeArguments: function(target, substitutionName) {
    return H.substitute(target["$as" + H.S(substitutionName)], H.getRuntimeTypeInfo(target));
  },
  getRuntimeTypeArgument: function(target, substitutionName, index) {
    var $arguments = H.getRuntimeTypeArguments(target, substitutionName);
    return $arguments == null ? null : $arguments[index];
  },
  getTypeArgumentByIndex: function(target, index) {
    var rti = H.getRuntimeTypeInfo(target);
    return rti == null ? null : rti[index];
  },
  runtimeTypeToString: function(type, onTypeVariable) {
    if (type == null)
      return "dynamic";
    else if (typeof type === "object" && type !== null && type.constructor === Array)
      return type[0].builtin$cls + H.joinArguments(type, 1, onTypeVariable);
    else if (typeof type == "function")
      return type.builtin$cls;
    else if (typeof type === "number" && Math.floor(type) === type)
      return C.JSInt_methods.toString$0(type);
    else
      return;
  },
  joinArguments: function(types, startIndex, onTypeVariable) {
    var buffer, index, firstArgument, allDynamic, argument, str;
    if (types == null)
      return "";
    buffer = P.StringBuffer$("");
    for (index = startIndex, firstArgument = true, allDynamic = true; index < types.length; ++index) {
      if (firstArgument)
        firstArgument = false;
      else
        buffer._contents = buffer._contents + ", ";
      argument = types[index];
      if (argument != null)
        allDynamic = false;
      str = H.runtimeTypeToString(argument, onTypeVariable);
      str = typeof str === "string" ? str : H.S(str);
      buffer._contents = buffer._contents + str;
    }
    return allDynamic ? "" : "<" + H.S(buffer) + ">";
  },
  substitute: function(substitution, $arguments) {
    if (typeof substitution === "object" && substitution !== null && substitution.constructor === Array)
      $arguments = substitution;
    else if (typeof substitution == "function") {
      substitution = H.invokeOn(substitution, null, $arguments);
      if (typeof substitution === "object" && substitution !== null && substitution.constructor === Array)
        $arguments = substitution;
      else if (typeof substitution == "function")
        $arguments = H.invokeOn(substitution, null, $arguments);
    }
    return $arguments;
  },
  areSubtypes: function(s, t) {
    var len, i;
    if (s == null || t == null)
      return true;
    len = s.length;
    for (i = 0; i < len; ++i)
      if (!H.isSubtype(s[i], t[i]))
        return false;
    return true;
  },
  computeSignature: function(signature, context, contextName) {
    return H.invokeOn(signature, context, H.getRuntimeTypeArguments(context, contextName));
  },
  isSubtype: function(s, t) {
    var targetSignatureFunction, t1, typeOfS, t2, typeOfT, $name, substitution;
    if (s === t)
      return true;
    if (s == null || t == null)
      return true;
    if ("func" in t) {
      if (!("func" in s)) {
        if ("$is_" + H.S(t.func) in s)
          return true;
        targetSignatureFunction = s.$signature;
        if (targetSignatureFunction == null)
          return false;
        s = targetSignatureFunction.apply(s, null);
      }
      return H.isFunctionSubtype(s, t);
    }
    if (t.builtin$cls === "Function" && "func" in s)
      return true;
    t1 = typeof s === "object" && s !== null && s.constructor === Array;
    typeOfS = t1 ? s[0] : s;
    t2 = typeof t === "object" && t !== null && t.constructor === Array;
    typeOfT = t2 ? t[0] : t;
    $name = H.runtimeTypeToString(typeOfT, null);
    if (typeOfT !== typeOfS) {
      if (!("$is" + H.S($name) in typeOfS))
        return false;
      substitution = typeOfS["$as" + H.S(H.runtimeTypeToString(typeOfT, null))];
    } else
      substitution = null;
    if (!t1 && substitution == null || !t2)
      return true;
    t1 = t1 ? s.slice(1) : null;
    t2 = t2 ? t.slice(1) : null;
    return H.areSubtypes(H.substitute(substitution, t1), t2);
  },
  areAssignable: function(s, t, allowShorter) {
    var sLength, tLength, i, t1, t2;
    if (t == null && s == null)
      return true;
    if (t == null)
      return allowShorter;
    if (s == null)
      return false;
    sLength = s.length;
    tLength = t.length;
    if (allowShorter) {
      if (sLength < tLength)
        return false;
    } else if (sLength !== tLength)
      return false;
    for (i = 0; i < tLength; ++i) {
      t1 = s[i];
      t2 = t[i];
      if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
        return false;
    }
    return true;
  },
  areAssignableMaps: function(s, t) {
    var t1, names, i, $name, tType, sType;
    if (t == null)
      return true;
    if (s == null)
      return false;
    t1 = Object.getOwnPropertyNames(t);
    t1.fixed$length = init;
    names = t1;
    for (t1 = names.length, i = 0; i < t1; ++i) {
      $name = names[i];
      if (!Object.hasOwnProperty.call(s, $name))
        return false;
      tType = t[$name];
      sType = s[$name];
      if (!(H.isSubtype(tType, sType) || H.isSubtype(sType, tType)))
        return false;
    }
    return true;
  },
  isFunctionSubtype: function(s, t) {
    var sReturnType, tReturnType, sParameterTypes, tParameterTypes, sOptionalParameterTypes, tOptionalParameterTypes, sParametersLen, tParametersLen, sOptionalParametersLen, tOptionalParametersLen, pos, t1, t2, tPos, sPos;
    if (!("func" in s))
      return false;
    if ("void" in s) {
      if (!("void" in t) && "ret" in t)
        return false;
    } else if (!("void" in t)) {
      sReturnType = s.ret;
      tReturnType = t.ret;
      if (!(H.isSubtype(sReturnType, tReturnType) || H.isSubtype(tReturnType, sReturnType)))
        return false;
    }
    sParameterTypes = s.args;
    tParameterTypes = t.args;
    sOptionalParameterTypes = s.opt;
    tOptionalParameterTypes = t.opt;
    sParametersLen = sParameterTypes != null ? sParameterTypes.length : 0;
    tParametersLen = tParameterTypes != null ? tParameterTypes.length : 0;
    sOptionalParametersLen = sOptionalParameterTypes != null ? sOptionalParameterTypes.length : 0;
    tOptionalParametersLen = tOptionalParameterTypes != null ? tOptionalParameterTypes.length : 0;
    if (sParametersLen > tParametersLen)
      return false;
    if (sParametersLen + sOptionalParametersLen < tParametersLen + tOptionalParametersLen)
      return false;
    if (sParametersLen === tParametersLen) {
      if (!H.areAssignable(sParameterTypes, tParameterTypes, false))
        return false;
      if (!H.areAssignable(sOptionalParameterTypes, tOptionalParameterTypes, true))
        return false;
    } else {
      for (pos = 0; pos < sParametersLen; ++pos) {
        t1 = sParameterTypes[pos];
        t2 = tParameterTypes[pos];
        if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
          return false;
      }
      for (tPos = pos, sPos = 0; tPos < tParametersLen; ++sPos, ++tPos) {
        t1 = sOptionalParameterTypes[sPos];
        t2 = tParameterTypes[tPos];
        if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
          return false;
      }
      for (tPos = 0; tPos < tOptionalParametersLen; ++sPos, ++tPos) {
        t1 = sOptionalParameterTypes[sPos];
        t2 = tOptionalParameterTypes[tPos];
        if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
          return false;
      }
    }
    return H.areAssignableMaps(s.named, t.named);
  },
  invokeOn: function($function, receiver, $arguments) {
    return $function.apply(receiver, $arguments);
  },
  toStringForNativeObject: function(obj) {
    var t1 = $.getTagFunction;
    return "Instance of " + (t1 == null ? "<Unknown>" : t1.call$1(obj));
  },
  hashCodeForNativeObject: function(object) {
    return H.Primitives_objectHashCode(object);
  },
  defineProperty: function(obj, property, value) {
    Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
  },
  lookupAndCacheInterceptor: function(obj) {
    var tag, record, interceptor, interceptorClass, mark, t1;
    tag = $.getTagFunction.call$1(obj);
    record = $.dispatchRecordsForInstanceTags[tag];
    if (record != null) {
      Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
      return record.i;
    }
    interceptor = $.interceptorsForUncacheableTags[tag];
    if (interceptor != null)
      return interceptor;
    interceptorClass = init.interceptorsByTag[tag];
    if (interceptorClass == null) {
      tag = $.alternateTagFunction.call$2(obj, tag);
      if (tag != null) {
        record = $.dispatchRecordsForInstanceTags[tag];
        if (record != null) {
          Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
          return record.i;
        }
        interceptor = $.interceptorsForUncacheableTags[tag];
        if (interceptor != null)
          return interceptor;
        interceptorClass = init.interceptorsByTag[tag];
      }
    }
    if (interceptorClass == null)
      return;
    interceptor = interceptorClass.prototype;
    mark = tag[0];
    if (mark === "!") {
      record = H.makeLeafDispatchRecord(interceptor);
      $.dispatchRecordsForInstanceTags[tag] = record;
      Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
      return record.i;
    }
    if (mark === "~") {
      $.interceptorsForUncacheableTags[tag] = interceptor;
      return interceptor;
    }
    if (mark === "-") {
      t1 = H.makeLeafDispatchRecord(interceptor);
      Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
      return t1.i;
    }
    if (mark === "+")
      return H.patchInteriorProto(obj, interceptor);
    if (mark === "*")
      throw H.wrapException(P.UnimplementedError$(tag));
    if (init.leafTags[tag] === true) {
      t1 = H.makeLeafDispatchRecord(interceptor);
      Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
      return t1.i;
    } else
      return H.patchInteriorProto(obj, interceptor);
  },
  patchInteriorProto: function(obj, interceptor) {
    var proto, record;
    proto = Object.getPrototypeOf(obj);
    record = J.makeDispatchRecord(interceptor, proto, null, null);
    Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
    return interceptor;
  },
  makeLeafDispatchRecord: function(interceptor) {
    return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
  },
  makeDefaultDispatchRecord: function(tag, interceptorClass, proto) {
    var interceptor = interceptorClass.prototype;
    if (init.leafTags[tag] === true)
      return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
    else
      return J.makeDispatchRecord(interceptor, proto, null, null);
  },
  initNativeDispatch: function() {
    if (true === $.initNativeDispatchFlag)
      return;
    $.initNativeDispatchFlag = true;
    H.initNativeDispatchContinue();
  },
  initNativeDispatchContinue: function() {
    var map, tags, i, tag, proto, record, interceptorClass;
    $.dispatchRecordsForInstanceTags = Object.create(null);
    $.interceptorsForUncacheableTags = Object.create(null);
    H.initHooks();
    map = init.interceptorsByTag;
    tags = Object.getOwnPropertyNames(map);
    if (typeof window != "undefined") {
      window;
      for (i = 0; i < tags.length; ++i) {
        tag = tags[i];
        proto = $.prototypeForTagFunction.call$1(tag);
        if (proto != null) {
          record = H.makeDefaultDispatchRecord(tag, map[tag], proto);
          if (record != null)
            Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        }
      }
    }
    for (i = 0; i < tags.length; ++i) {
      tag = tags[i];
      if (/^[A-Za-z_]/.test(tag)) {
        interceptorClass = map[tag];
        map["!" + tag] = interceptorClass;
        map["~" + tag] = interceptorClass;
        map["-" + tag] = interceptorClass;
        map["+" + tag] = interceptorClass;
        map["*" + tag] = interceptorClass;
      }
    }
  },
  initHooks: function() {
    var hooks, transformers, i, transformer, getTag, getUnknownTag, prototypeForTag;
    hooks = C.JS_CONST_aQP();
    hooks = H.applyHooksTransformer(C.JS_CONST_0, H.applyHooksTransformer(C.JS_CONST_rr7, H.applyHooksTransformer(C.JS_CONST_Fs4, H.applyHooksTransformer(C.JS_CONST_Fs4, H.applyHooksTransformer(C.JS_CONST_gkc, H.applyHooksTransformer(C.JS_CONST_U4w, H.applyHooksTransformer(C.JS_CONST_QJm(C.JS_CONST_IX5), hooks)))))));
    if (typeof dartNativeDispatchHooksTransformer != "undefined") {
      transformers = dartNativeDispatchHooksTransformer;
      if (typeof transformers == "function")
        transformers = [transformers];
      if (transformers.constructor == Array)
        for (i = 0; i < transformers.length; ++i) {
          transformer = transformers[i];
          if (typeof transformer == "function")
            hooks = transformer(hooks) || hooks;
        }
    }
    getTag = hooks.getTag;
    getUnknownTag = hooks.getUnknownTag;
    prototypeForTag = hooks.prototypeForTag;
    $.getTagFunction = new H.initHooks_closure(getTag);
    $.alternateTagFunction = new H.initHooks_closure0(getUnknownTag);
    $.prototypeForTagFunction = new H.initHooks_closure1(prototypeForTag);
  },
  applyHooksTransformer: function(transformer, hooks) {
    return transformer(hooks) || hooks;
  },
  ReflectionInfo: {
    "": "Object;jsFunction,data,isAccessor,requiredParameterCount,optionalParameterCount,areOptionalParametersNamed,functionType",
    static: {"": "ReflectionInfo_REQUIRED_PARAMETERS_INFO,ReflectionInfo_OPTIONAL_PARAMETERS_INFO,ReflectionInfo_FUNCTION_TYPE_INDEX,ReflectionInfo_FIRST_DEFAULT_ARGUMENT", ReflectionInfo_ReflectionInfo: function(jsFunction) {
        var data, requiredParametersInfo, requiredParameterCount, optionalParametersInfo;
        data = jsFunction.$reflectionInfo;
        if (data == null)
          return;
        data.fixed$length = init;
        data = data;
        requiredParametersInfo = data[0];
        requiredParameterCount = requiredParametersInfo >> 1;
        optionalParametersInfo = data[1];
        return new H.ReflectionInfo(jsFunction, data, (requiredParametersInfo & 1) === 1, requiredParameterCount, optionalParametersInfo >> 1, (optionalParametersInfo & 1) === 1, data[2]);
      }}
  },
  TypeErrorDecoder: {
    "": "Object;_pattern,_arguments,_argumentsExpr,_expr,_method,_receiver<",
    matchTypeError$1: function(message) {
      var match, result, t1;
      match = new RegExp(this._pattern).exec(message);
      if (match == null)
        return;
      result = {};
      t1 = this._arguments;
      if (t1 !== -1)
        result.arguments = match[t1 + 1];
      t1 = this._argumentsExpr;
      if (t1 !== -1)
        result.argumentsExpr = match[t1 + 1];
      t1 = this._expr;
      if (t1 !== -1)
        result.expr = match[t1 + 1];
      t1 = this._method;
      if (t1 !== -1)
        result.method = match[t1 + 1];
      t1 = this._receiver;
      if (t1 !== -1)
        result.receiver = match[t1 + 1];
      return result;
    },
    static: {"": "TypeErrorDecoder_noSuchMethodPattern,TypeErrorDecoder_notClosurePattern,TypeErrorDecoder_nullCallPattern,TypeErrorDecoder_nullLiteralCallPattern,TypeErrorDecoder_undefinedCallPattern,TypeErrorDecoder_undefinedLiteralCallPattern,TypeErrorDecoder_nullPropertyPattern,TypeErrorDecoder_nullLiteralPropertyPattern,TypeErrorDecoder_undefinedPropertyPattern,TypeErrorDecoder_undefinedLiteralPropertyPattern", TypeErrorDecoder_extractPattern: function(message) {
        var match, $arguments, argumentsExpr, expr, method, receiver;
        message = message.replace(String({}), '$receiver$').replace(new RegExp("[[\\]{}()*+?.\\\\^$|]", 'g'), '\\$&');
        match = message.match(/\\\$[a-zA-Z]+\\\$/g);
        if (match == null)
          match = [];
        $arguments = match.indexOf("\\$arguments\\$");
        argumentsExpr = match.indexOf("\\$argumentsExpr\\$");
        expr = match.indexOf("\\$expr\\$");
        method = match.indexOf("\\$method\\$");
        receiver = match.indexOf("\\$receiver\\$");
        return new H.TypeErrorDecoder(message.replace('\\$arguments\\$', '((?:x|[^x])*)').replace('\\$argumentsExpr\\$', '((?:x|[^x])*)').replace('\\$expr\\$', '((?:x|[^x])*)').replace('\\$method\\$', '((?:x|[^x])*)').replace('\\$receiver\\$', '((?:x|[^x])*)'), $arguments, argumentsExpr, expr, method, receiver);
      }, TypeErrorDecoder_provokeCallErrorOn: function(expression) {
        return function($expr$) {
  var $argumentsExpr$ = '$arguments$'
  try {
    $expr$.$method$($argumentsExpr$);
  } catch (e) {
    return e.message;
  }
}(expression);
      }, TypeErrorDecoder_provokePropertyErrorOn: function(expression) {
        return function($expr$) {
  try {
    $expr$.$method$;
  } catch (e) {
    return e.message;
  }
}(expression);
      }}
  },
  NullError: {
    "": "Error;_message,_method",
    toString$0: function(_) {
      var t1 = this._method;
      if (t1 == null)
        return "NullError: " + H.S(this._message);
      return "NullError: Cannot call \"" + H.S(t1) + "\" on null";
    },
    $isError: true
  },
  JsNoSuchMethodError: {
    "": "Error;_message,_method,_receiver<",
    toString$0: function(_) {
      var t1, t2;
      t1 = this._method;
      if (t1 == null)
        return "NoSuchMethodError: " + H.S(this._message);
      t2 = this._receiver;
      if (t2 == null)
        return "NoSuchMethodError: Cannot call \"" + t1 + "\" (" + H.S(this._message) + ")";
      return "NoSuchMethodError: Cannot call \"" + t1 + "\" on \"" + t2 + "\" (" + H.S(this._message) + ")";
    },
    $isError: true,
    static: {JsNoSuchMethodError$: function(_message, match) {
        var t1, t2;
        t1 = match == null;
        t2 = t1 ? null : match.method;
        t1 = t1 ? null : match.receiver;
        return new H.JsNoSuchMethodError(_message, t2, t1);
      }}
  },
  UnknownJsTypeError: {
    "": "Error;_message",
    toString$0: function(_) {
      var t1 = this._message;
      return C.JSString_methods.get$isEmpty(t1) ? "Error" : "Error: " + t1;
    }
  },
  unwrapException_saveStackTrace: {
    "": "Closure:14;ex_0",
    call$1: function(error) {
      var t1 = J.getInterceptor(error);
      if (typeof error === "object" && error !== null && !!t1.$isError)
        if (error.$thrownJsError == null)
          error.$thrownJsError = this.ex_0;
      return error;
    }
  },
  _StackTrace: {
    "": "Object;_exception,_trace",
    toString$0: function(_) {
      var t1, trace;
      t1 = this._trace;
      if (t1 != null)
        return t1;
      t1 = this._exception;
      trace = typeof t1 === "object" ? t1.stack : null;
      t1 = trace == null ? "" : trace;
      this._trace = t1;
      return t1;
    }
  },
  invokeClosure_closure: {
    "": "Closure:12;closure_0",
    call$0: function() {
      return this.closure_0.call$0();
    }
  },
  invokeClosure_closure0: {
    "": "Closure:12;closure_1,arg1_2",
    call$0: function() {
      return this.closure_1.call$1(this.arg1_2);
    }
  },
  invokeClosure_closure1: {
    "": "Closure:12;closure_3,arg1_4,arg2_5",
    call$0: function() {
      return this.closure_3.call$2(this.arg1_4, this.arg2_5);
    }
  },
  invokeClosure_closure2: {
    "": "Closure:12;closure_6,arg1_7,arg2_8,arg3_9",
    call$0: function() {
      return this.closure_6.call$3(this.arg1_7, this.arg2_8, this.arg3_9);
    }
  },
  invokeClosure_closure3: {
    "": "Closure:12;closure_10,arg1_11,arg2_12,arg3_13,arg4_14",
    call$0: function() {
      return this.closure_10.call$4(this.arg1_11, this.arg2_12, this.arg3_13, this.arg4_14);
    }
  },
  Closure: {
    "": "Object;",
    toString$0: function(_) {
      return "Closure";
    }
  },
  TearOffClosure: {
    "": "Closure;"
  },
  BoundClosure: {
    "": "TearOffClosure;_self<,__js_helper$_target,_receiver<,__js_helper$_name",
    $eq: function(_, other) {
      var t1;
      if (other == null)
        return false;
      if (this === other)
        return true;
      t1 = J.getInterceptor(other);
      if (typeof other !== "object" || other === null || !t1.$isBoundClosure)
        return false;
      return this._self === other._self && this.__js_helper$_target === other.__js_helper$_target && this._receiver === other._receiver;
    },
    get$hashCode: function(_) {
      var t1, receiverHashCode;
      t1 = this._receiver;
      if (t1 == null)
        receiverHashCode = H.Primitives_objectHashCode(this._self);
      else
        receiverHashCode = typeof t1 !== "object" ? J.get$hashCode$(t1) : H.Primitives_objectHashCode(t1);
      return (receiverHashCode ^ H.Primitives_objectHashCode(this.__js_helper$_target)) >>> 0;
    },
    $isBoundClosure: true,
    static: {"": "BoundClosure_selfFieldNameCache,BoundClosure_receiverFieldNameCache", BoundClosure_selfOf: function(closure) {
        return closure.get$_self();
      }, BoundClosure_receiverOf: function(closure) {
        return closure.get$_receiver();
      }, BoundClosure_selfFieldName: function() {
        var t1 = $.BoundClosure_selfFieldNameCache;
        if (t1 == null) {
          t1 = H.BoundClosure_computeFieldNamed("self");
          $.BoundClosure_selfFieldNameCache = t1;
        }
        return t1;
      }, BoundClosure_receiverFieldName: function() {
        var t1 = $.BoundClosure_receiverFieldNameCache;
        if (t1 == null) {
          t1 = H.BoundClosure_computeFieldNamed("receiver");
          $.BoundClosure_receiverFieldNameCache = t1;
        }
        return t1;
      }, BoundClosure_computeFieldNamed: function(fieldName) {
        var template, t1, names, i, $name;
        template = new H.BoundClosure("self", "target", "receiver", "name");
        t1 = Object.getOwnPropertyNames(template);
        t1.fixed$length = init;
        names = t1;
        for (t1 = names.length, i = 0; i < t1; ++i) {
          $name = names[i];
          if (template[$name] === fieldName)
            return $name;
        }
      }}
  },
  RuntimeError: {
    "": "Error;message",
    toString$0: function(_) {
      return "RuntimeError: " + H.S(this.message);
    },
    static: {RuntimeError$: function(message) {
        return new H.RuntimeError(message);
      }}
  },
  RuntimeType: {
    "": "Object;"
  },
  RuntimeFunctionType: {
    "": "RuntimeType;returnType,parameterTypes,optionalParameterTypes,namedParameters",
    _isTest$1: function(expression) {
      var functionTypeObject = this._extractFunctionTypeObjectFrom$1(expression);
      return functionTypeObject == null ? false : H.isFunctionSubtype(functionTypeObject, this.toRti$0());
    },
    _extractFunctionTypeObjectFrom$1: function(o) {
      var interceptor = J.getInterceptor(o);
      return "$signature" in interceptor ? interceptor.$signature() : null;
    },
    toRti$0: function() {
      var result, t1, t2, namedRti, keys, i, $name;
      result = { "func": "dynafunc" };
      t1 = this.returnType;
      t2 = J.getInterceptor(t1);
      if (typeof t1 === "object" && t1 !== null && !!t2.$isVoidRuntimeType)
        result.void = true;
      else if (typeof t1 !== "object" || t1 === null || !t2.$isDynamicRuntimeType)
        result.ret = t1.toRti$0();
      t1 = this.parameterTypes;
      if (t1 != null && t1.length !== 0)
        result.args = H.RuntimeFunctionType_listToRti(t1);
      t1 = this.optionalParameterTypes;
      if (t1 != null && t1.length !== 0)
        result.opt = H.RuntimeFunctionType_listToRti(t1);
      t1 = this.namedParameters;
      if (t1 != null) {
        namedRti = {};
        keys = H.extractKeys(t1);
        for (t2 = keys.length, i = 0; i < t2; ++i) {
          $name = keys[i];
          namedRti[$name] = t1[$name].toRti$0();
        }
        result.named = namedRti;
      }
      return result;
    },
    toString$0: function(_) {
      var t1, t2, result, needsComma, i, type, keys, $name;
      t1 = this.parameterTypes;
      if (t1 != null)
        for (t2 = t1.length, result = "(", needsComma = false, i = 0; i < t2; ++i, needsComma = true) {
          type = t1[i];
          if (needsComma)
            result += ", ";
          result += H.S(type);
        }
      else {
        result = "(";
        needsComma = false;
      }
      t1 = this.optionalParameterTypes;
      if (t1 != null && t1.length !== 0) {
        result = (needsComma ? result + ", " : result) + "[";
        for (t2 = t1.length, needsComma = false, i = 0; i < t2; ++i, needsComma = true) {
          type = t1[i];
          if (needsComma)
            result += ", ";
          result += H.S(type);
        }
        result += "]";
      } else {
        t1 = this.namedParameters;
        if (t1 != null) {
          result = (needsComma ? result + ", " : result) + "{";
          keys = H.extractKeys(t1);
          for (t2 = keys.length, needsComma = false, i = 0; i < t2; ++i, needsComma = true) {
            $name = keys[i];
            if (needsComma)
              result += ", ";
            result += H.S(t1[$name].toRti$0()) + " " + $name;
          }
          result += "}";
        }
      }
      return result + (") -> " + H.S(this.returnType));
    },
    static: {"": "RuntimeFunctionType_inAssert", RuntimeFunctionType_listToRti: function(list) {
        var result, t1, i;
        list = list;
        result = [];
        for (t1 = list.length, i = 0; i < t1; ++i)
          result.push(list[i].toRti$0());
        return result;
      }}
  },
  DynamicRuntimeType: {
    "": "RuntimeType;",
    toString$0: function(_) {
      return "dynamic";
    },
    toRti$0: function() {
      return;
    },
    $isDynamicRuntimeType: true
  },
  TypeImpl: {
    "": "Object;_typeName,_unmangledName",
    toString$0: function(_) {
      var t1, unmangledName, unmangledName0;
      t1 = this._unmangledName;
      if (t1 != null)
        return t1;
      unmangledName = this._typeName;
      unmangledName0 = init.mangledGlobalNames[unmangledName];
      unmangledName = unmangledName0 == null ? unmangledName : unmangledName0;
      this._unmangledName = unmangledName;
      return unmangledName;
    },
    get$hashCode: function(_) {
      return J.get$hashCode$(this._typeName);
    },
    $eq: function(_, other) {
      var t1;
      if (other == null)
        return false;
      t1 = J.getInterceptor(other);
      return typeof other === "object" && other !== null && !!t1.$isTypeImpl && J.$eq(this._typeName, other._typeName);
    },
    $isTypeImpl: true
  },
  initHooks_closure: {
    "": "Closure:14;getTag_0",
    call$1: function(o) {
      return this.getTag_0(o);
    }
  },
  initHooks_closure0: {
    "": "Closure:15;getUnknownTag_1",
    call$2: function(o, tag) {
      return this.getUnknownTag_1(o, tag);
    }
  },
  initHooks_closure1: {
    "": "Closure:0;prototypeForTag_2",
    call$1: function(tag) {
      return this.prototypeForTag_2(tag);
    }
  }
}],
["creeper", "main.dart", , U, {
  "": "",
  onMouseUp: function(evt) {
    var t1, soundSuccess, i, t2;
    $.engine.mouse.buttonPressed = 0;
    if (J.get$which$x(evt) === 1) {
      U.Ship_control($.game.hoveredTile);
      U.Building_reposition($.game.hoveredTile);
      U.Building_select();
      $.engine.mouse.dragStart = null;
      t1 = $.UISymbol_activeSymbol;
      if (t1 != null) {
        J.substring$2$s(t1.building.type, 0, 1).toUpperCase() + J.substring$1$s($.UISymbol_activeSymbol.building.type, 1);
        for (soundSuccess = false, i = 0; t1 = $.game, t2 = t1.ghosts, i < t2.length; ++i)
          if (t1.canBePlaced$2(t2[i], $.UISymbol_activeSymbol.building)) {
            t1 = $.game.ghosts;
            if (i >= t1.length)
              return H.ioore(t1, i);
            U.Building_add(t1[i], $.UISymbol_activeSymbol.building.type);
            soundSuccess = true;
          }
        t1 = $.engine;
        if (soundSuccess)
          t1.playSound$1("click");
        else
          t1.playSound$1("failure");
      }
    } else if (evt.which === 3) {
      $.game.mode = "DEFAULT";
      U.Building_deselect();
      U.Ship_deselect();
      U.UISymbol_reset();
      document.querySelector("#terraform").setAttribute("value", "Terraform Off");
    }
  },
  doneResizing: [function() {
    var width, height, t1, t2;
    width = window.innerWidth;
    height = window.innerHeight;
    t1 = $.engine;
    t1.width = width;
    t1.height = height;
    if (typeof width !== "number")
      return width.$tdiv();
    t1.halfWidth = C.JSInt_methods._tdivFast$1(width, 2);
    if (typeof height !== "number")
      return height.$tdiv();
    t1.halfHeight = C.JSInt_methods._tdivFast$1(height, 2);
    t1 = t1.renderer;
    t1.$index(t1, "main").updateRect$2(width, height);
    t1 = $.engine.renderer;
    t1.$index(t1, "levelfinal").updateRect$2(width, height);
    t1 = $.engine.renderer;
    t1.$index(t1, "buffer").updateRect$2(width, height);
    t1 = $.engine.renderer;
    t1.$index(t1, "collection").updateRect$2(width, height);
    t1 = $.engine.renderer;
    t1.$index(t1, "creeperbuffer").updateRect$2(width, height);
    t1 = $.engine.renderer;
    t1.$index(t1, "creeper").updateRect$2(width, height);
    t1 = $.engine.renderer;
    t1 = t1.$index(t1, "gui");
    t2 = $.engine.renderer;
    J.set$top$x(t1, J.get$offsetTop$x(J.get$view$x(t2.$index(t2, "gui"))));
    t2 = $.engine.renderer;
    t2 = t2.$index(t2, "gui");
    t1 = $.engine.renderer;
    J.set$left$x(t2, J.get$offsetLeft$x(J.get$view$x(t1.$index(t1, "gui"))));
    t1 = $.game;
    if (t1 != null) {
      t1.copyTerrain$0();
      $.game.drawCollection$0();
      $.game.drawCreeper$0();
    }
  }, "call$0", "doneResizing$closure", 0, 0, 1],
  main: [function() {
    var t1 = U.Engine$();
    $.engine = t1;
    t1.loadImages$0().then$1(new U.main_closure());
  }, "call$0", "main$closure", 0, 0, 1],
  Building: {
    "": "Object;position>,scale,moveTargetPosition@,weaponTargetPosition@,speed,type>,status*,operating@,selected*,hovered@,built<,active@,canMove,needsEnergy<,rotating?,health<,maxHealth<,energy<,maxEnergy<,healthRequests,energyRequests,rotation,targetAngle,weaponRadius<,size>,collectedEnergy,flightCounter,requestCounter,energyCounter,ship,sprite,cannon,selectedCircle<,targetSymbol<",
    getNeighbours$1: function(target) {
      var neighbours, i, t1, t2, t3, allowedDistance;
      neighbours = [];
      for (i = 0; t1 = $.get$Building_buildings(), i < t1.length; ++i)
        if (!J.$eq(J.get$position$x(t1[i]), this.position)) {
          t1 = $.get$Building_buildings();
          t2 = t1.length;
          if (i >= t2)
            return H.ioore(t1, i);
          t3 = t1[i];
          if (J.get$status$x(t3) === "IDLE") {
            if (i >= t2)
              return H.ioore(t1, i);
            if (t3 == null ? target != null : t3 !== target) {
              t1 = $.get$Building_buildings();
              t2 = t1.length;
              if (i >= t2)
                return H.ioore(t1, i);
              t3 = t1[i];
              if (t3.get$built()) {
                if (i >= t2)
                  return H.ioore(t1, i);
                if (t3.type !== "collector") {
                  if (i >= t2)
                    return H.ioore(t1, i);
                  t1 = t3.type === "relay";
                } else
                  t1 = true;
              } else
                t1 = false;
            } else
              t1 = true;
            if (t1) {
              t1 = $.game.tileSize;
              allowedDistance = 10 * t1;
              if (this.type === "relay") {
                t2 = $.get$Building_buildings();
                if (i >= t2.length)
                  return H.ioore(t2, i);
                t2 = J.get$type$x(t2[i]) === "relay";
              } else
                t2 = false;
              if (t2)
                allowedDistance = 20 * t1;
              t1 = this.position;
              t2 = $.get$Building_buildings();
              if (i >= t2.length)
                return H.ioore(t2, i);
              t2 = J.get$position$x(t2[i]);
              t3 = J.$sub$n(t1.x, J.get$x$x(t2));
              if (typeof t3 !== "number")
                H.throwExpression(new P.ArgumentError(t3));
              t3 = Math.pow(t3, 2);
              t2 = J.$sub$n(t1.y, t2.y);
              if (typeof t2 !== "number")
                H.throwExpression(new P.ArgumentError(t2));
              t1 = Math.pow(t2, 2);
              if (Math.sqrt(t3 + t1) <= allowedDistance) {
                t1 = $.get$Building_buildings();
                if (i >= t1.length)
                  return H.ioore(t1, i);
                neighbours.push(t1[i]);
              }
            }
          }
        }
      return neighbours;
    },
    updateDisplayObjects$0: function() {
      var t1, t2, t3;
      t1 = this.sprite;
      t2 = this.position;
      t1.position = t2;
      t3 = this.scale;
      t1.scale = t3;
      t1 = this.selectedCircle;
      t1.position = t2;
      t1.scale = t3.x;
      t1 = this.cannon;
      if (t1 != null) {
        t1.position = t2;
        t1.scale = t3;
      }
    },
    move$0: function() {
      var t1, targetPosition, ownPosition, delta, distance, t2;
      t1 = this.status;
      if (t1 === "RISING") {
        t1 = this.flightCounter;
        if (t1 < 25) {
          this.flightCounter = t1 + 1 * $.game.speed;
          t1 = this.scale;
          this.scale = new U.Vector(J.$mul$n(t1.x, 1.01), J.$mul$n(t1.y, 1.01));
          this.updateDisplayObjects$0();
        }
        if (this.flightCounter >= 25) {
          this.flightCounter = 25;
          this.status = "MOVING";
          t1 = $.engine.renderer;
          t1.$index(t1, "buffer").switchLayer$2(this.sprite, C.Layer_8);
          if (this.cannon != null) {
            t1 = $.engine.renderer;
            t1.$index(t1, "buffer").switchLayer$2(this.cannon, C.Layer_9);
          }
        }
      } else if (t1 === "FALLING") {
        t1 = this.flightCounter;
        if (t1 > 0) {
          this.flightCounter = t1 - 1 * $.game.speed;
          t1 = this.scale;
          this.scale = new U.Vector(J.$div$n(t1.x, 1.01), J.$div$n(t1.y, 1.01));
          this.updateDisplayObjects$0();
        }
        if (this.flightCounter <= 0) {
          this.flightCounter = 0;
          this.status = "IDLE";
          this.scale = new U.Vector(1, 1);
          this.targetSymbol.visible = false;
          this.updateDisplayObjects$0();
          U.Connection_add(this);
          t1 = $.engine.renderer;
          t1.$index(t1, "buffer").switchLayer$2(this.sprite, C.Layer_3);
          if (this.cannon != null) {
            t1 = $.engine.renderer;
            t1.$index(t1, "buffer").switchLayer$2(this.cannon, C.Layer_5);
          }
        }
      }
      if (this.status === "MOVING") {
        if (!J.$eq(this.moveTargetPosition.x, this.position.x) || !J.$eq(this.moveTargetPosition.y, this.position.y)) {
          t1 = this.moveTargetPosition;
          targetPosition = new U.Vector(t1.x, t1.y);
          t1 = this.position;
          ownPosition = new U.Vector(t1.x, t1.y);
          delta = targetPosition.$sub(targetPosition, ownPosition);
          distance = ownPosition.distanceTo$1(targetPosition);
          this.speed.x = J.$mul$n(J.$mul$n(J.$div$n(delta.x, distance), 0.5), $.game.speed);
          this.speed.y = J.$mul$n(J.$mul$n(J.$div$n(delta.y, distance), 0.5), $.game.speed);
          if (J.abs$0$n(this.speed.x) > J.abs$0$n(delta.x))
            this.speed.x = delta.x;
          if (J.abs$0$n(this.speed.y) > J.abs$0$n(delta.y))
            this.speed.y = delta.y;
        }
        t1 = this.position;
        t1 = t1.$add(t1, this.speed);
        this.position = t1;
        t1 = t1.x;
        t2 = J.$sub$n(this.moveTargetPosition.x, 1);
        if (typeof t1 !== "number")
          return t1.$gt();
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (t1 > t2) {
          t1 = this.position.x;
          t2 = J.$add$ns(this.moveTargetPosition.x, 1);
          if (typeof t1 !== "number")
            return t1.$lt();
          if (typeof t2 !== "number")
            return H.iae(t2);
          if (t1 < t2) {
            t1 = this.position.y;
            t2 = J.$sub$n(this.moveTargetPosition.y, 1);
            if (typeof t1 !== "number")
              return t1.$gt();
            if (typeof t2 !== "number")
              return H.iae(t2);
            if (t1 > t2) {
              t1 = this.position.y;
              t2 = J.$add$ns(this.moveTargetPosition.y, 1);
              if (typeof t1 !== "number")
                return t1.$lt();
              if (typeof t2 !== "number")
                return H.iae(t2);
              t2 = t1 < t2;
              t1 = t2;
            } else
              t1 = false;
          } else
            t1 = false;
        } else
          t1 = false;
        if (t1) {
          this.position = this.moveTargetPosition;
          this.status = "FALLING";
        }
        this.updateDisplayObjects$0();
      }
    },
    takeDamage$0: function() {
      var t1, i, j, t2, t3, t4, tile;
      if (this.status === "IDLE") {
        for (t1 = this.size, i = -(t1 / 2 | 0); t1 = t1 / 2 | 0, i <= t1; ++i)
          for (j = -t1; t1 = this.size, j <= -(t1 / 2 | 0); ++j) {
            t1 = this.position;
            t2 = t1.x;
            t3 = $.game.tileSize;
            if (typeof t2 !== "number")
              return t2.$tdiv();
            t2 = C.JSNumber_methods.$tdiv(t2, t3);
            t1 = t1.y;
            if (typeof t1 !== "number")
              return t1.$tdiv();
            t3 = C.JSNumber_methods.$tdiv(t1, t3);
            t1 = $.game.world;
            if (t1.contains$1(t1, new U.Vector(t2 + i, t3 + j))) {
              t1 = $.game;
              t2 = t1.world;
              t3 = this.position;
              t1 = t1.tileSize;
              t4 = J.$add$ns(t3.x, i * t1);
              t1 = J.$add$ns(t3.y, j * t1);
              t2 = t2.tiles;
              if (typeof t4 !== "number")
                return t4.$tdiv();
              t4 = C.JSNumber_methods._tdivFast$1(t4, 16);
              if (t4 >>> 0 !== t4 || t4 >= t2.length)
                return H.ioore(t2, t4);
              t4 = t2[t4];
              if (typeof t1 !== "number")
                return t1.$tdiv();
              tile = J.$index$asx(t4, C.JSNumber_methods._tdivFast$1(t1, 16));
              if (tile.get$creep() > 0)
                this.health = this.health - tile.creep / 10;
            }
          }
        if (this.health < 0)
          U.Building_remove(this);
      }
    },
    shield$0: function() {
      var center, tiledPosition, i, t1, j, t2, t3, distance;
      if (this.built && this.operating && this.type === "shield" && this.status === "IDLE") {
        center = this.position;
        tiledPosition = center.real2tiled$0();
        i = J.$sub$n(tiledPosition.x, this.weaponRadius);
        while (true) {
          t1 = J.$add$ns(tiledPosition.x, this.weaponRadius);
          if (typeof i !== "number")
            return i.$le();
          if (typeof t1 !== "number")
            return H.iae(t1);
          if (!(i <= t1))
            break;
          j = J.$sub$n(tiledPosition.y, this.weaponRadius);
          while (true) {
            t1 = J.$add$ns(tiledPosition.y, this.weaponRadius);
            if (typeof j !== "number")
              return j.$le();
            if (typeof t1 !== "number")
              return H.iae(t1);
            if (!(j <= t1))
              break;
            t1 = $.game.world;
            if (t1.contains$1(t1, new U.Vector(i, j))) {
              t1 = $.game.tileSize;
              t2 = center.x;
              if (typeof t2 !== "number")
                return H.iae(t2);
              t1 = Math.pow(i * t1 + t1 / 2 - t2, 2);
              t2 = $.game.tileSize;
              t3 = center.y;
              if (typeof t3 !== "number")
                return H.iae(t3);
              distance = t1 + Math.pow(j * t2 + t2 / 2 - t3, 2);
              t1 = $.game.tileSize;
              if (distance < Math.pow(t1 * 10, 2)) {
                t1 = $.game.world.tiles;
                if (i >>> 0 !== i || i >= t1.length)
                  return H.ioore(t1, i);
                if (J.$index$asx(t1[i], j).get$creep() > 0) {
                  t1 = $.game.world.tiles;
                  if (i >= t1.length)
                    return H.ioore(t1, i);
                  t1 = J.$index$asx(t1[i], j);
                  t2 = t1.get$creep();
                  t3 = $.game;
                  t1.creep = t2 - distance / t3.tileSize * 0.1;
                  t1 = t3.world.tiles;
                  if (i >= t1.length)
                    return H.ioore(t1, i);
                  if (J.$index$asx(t1[i], j).get$creep() < 0) {
                    t1 = $.game.world.tiles;
                    if (i >= t1.length)
                      return H.ioore(t1, i);
                    J.$index$asx(t1[i], j).set$creep(0);
                  }
                  $.World_creeperDirty = true;
                }
              }
            }
            ++j;
          }
          ++i;
        }
      }
    },
    requestPacket$0: function() {
      if (this.active && this.status === "IDLE" && this.type !== "base") {
        var t1 = this.requestCounter + 1 * $.game.speed;
        this.requestCounter = t1;
        if (t1 >= 50) {
          if (this.maxHealth - this.health - this.healthRequests > 0) {
            this.requestCounter = t1 - 50;
            U.Packet_queuePacket(this, "health");
          }
          if (this.needsEnergy && this.built)
            if (this.maxEnergy - this.energy - this.energyRequests > 0) {
              this.requestCounter = this.requestCounter - 50;
              U.Packet_queuePacket(this, "energy");
            }
        }
      }
    },
    collectEnergy$0: function() {
      var height, centerBuilding, i, j, t1, t2, t3, positionCurrent, t4, tileHeight, packet;
      if (this.type === "collector" && this.built) {
        height = J.get$height$x($.game.world.getTile$1(this.position));
        centerBuilding = this.position;
        for (i = -5; i < 7; ++i)
          for (j = -5; j < 7; ++j) {
            t1 = this.position;
            t2 = t1.x;
            t3 = $.game.tileSize;
            if (typeof t2 !== "number")
              return t2.$tdiv();
            t2 = C.JSNumber_methods.$tdiv(t2, t3);
            t1 = t1.y;
            if (typeof t1 !== "number")
              return t1.$tdiv();
            positionCurrent = new U.Vector(t2 + i, C.JSNumber_methods.$tdiv(t1, t3) + j);
            t1 = $.game.world;
            if (t1.contains$1(t1, positionCurrent)) {
              t1 = J.$add$ns(J.$mul$n(positionCurrent.x, $.game.tileSize), $.game.tileSize / 2);
              t2 = J.$add$ns(J.$mul$n(positionCurrent.y, $.game.tileSize), $.game.tileSize / 2);
              t3 = $.game.world.tiles;
              t4 = positionCurrent.x;
              if (t4 >>> 0 !== t4 || t4 >= t3.length)
                return H.ioore(t3, t4);
              tileHeight = J.get$height$x(J.$index$asx(t3[t4], positionCurrent.y));
              t1 = J.$sub$n(t1, centerBuilding.x);
              if (typeof t1 !== "number")
                H.throwExpression(new P.ArgumentError(t1));
              t1 = Math.pow(t1, 2);
              t2 = J.$sub$n(t2, centerBuilding.y);
              if (typeof t2 !== "number")
                H.throwExpression(new P.ArgumentError(t2));
              t2 = Math.pow(t2, 2);
              t3 = $.game.tileSize;
              if (t1 + t2 < Math.pow(t3 * 6, 2))
                if (J.$eq(tileHeight, height)) {
                  t1 = $.game.world.tiles;
                  t2 = positionCurrent.x;
                  if (t2 >>> 0 !== t2 || t2 >= t1.length)
                    return H.ioore(t1, t2);
                  if (J.$eq(J.$index$asx(t1[t2], positionCurrent.y).get$collector(), this))
                    this.collectedEnergy = this.collectedEnergy + 1;
                }
            }
          }
      }
      t1 = this.type;
      if (t1 === "reactor" && this.built)
        this.collectedEnergy = this.collectedEnergy + 50;
      if (t1 === "base")
        this.collectedEnergy = this.collectedEnergy + 100;
      t2 = this.collectedEnergy;
      if (t2 >= 100) {
        this.collectedEnergy = t2 - 100;
        if (t1 === "collector") {
          packet = U.Packet$(this, $.Building_base, "packet_collection", "collection");
          if (packet.findRoute$0()) {
            packet.sprite.visible = true;
            $.get$Packet_packets().push(packet);
          } else {
            t1 = $.engine.renderer;
            t1.$index(t1, "buffer").removeDisplayObject$1(packet.sprite);
          }
        }
        t1 = this.type;
        if (t1 === "reactor" || t1 === "base") {
          t1 = $.Building_base;
          t2 = t1.energy + 1;
          t1.energy = t2;
          t3 = t1.maxEnergy;
          if (t2 > t3)
            t1.energy = t3;
          $.game.updateEnergyElement$0();
        }
      }
    },
    updateCollection$1: function(action) {
      var height, t1, t2, i, j, t3, t4, t5, positionCurrent, positionCurrentCenter, t6, tileHeight, k, heightK;
      height = J.get$height$x($.game.world.getTile$1(this.position));
      for (t1 = action === "remove", t2 = action === "add", i = -5; i < 7; ++i)
        for (j = -5; j < 7; ++j) {
          t3 = this.position;
          t4 = t3.x;
          t5 = $.game.tileSize;
          if (typeof t4 !== "number")
            return t4.$tdiv();
          t4 = C.JSNumber_methods.$tdiv(t4, t5);
          t3 = t3.y;
          if (typeof t3 !== "number")
            return t3.$tdiv();
          positionCurrent = new U.Vector(t4 + i, C.JSNumber_methods.$tdiv(t3, t5) + j);
          t3 = $.game.world;
          if (t3.contains$1(t3, positionCurrent)) {
            t3 = J.$add$ns(J.$mul$n(positionCurrent.x, $.game.tileSize), $.game.tileSize / 2);
            t4 = J.$add$ns(J.$mul$n(positionCurrent.y, $.game.tileSize), $.game.tileSize / 2);
            positionCurrentCenter = new U.Vector(t3, t4);
            t5 = $.game.world.tiles;
            t6 = positionCurrent.x;
            if (t6 >>> 0 !== t6 || t6 >= t5.length)
              return H.ioore(t5, t6);
            tileHeight = J.get$height$x(J.$index$asx(t5[t6], positionCurrent.y));
            t5 = this.position;
            t3 = J.$sub$n(t5.x, t3);
            if (typeof t3 !== "number")
              H.throwExpression(new P.ArgumentError(t3));
            t3 = Math.pow(t3, 2);
            t4 = J.$sub$n(t5.y, t4);
            if (typeof t4 !== "number")
              H.throwExpression(new P.ArgumentError(t4));
            t4 = Math.pow(t4, 2);
            if (Math.sqrt(t3 + t4) < $.game.tileSize * 6) {
              t3 = J.getInterceptor(tileHeight);
              if (t3.$eq(tileHeight, height))
                if (t2) {
                  t3 = $.game.world.tiles;
                  t4 = positionCurrent.x;
                  if (t4 >>> 0 !== t4 || t4 >= t3.length)
                    return H.ioore(t3, t4);
                  J.$index$asx(t3[t4], positionCurrent.y).set$collector(this);
                } else if (t1) {
                  t4 = $.game.world.tiles;
                  t5 = positionCurrent.x;
                  if (t5 >>> 0 !== t5 || t5 >= t4.length)
                    return H.ioore(t4, t5);
                  J.$index$asx(t4[t5], positionCurrent.y).set$collector(null);
                  for (k = 0; t4 = $.get$Building_buildings(), k < t4.length; ++k) {
                    if (!J.$eq(t4[k], this)) {
                      t4 = $.get$Building_buildings();
                      if (k >= t4.length)
                        return H.ioore(t4, k);
                      t4 = J.get$type$x(t4[k]) === "collector";
                    } else
                      t4 = false;
                    if (t4) {
                      t4 = $.game.world;
                      t5 = $.get$Building_buildings();
                      if (k >= t5.length)
                        return H.ioore(t5, k);
                      t5 = J.get$position$x(t5[k]);
                      t4 = t4.tiles;
                      t6 = J.get$x$x(t5);
                      if (typeof t6 !== "number")
                        return t6.$tdiv();
                      t6 = C.JSNumber_methods._tdivFast$1(t6, 16);
                      if (t6 >>> 0 !== t6 || t6 >= t4.length)
                        return H.ioore(t4, t6);
                      t6 = t4[t6];
                      t5 = t5.y;
                      if (typeof t5 !== "number")
                        return t5.$tdiv();
                      heightK = J.get$height$x(J.$index$asx(t6, C.JSNumber_methods._tdivFast$1(t5, 16)));
                      t5 = $.get$Building_buildings();
                      if (k >= t5.length)
                        return H.ioore(t5, k);
                      if (J.get$position$x(t5[k]).distanceTo$1(positionCurrentCenter) < $.game.tileSize * 6)
                        if (t3.$eq(tileHeight, heightK)) {
                          t3 = $.game.world.tiles;
                          t4 = positionCurrent.x;
                          if (t4 >>> 0 !== t4 || t4 >= t3.length)
                            return H.ioore(t3, t4);
                          t4 = J.$index$asx(t3[t4], positionCurrent.y);
                          t3 = $.get$Building_buildings();
                          if (k >= t3.length)
                            return H.ioore(t3, k);
                          t4.set$collector(t3[k]);
                          break;
                        }
                    }
                  }
                }
            }
          }
        }
      $.game.drawCollection$0();
    },
    checkOperating$0: function() {
      var t1, positionTiled, i, lowestTile, j, tilePosition, t2, tileHeight, t3, terraformElement, height, tilesToRedraw, targets, targetPositionTiled, closestDistance, distance, dx, dy, absoluteDelta, turnRate, projectile, tiledPosition, target, highestCreep, t4, shell;
      this.operating = false;
      if (this.built && this.needsEnergy && this.active && this.status === "IDLE") {
        this.energyCounter = this.energyCounter + 1 * $.game.speed;
        if (this.type === "analyzer")
          U.Emitter_find(this);
        t1 = this.type;
        if (t1 === "terp" && this.energy > 0) {
          t1 = this.weaponTargetPosition;
          if (t1 == null) {
            positionTiled = this.position.real2tiled$0();
            for (t1 = this.weaponRadius, i = -t1, lowestTile = 10; i <= t1; ++i)
              for (j = -t1; t1 = this.weaponRadius, j <= t1; ++j) {
                tilePosition = new U.Vector(J.$add$ns(positionTiled.x, i), J.$add$ns(positionTiled.y, j));
                t1 = $.game.world;
                if (t1.contains$1(t1, tilePosition)) {
                  t1 = $.game.world.tiles;
                  t2 = tilePosition.x;
                  if (t2 >>> 0 !== t2 || t2 >= t1.length)
                    return H.ioore(t1, t2);
                  if (J.$index$asx(t1[t2], tilePosition.y).get$terraformTarget() > -1) {
                    t1 = $.game.world.tiles;
                    t2 = tilePosition.x;
                    if (t2 >>> 0 !== t2 || t2 >= t1.length)
                      return H.ioore(t1, t2);
                    t2 = J.$index$asx(t1[t2], tilePosition.y).get$creep() === 0;
                    t1 = t2;
                  } else
                    t1 = false;
                } else
                  t1 = false;
                if (t1) {
                  t1 = $.game.world.tiles;
                  t2 = tilePosition.x;
                  if (t2 >>> 0 !== t2 || t2 >= t1.length)
                    return H.ioore(t1, t2);
                  tileHeight = J.get$height$x(J.$index$asx(t1[t2], tilePosition.y));
                  if (typeof tileHeight !== "number")
                    return tileHeight.$le();
                  if (tileHeight <= lowestTile) {
                    t1 = $.game.tileSize;
                    t2 = J.$mul$n(tilePosition.x, t1);
                    t1 = J.$mul$n(tilePosition.y, t1);
                    t2 = J.$add$ns(t2, 8);
                    t1 = J.$add$ns(t1, 8);
                    t3 = this.position;
                    t2 = J.$sub$n(t2, t3.x);
                    if (typeof t2 !== "number")
                      H.throwExpression(new P.ArgumentError(t2));
                    t2 = Math.pow(t2, 2);
                    t3 = J.$sub$n(t1, t3.y);
                    if (typeof t3 !== "number")
                      H.throwExpression(new P.ArgumentError(t3));
                    t1 = Math.pow(t3, 2);
                    t1 = Math.sqrt(t2 + t1) <= this.weaponRadius * $.game.tileSize;
                  } else
                    t1 = false;
                  if (t1) {
                    this.weaponTargetPosition = new U.Vector(tilePosition.x, tilePosition.y);
                    lowestTile = tileHeight;
                  }
                }
              }
          } else {
            t2 = this.energyCounter;
            if (t2 >= 20) {
              this.energyCounter = t2 - 20;
              this.energy = this.energy - 1;
            }
            this.operating = true;
            t2 = $.game.world.tiles;
            t3 = J.get$x$x(t1);
            if (t3 >>> 0 !== t3 || t3 >= t2.length)
              return H.ioore(t2, t3);
            terraformElement = J.$index$asx(t2[t3], t1.y);
            t1 = terraformElement.get$terraformProgress() + 1;
            terraformElement.terraformProgress = t1;
            if (t1 === 100) {
              terraformElement.terraformProgress = 0;
              t1 = $.game.world.tiles;
              t2 = this.weaponTargetPosition;
              t3 = J.get$x$x(t2);
              if (t3 >>> 0 !== t3 || t3 >= t1.length)
                return H.ioore(t1, t3);
              height = J.get$height$x(J.$index$asx(t1[t3], t2.y));
              tilesToRedraw = [];
              t1 = terraformElement.terraformTarget;
              if (typeof height !== "number")
                return height.$lt();
              t2 = $.game;
              t3 = this.weaponTargetPosition;
              if (height < t1) {
                t1 = t2.world.tiles;
                t2 = J.get$x$x(t3);
                if (t2 >>> 0 !== t2 || t2 >= t1.length)
                  return H.ioore(t1, t2);
                t3 = J.$index$asx(t1[t2], t3.y);
                t2 = J.getInterceptor$x(t3);
                t2.set$height(t3, J.$add$ns(t2.get$height(t3), 1));
                t3 = this.weaponTargetPosition;
                t2 = height + 1;
                tilesToRedraw.push(new U.Vector3(J.get$x$x(t3), t3.y, t2));
                tilesToRedraw.push(new U.Vector3(J.$sub$n(J.get$x$x(this.weaponTargetPosition), 1), J.get$y$x(this.weaponTargetPosition), t2));
                t3 = this.weaponTargetPosition;
                tilesToRedraw.push(new U.Vector3(J.get$x$x(t3), J.$sub$n(t3.y, 1), t2));
                tilesToRedraw.push(new U.Vector3(J.$add$ns(J.get$x$x(this.weaponTargetPosition), 1), J.get$y$x(this.weaponTargetPosition), t2));
                t3 = this.weaponTargetPosition;
                tilesToRedraw.push(new U.Vector3(J.get$x$x(t3), J.$add$ns(t3.y, 1), t2));
              } else {
                t1 = t2.world.tiles;
                t2 = J.get$x$x(t3);
                if (t2 >>> 0 !== t2 || t2 >= t1.length)
                  return H.ioore(t1, t2);
                t3 = J.$index$asx(t1[t2], t3.y);
                t2 = J.getInterceptor$x(t3);
                t2.set$height(t3, J.$sub$n(t2.get$height(t3), 1));
                t3 = this.weaponTargetPosition;
                tilesToRedraw.push(new U.Vector3(J.get$x$x(t3), t3.y, height));
                tilesToRedraw.push(new U.Vector3(J.$sub$n(J.get$x$x(this.weaponTargetPosition), 1), J.get$y$x(this.weaponTargetPosition), height));
                t3 = this.weaponTargetPosition;
                tilesToRedraw.push(new U.Vector3(J.get$x$x(t3), J.$sub$n(t3.y, 1), height));
                tilesToRedraw.push(new U.Vector3(J.$add$ns(J.get$x$x(this.weaponTargetPosition), 1), J.get$y$x(this.weaponTargetPosition), height));
                t3 = this.weaponTargetPosition;
                tilesToRedraw.push(new U.Vector3(J.get$x$x(t3), J.$add$ns(t3.y, 1), height));
              }
              $.game.redrawTerrain$1(tilesToRedraw);
              t1 = $.game.world.tiles;
              t2 = this.weaponTargetPosition;
              t3 = J.get$x$x(t2);
              if (t3 >>> 0 !== t3 || t3 >= t1.length)
                return H.ioore(t1, t3);
              if (height === J.$index$asx(t1[t3], t2.y).get$terraformTarget()) {
                t1 = $.game.world.tiles;
                t2 = this.weaponTargetPosition;
                t3 = J.get$x$x(t2);
                if (t3 >>> 0 !== t3 || t3 >= t1.length)
                  return H.ioore(t1, t3);
                J.$index$asx(t1[t3], t2.y).unflagTerraform$0();
              }
              this.weaponTargetPosition = null;
              this.operating = false;
            }
          }
        } else if (t1 === "shield" && this.energy > 0) {
          t1 = this.energyCounter;
          if (t1 >= 20) {
            this.energyCounter = t1 - 20;
            this.energy = this.energy - 1;
          }
          this.operating = true;
        } else if (t1 === "cannon" && this.energy > 0 && this.energyCounter >= 15)
          if (!this.rotating) {
            this.energyCounter = 0;
            height = J.get$height$x($.game.world.getTile$1(this.position));
            targets = [];
            targetPositionTiled = this.position.real2tiled$0();
            for (t1 = this.weaponRadius, i = -t1, closestDistance = 1000; i <= t1; ++i)
              for (j = -t1; t1 = this.weaponRadius, j <= t1; ++j) {
                tilePosition = new U.Vector(J.$add$ns(targetPositionTiled.x, i), J.$add$ns(targetPositionTiled.y, j));
                t1 = $.game.world;
                if (t1.contains$1(t1, tilePosition)) {
                  t1 = $.game.world.tiles;
                  t2 = tilePosition.x;
                  if (t2 >>> 0 !== t2 || t2 >= t1.length)
                    return H.ioore(t1, t2);
                  t2 = J.$index$asx(t1[t2], tilePosition.y).get$creep() > 0;
                  t1 = t2;
                } else
                  t1 = false;
                if (t1) {
                  t1 = $.game.world.tiles;
                  t2 = tilePosition.x;
                  if (t2 >>> 0 !== t2 || t2 >= t1.length)
                    return H.ioore(t1, t2);
                  tileHeight = J.get$height$x(J.$index$asx(t1[t2], tilePosition.y));
                  if (typeof tileHeight !== "number")
                    return tileHeight.$le();
                  if (typeof height !== "number")
                    return H.iae(height);
                  if (tileHeight <= height) {
                    t1 = $.game.tileSize;
                    t2 = J.$mul$n(tilePosition.x, t1);
                    t1 = J.$mul$n(tilePosition.y, t1);
                    t2 = J.$add$ns(t2, 8);
                    t1 = J.$add$ns(t1, 8);
                    t3 = this.position;
                    t2 = J.$sub$n(t2, t3.x);
                    if (typeof t2 !== "number")
                      H.throwExpression(new P.ArgumentError(t2));
                    t2 = Math.pow(t2, 2);
                    t3 = J.$sub$n(t1, t3.y);
                    if (typeof t3 !== "number")
                      H.throwExpression(new P.ArgumentError(t3));
                    t1 = Math.pow(t3, 2);
                    distance = Math.sqrt(t2 + t1);
                    t1 = this.weaponRadius;
                    t2 = $.game.tileSize;
                    if (distance <= Math.pow(t1 * t2, 2) && distance <= closestDistance) {
                      targets.push(tilePosition);
                      closestDistance = distance;
                    }
                  }
                }
              }
            if (targets.length > 0) {
              H.IterableMixinWorkaround_shuffleList(targets, null);
              if (0 >= targets.length)
                return H.ioore(targets, 0);
              dx = J.$sub$n(J.$add$ns(J.$mul$n(J.get$x$x(targets[0]), $.game.tileSize), $.game.tileSize / 2), this.position.x);
              if (0 >= targets.length)
                return H.ioore(targets, 0);
              dy = J.$sub$n(J.$add$ns(J.$mul$n(J.get$y$x(targets[0]), $.game.tileSize), $.game.tileSize / 2), this.position.y);
              t1 = $.engine;
              if (typeof dy !== "number")
                H.throwExpression(new P.ArgumentError(dy));
              if (typeof dx !== "number")
                H.throwExpression(new P.ArgumentError(dx));
              t2 = Math.atan2(dy, dx);
              t1.toString;
              this.targetAngle = C.JSNumber_methods.toInt$0(Math.floor(t2 * 57.29577951308232));
              if (0 >= targets.length)
                return H.ioore(targets, 0);
              t2 = targets[0];
              t1 = J.getInterceptor$x(t2);
              this.weaponTargetPosition = new U.Vector(t1.get$x(t2), t1.get$y(t2));
              this.rotating = true;
            }
          } else {
            t1 = this.rotation;
            t2 = this.targetAngle;
            if (t1 !== t2) {
              if (typeof t2 !== "number")
                return t2.$sub();
              absoluteDelta = Math.abs(t2 - t1);
              turnRate = absoluteDelta < 5 ? absoluteDelta : 5;
              if (absoluteDelta <= 180) {
                t1 = this.targetAngle;
                t2 = this.rotation;
                if (typeof t1 !== "number")
                  return t1.$lt();
                if (t1 < t2) {
                  t1 = t2 - turnRate;
                  this.rotation = t1;
                } else {
                  t1 = t2 + turnRate;
                  this.rotation = t1;
                }
              } else {
                t1 = this.targetAngle;
                t2 = this.rotation;
                if (typeof t1 !== "number")
                  return t1.$lt();
                if (t1 < t2) {
                  t1 = t2 + turnRate;
                  this.rotation = t1;
                } else {
                  t1 = t2 - turnRate;
                  this.rotation = t1;
                }
              }
              if (t1 > 180) {
                t1 -= 360;
                this.rotation = t1;
              }
              if (t1 < -180) {
                t1 += 360;
                this.rotation = t1;
              }
              t2 = this.cannon;
              if (t2 != null)
                t2.rotation = t1;
            } else {
              this.rotating = false;
              this.energy = this.energy - 1;
              this.operating = true;
              t1 = new U.Vector(J.$add$ns(J.$mul$n(J.get$x$x(this.weaponTargetPosition), $.game.tileSize), $.game.tileSize / 2), J.$add$ns(J.$mul$n(J.get$y$x(this.weaponTargetPosition), $.game.tileSize), $.game.tileSize / 2));
              projectile = new U.Projectile(t1, new U.Vector(0, 0), false, null);
              projectile.Projectile$3(this.position, t1, this.targetAngle);
              $.get$Projectile_projectiles().push(projectile);
              $.engine.playSound$2("laser", this.position.real2tiled$0());
            }
          }
        else if (t1 === "mortar" && this.energy > 0 && this.energyCounter >= 200) {
          this.energyCounter = -200;
          tiledPosition = this.position.real2tiled$0();
          i = J.$sub$n(tiledPosition.x, this.weaponRadius);
          target = null;
          highestCreep = 0;
          while (true) {
            t1 = J.$add$ns(tiledPosition.x, this.weaponRadius);
            if (typeof i !== "number")
              return i.$le();
            if (typeof t1 !== "number")
              return H.iae(t1);
            if (!(i <= t1))
              break;
            j = J.$sub$n(tiledPosition.y, this.weaponRadius);
            while (true) {
              t1 = J.$add$ns(tiledPosition.y, this.weaponRadius);
              if (typeof j !== "number")
                return j.$le();
              if (typeof t1 !== "number")
                return H.iae(t1);
              if (!(j <= t1))
                break;
              t1 = $.game.world;
              if (t1.contains$1(t1, new U.Vector(i, j))) {
                t1 = $.game.tileSize;
                t2 = this.position.x;
                if (typeof t2 !== "number")
                  return H.iae(t2);
                t1 = Math.pow(i * t1 + t1 / 2 - t2, 2);
                t2 = $.game.tileSize;
                t3 = this.position.y;
                if (typeof t3 !== "number")
                  return H.iae(t3);
                t2 = Math.pow(j * t2 + t2 / 2 - t3, 2);
                t3 = this.weaponRadius;
                t4 = $.game.tileSize;
                if (t1 + t2 <= Math.pow(t3 * t4, 2)) {
                  t1 = $.game.world.tiles;
                  if (i >>> 0 !== i || i >= t1.length)
                    return H.ioore(t1, i);
                  if (J.$index$asx(t1[i], j).get$creep() > 0) {
                    t1 = $.game.world.tiles;
                    if (i >= t1.length)
                      return H.ioore(t1, i);
                    t1 = J.$index$asx(t1[i], j).get$creep() >= highestCreep;
                  } else
                    t1 = false;
                } else
                  t1 = false;
                if (t1) {
                  t1 = $.game.world.tiles;
                  if (i >>> 0 !== i || i >= t1.length)
                    return H.ioore(t1, i);
                  highestCreep = J.$index$asx(t1[i], j).get$creep();
                  target = new U.Vector(i, j);
                }
              }
              ++j;
            }
            ++i;
          }
          if (target != null) {
            $.engine.playSound$2("shot", this.position.real2tiled$0());
            t1 = new U.Vector(J.$add$ns(J.$mul$n(target.x, $.game.tileSize), $.game.tileSize / 2), J.$add$ns(J.$mul$n(target.y, $.game.tileSize), $.game.tileSize / 2));
            shell = new U.Shell(t1, new U.Vector(0, 0), false, 0, null);
            shell.Shell$2(this.position, t1);
            $.get$Shell_shells().push(shell);
            this.energy = this.energy - 1;
          }
        } else if (t1 === "beam" && this.energy > 0 && this.energyCounter > 0) {
          this.energyCounter = 0;
          U.Spore_damage(this);
        }
      }
    },
    Building$template$1: function(imageID) {
      this.type = imageID;
      this.health = 0;
      this.size = 3;
      this.energy = 0;
      if (imageID === "analyzer") {
        this.maxHealth = 80;
        this.maxEnergy = 20;
        this.canMove = true;
        this.needsEnergy = true;
        this.weaponRadius = 10;
      } else if (imageID === "terp") {
        this.maxHealth = 60;
        this.maxEnergy = 20;
        this.canMove = true;
        this.needsEnergy = true;
        this.weaponRadius = 20;
      } else if (imageID === "shield") {
        this.maxHealth = 75;
        this.maxEnergy = 20;
        this.canMove = true;
        this.needsEnergy = true;
        this.weaponRadius = 10;
      } else if (imageID === "bomber") {
        this.maxHealth = 75;
        this.maxEnergy = 15;
        this.needsEnergy = true;
      } else if (imageID === "storage")
        this.maxHealth = 8;
      else if (imageID === "reactor")
        this.maxHealth = 50;
      else if (imageID === "collector")
        this.maxHealth = 5;
      else if (imageID === "relay")
        this.maxHealth = 10;
      else if (imageID === "cannon") {
        this.maxHealth = 25;
        this.maxEnergy = 40;
        this.weaponRadius = 10;
        this.canMove = true;
        this.needsEnergy = true;
        this.energyCounter = 15;
      } else if (imageID === "mortar") {
        this.maxHealth = 40;
        this.maxEnergy = 20;
        this.weaponRadius = 14;
        this.canMove = true;
        this.needsEnergy = true;
        this.energyCounter = 200;
      } else if (imageID === "beam") {
        this.maxHealth = 20;
        this.maxEnergy = 10;
        this.weaponRadius = 20;
        this.canMove = true;
        this.needsEnergy = true;
      }
    },
    Building$2: function(position, imageID) {
      var t1;
      this.type = imageID;
      this.position = position;
      t1 = $.engine.images;
      t1 = U.Sprite$(C.Layer_3, t1.$index(t1, imageID), position, 48, 48);
      this.sprite = t1;
      t1.anchor = new U.Vector(0.5, 0.5);
      t1.alpha = 0.5;
      t1 = $.engine.renderer;
      t1.$index(t1, "buffer").addDisplayObject$1(this.sprite);
      t1 = new U.Circle(position, 24, 2, "#fff", null, null, true);
      t1.layer = C.Layer_0;
      t1.scale = 1;
      this.selectedCircle = t1;
      t1.visible = false;
      t1 = $.engine.renderer;
      t1.$index(t1, "buffer").addDisplayObject$1(this.selectedCircle);
      t1 = new U.Rect(new U.Vector(0, 0), new U.Vector(48, 48), 1, "#0f0", null, null, null, true);
      t1.layer = C.Layer_0;
      t1.anchor = new U.Vector(0, 0);
      t1.scale = new U.Vector(1, 1);
      this.targetSymbol = t1;
      t1.visible = false;
      t1.anchor = new U.Vector(0.5, 0.5);
      t1 = $.engine.renderer;
      t1.$index(t1, "buffer").addDisplayObject$1(this.targetSymbol);
      this.health = 0;
      this.size = 3;
      this.energy = 0;
      t1 = this.type;
      if (t1 === "base") {
        t1 = this.sprite;
        t1.size = new U.Vector(144, 144);
        t1.alpha = 1;
        this.selectedCircle.radius = 72;
        this.health = 40;
        this.maxHealth = 40;
        this.built = true;
        this.size = 9;
        this.canMove = true;
        this.energy = 20;
        this.maxEnergy = 20;
        this.needsEnergy = true;
      } else if (t1 === "analyzer") {
        this.maxHealth = 80;
        this.maxEnergy = 20;
        this.canMove = true;
        this.needsEnergy = true;
        this.weaponRadius = 10;
      } else if (t1 === "terp") {
        this.maxHealth = 60;
        this.maxEnergy = 20;
        this.canMove = true;
        this.needsEnergy = true;
        this.weaponRadius = 20;
      } else if (t1 === "shield") {
        this.maxHealth = 75;
        this.maxEnergy = 20;
        this.canMove = true;
        this.needsEnergy = true;
        this.weaponRadius = 10;
      } else if (t1 === "bomber") {
        this.maxHealth = 1;
        this.maxEnergy = 15;
        this.needsEnergy = true;
      } else if (t1 === "storage")
        this.maxHealth = 8;
      else if (t1 === "reactor")
        this.maxHealth = 50;
      else if (t1 === "collector")
        this.maxHealth = 5;
      else if (t1 === "relay")
        this.maxHealth = 10;
      else if (t1 === "cannon") {
        this.maxHealth = 25;
        this.maxEnergy = 40;
        this.weaponRadius = 10;
        this.canMove = true;
        this.needsEnergy = true;
        this.energyCounter = 15;
        t1 = $.engine.images;
        t1 = U.Sprite$(C.Layer_5, t1.$index(t1, "cannongun"), position, 48, 48);
        this.cannon = t1;
        t1.anchor = new U.Vector(0.5, 0.5);
        t1.alpha = 0.5;
        t1 = $.engine.renderer;
        t1.$index(t1, "buffer").addDisplayObject$1(this.cannon);
      } else if (t1 === "mortar") {
        this.maxHealth = 40;
        this.maxEnergy = 20;
        this.weaponRadius = 14;
        this.canMove = true;
        this.needsEnergy = true;
        this.energyCounter = 200;
      } else if (t1 === "beam") {
        this.maxHealth = 20;
        this.maxEnergy = 10;
        this.weaponRadius = 20;
        this.canMove = true;
        this.needsEnergy = true;
      }
      U.Connection_add(this);
    },
    static: {"": "Building_baseSpeed,Building_damageCounter,Building_collectCounter,Building_buildings,Building_base", Building$template: function(imageID) {
        var t1 = new U.Building(null, new U.Vector(1, 1), null, null, new U.Vector(0, 0), null, "IDLE", false, false, false, false, true, false, false, false, null, 0, null, 0, 0, 0, 0, null, 0, null, 0, 0, 0, 0, null, null, null, null, null);
        t1.Building$template$1(imageID);
        return t1;
      }, Building_add: function(position, type) {
        var t1, t2, building;
        t1 = J.$mul$n(position.x, 16);
        t2 = J.$mul$n(position.y, 16);
        building = new U.Building(null, new U.Vector(1, 1), null, null, new U.Vector(0, 0), null, "IDLE", false, false, false, false, true, false, false, false, null, 0, null, 0, 0, 0, 0, null, 0, null, 0, 0, 0, 0, null, null, null, null, null);
        building.Building$2(new U.Vector(J.$add$ns(t1, 8), J.$add$ns(t2, 8)), type);
        if (type === "base")
          $.Building_base = building;
        $.get$Building_buildings().push(building);
        return building;
      }, Building_remove: function(building) {
        var explosion, t1, t2, t3, t4;
        if (building.get$built()) {
          explosion = new U.Explosion(null);
          explosion.Explosion$1(building.position);
          $.get$Explosion_explosions().push(explosion);
          t1 = $.engine;
          t2 = building.position;
          t3 = t2.x;
          t4 = $.game.tileSize;
          if (typeof t3 !== "number")
            return t3.$tdiv();
          t3 = C.JSNumber_methods.$tdiv(t3, t4);
          t2 = t2.y;
          if (typeof t2 !== "number")
            return t2.$tdiv();
          t1.playSound$2("explosion", new U.Vector(t3, C.JSNumber_methods.$tdiv(t2, t4)));
        }
        if (building.type === "base") {
          J.set$display$x(document.querySelector("#lose").style, "block");
          t1 = $.game.stopwatch;
          t1.stop$0(t1);
          $.game.running.cancel$0();
        }
        if (building.type === "collector")
          if (building.built)
            building.updateCollection$1("remove");
        if (building.type === "storage") {
          t1 = $.Building_base;
          t1.maxEnergy = t1.maxEnergy - 10;
          $.game.updateEnergyElement$0();
        }
        if (building.type === "speed")
          $.Packet_baseSpeed = $.Packet_baseSpeed / 1.01;
        U.Packet_removeWithTarget(building);
        U.Connection_remove(building);
        t1 = $.engine.renderer;
        t1.$index(t1, "buffer").removeDisplayObject$1(building.sprite);
        t1 = $.engine.renderer;
        t1.$index(t1, "buffer").removeDisplayObject$1(building.selectedCircle);
        t1 = $.engine.renderer;
        t1.$index(t1, "buffer").removeDisplayObject$1(building.targetSymbol);
        if (building.cannon != null) {
          t1 = $.engine.renderer;
          t1.$index(t1, "buffer").removeDisplayObject$1(building.cannon);
        }
        t1 = $.get$Building_buildings();
        J.removeAt$1$ax(t1, H.Lists_indexOf(t1, building, 0, t1.length));
      }, Building_removeSelected: function() {
        var i, t1;
        for (i = 0; t1 = $.get$Building_buildings(), i < t1.length; ++i) {
          t1 = t1[i];
          if (J.get$selected$x(t1) === true)
            if (t1.get$type(t1) !== "base")
              U.Building_remove(t1);
        }
      }, Building_select: function() {
        var buildingSelected, i, t1, t2, buildingSelected0;
        if ($.game.mode === "DEFAULT") {
          for (buildingSelected = null, i = 0; t1 = $.get$Building_buildings(), i < t1.length; ++i) {
            t1 = t1[i];
            t1.set$selected(t1, t1.get$hovered());
            t1 = $.get$Building_buildings();
            t2 = t1.length;
            if (i >= t2)
              return H.ioore(t1, i);
            buildingSelected0 = t1[i];
            if (J.get$selected$x(buildingSelected0) === true) {
              if (i >= t2)
                return H.ioore(t1, i);
              if (i >= t2)
                return H.ioore(t1, i);
              buildingSelected0.get$selectedCircle().visible = true;
              buildingSelected = buildingSelected0;
            } else {
              if (i >= t2)
                return H.ioore(t1, i);
              buildingSelected0.get$selectedCircle().visible = false;
            }
          }
          if (buildingSelected != null)
            if (buildingSelected.get$active()) {
              J.set$display$x(document.querySelector("#deactivate").style, "block");
              J.set$display$x(document.querySelector("#activate").style, "none");
            } else {
              J.set$display$x(document.querySelector("#deactivate").style, "none");
              J.set$display$x(document.querySelector("#activate").style, "block");
            }
          else {
            J.set$display$x(document.querySelector("#deactivate").style, "none");
            J.set$display$x(document.querySelector("#activate").style, "none");
          }
        }
      }, Building_deselect: function() {
        var i, t1;
        for (i = 0; t1 = $.get$Building_buildings(), i < t1.length; ++i) {
          J.set$selected$x(t1[i], false);
          t1 = $.get$Building_buildings();
          if (i >= t1.length)
            return H.ioore(t1, i);
          t1[i].get$selectedCircle().visible = false;
        }
        J.set$display$x(document.querySelector("#deactivate").style, "none");
        J.set$display$x(document.querySelector("#activate").style, "none");
      }, Building_updateHoverState: function() {
        var i, t1, realPosition, t2, t3, t4, t5, t6;
        for (i = 0; t1 = $.get$Building_buildings(), i < t1.length; ++i) {
          realPosition = J.get$position$x(t1[i]).real2screen$0();
          t1 = $.get$Building_buildings();
          t2 = t1.length;
          if (i >= t2)
            return H.ioore(t1, i);
          t3 = t1[i];
          t4 = $.engine.mouse.position.x;
          t5 = realPosition.x;
          t6 = $.game.tileSize;
          if (i >= t2)
            return H.ioore(t1, i);
          t1 = J.get$size$x(t3);
          if (typeof t1 !== "number")
            return H.iae(t1);
          t2 = $.game.zoom;
          if (typeof t2 !== "number")
            return H.iae(t2);
          t2 = J.$sub$n(t5, t6 * t1 * t2 / 2);
          if (typeof t4 !== "number")
            return t4.$gt();
          if (typeof t2 !== "number")
            return H.iae(t2);
          if (t4 > t2) {
            t1 = $.engine.mouse.position.x;
            t2 = realPosition.x;
            t4 = $.game.tileSize;
            t5 = $.get$Building_buildings();
            if (i >= t5.length)
              return H.ioore(t5, i);
            t5 = J.get$size$x(t5[i]);
            if (typeof t5 !== "number")
              return H.iae(t5);
            t6 = $.game.zoom;
            if (typeof t6 !== "number")
              return H.iae(t6);
            t6 = J.$add$ns(t2, t4 * t5 * t6 / 2);
            if (typeof t1 !== "number")
              return t1.$lt();
            if (typeof t6 !== "number")
              return H.iae(t6);
            if (t1 < t6) {
              t1 = $.engine.mouse.position.y;
              t2 = realPosition.y;
              t4 = $.game.tileSize;
              t5 = $.get$Building_buildings();
              if (i >= t5.length)
                return H.ioore(t5, i);
              t5 = J.get$size$x(t5[i]);
              if (typeof t5 !== "number")
                return H.iae(t5);
              t6 = $.game.zoom;
              if (typeof t6 !== "number")
                return H.iae(t6);
              t6 = J.$sub$n(t2, t4 * t5 * t6 / 2);
              if (typeof t1 !== "number")
                return t1.$gt();
              if (typeof t6 !== "number")
                return H.iae(t6);
              if (t1 > t6) {
                t1 = $.engine.mouse.position.y;
                t2 = realPosition.y;
                t4 = $.game.tileSize;
                t5 = $.get$Building_buildings();
                if (i >= t5.length)
                  return H.ioore(t5, i);
                t5 = J.get$size$x(t5[i]);
                if (typeof t5 !== "number")
                  return H.iae(t5);
                t6 = $.game.zoom;
                if (typeof t6 !== "number")
                  return H.iae(t6);
                t6 = J.$add$ns(t2, t4 * t5 * t6 / 2);
                if (typeof t1 !== "number")
                  return t1.$lt();
                if (typeof t6 !== "number")
                  return H.iae(t6);
                t6 = t1 < t6;
                t1 = t6;
              } else
                t1 = false;
            } else
              t1 = false;
          } else
            t1 = false;
          t3.set$hovered(t1);
        }
      }, Building_update: function() {
        var i, t1;
        for (i = 0; t1 = $.get$Building_buildings(), i < t1.length; ++i) {
          t1[i].move$0();
          t1 = $.get$Building_buildings();
          if (i >= t1.length)
            return H.ioore(t1, i);
          t1[i].checkOperating$0();
          t1 = $.get$Building_buildings();
          if (i >= t1.length)
            return H.ioore(t1, i);
          t1[i].shield$0();
          t1 = $.get$Building_buildings();
          if (i >= t1.length)
            return H.ioore(t1, i);
          t1[i].requestPacket$0();
        }
        t1 = $.Building_damageCounter + 1 * $.game.speed;
        $.Building_damageCounter = t1;
        if (t1 > 10) {
          $.Building_damageCounter = t1 - 10;
          for (i = 0; t1 = $.get$Building_buildings(), i < t1.length; ++i)
            t1[i].takeDamage$0();
        }
        t1 = $.Building_collectCounter + 1 * $.game.speed;
        $.Building_collectCounter = t1;
        if (t1 > 250) {
          $.Building_collectCounter = t1 - 250;
          for (i = 0; t1 = $.get$Building_buildings(), i < t1.length; ++i)
            t1[i].collectEnergy$0();
        }
      }, Building_activate: function() {
        var i, t1;
        for (i = 0; t1 = $.get$Building_buildings(), i < t1.length; ++i) {
          t1 = t1[i];
          if (J.get$selected$x(t1) === true)
            t1.set$active(true);
        }
      }, Building_deactivate: function() {
        var i, t1, j, t2;
        for (i = 0; t1 = $.get$Building_buildings(), i < t1.length; ++i) {
          t1 = t1[i];
          if (J.get$selected$x(t1) === true) {
            t1.set$active(false);
            t1 = $.get$Building_buildings();
            if (i >= t1.length)
              return H.ioore(t1, i);
            if (J.get$type$x(t1[i]) === "analyzer")
              for (j = 0; t1 = $.get$Emitter_emitters(), j < t1.length; ++j) {
                t2 = $.get$Building_buildings();
                if (i >= t2.length)
                  return H.ioore(t2, i);
                if (J.$eq(t2[i].get$weaponTargetPosition(), t1[j].sprite.position)) {
                  t1 = $.get$Emitter_emitters();
                  if (j >= t1.length)
                    return H.ioore(t1, j);
                  t1[j].analyzer = null;
                  t1 = $.get$Building_buildings();
                  if (i >= t1.length)
                    return H.ioore(t1, i);
                  t1[i].set$weaponTargetPosition(null);
                  break;
                }
              }
          }
        }
      }, Building_reposition: function(position) {
        var i, t1, t2, t3;
        for (i = 0; t1 = $.get$Building_buildings(), i < t1.length; ++i) {
          t1 = t1[i];
          if (t1.get$built() && t1.selected && t1.canMove)
            if ($.game.canBePlaced$2(position, t1)) {
              t1 = $.engine.renderer;
              J.set$cursor$x(J.get$style$x(J.get$view$x(t1.$index(t1, "main"))), "url('images/Normal.cur') 2 2, pointer");
              t1 = $.get$Building_buildings();
              if (i >= t1.length)
                return H.ioore(t1, i);
              t1[i].set$operating(false);
              t1 = $.get$Building_buildings();
              if (i >= t1.length)
                return H.ioore(t1, i);
              t1[i].set$rotating(false);
              t1 = $.get$Building_buildings();
              if (i >= t1.length)
                return H.ioore(t1, i);
              t1[i].set$weaponTargetPosition(null);
              t1 = $.get$Building_buildings();
              if (i >= t1.length)
                return H.ioore(t1, i);
              J.set$status$x(t1[i], "RISING");
              t1 = $.get$Building_buildings();
              if (i >= t1.length)
                return H.ioore(t1, i);
              t1 = t1[i];
              t2 = $.game.tileSize;
              t3 = J.$mul$n(position.x, t2);
              t2 = J.$mul$n(position.y, t2);
              t1.set$moveTargetPosition(new U.Vector(J.$add$ns(t3, 8), J.$add$ns(t2, 8)));
              t2 = $.get$Building_buildings();
              t3 = t2.length;
              if (i >= t3)
                return H.ioore(t2, i);
              t1 = t2[i];
              t1.get$targetSymbol().visible = true;
              if (i >= t3)
                return H.ioore(t2, i);
              t1 = t1.get$targetSymbol();
              t2 = $.game.tileSize;
              t3 = J.$mul$n(position.x, t2);
              t2 = J.$mul$n(position.y, t2);
              t1.set$position(t1, new U.Vector(J.$add$ns(t3, 8), J.$add$ns(t2, 8)));
              t2 = $.get$Building_buildings();
              if (i >= t2.length)
                return H.ioore(t2, i);
              U.Connection_remove(t2[i]);
            }
        }
      }, Building_collision: function(rectangle, building) {
        var t1, t2, i, t3, t4, t5, t6, t7, buildingRect;
        for (t1 = building != null, t2 = J.getInterceptor(building), i = 0; t3 = $.get$Building_buildings(), i < t3.length; ++i) {
          if (t1 && t2.$eq(building, t3[i]))
            continue;
          t3 = $.get$Building_buildings();
          t4 = t3.length;
          if (i >= t4)
            return H.ioore(t3, i);
          t5 = t3[i];
          if (J.get$status$x(t5) !== "IDLE") {
            if (i >= t4)
              return H.ioore(t3, i);
            t6 = t5.get$moveTargetPosition().x;
            if (i >= t4)
              return H.ioore(t3, i);
            t5 = J.$sub$n(t6, t5.size * $.game.tileSize / 2);
            t6 = $.get$Building_buildings();
            t3 = t6.length;
            if (i >= t3)
              return H.ioore(t6, i);
            t4 = t6[i];
            t7 = t4.get$moveTargetPosition().y;
            if (i >= t3)
              return H.ioore(t6, i);
            t4 = J.$sub$n(t7, t4.size * $.game.tileSize / 2);
            t7 = $.get$Building_buildings();
            if (i >= t7.length)
              return H.ioore(t7, i);
            t7 = J.$sub$n(J.$mul$n(J.get$size$x(t7[i]), $.game.tileSize), 1);
            t6 = $.get$Building_buildings();
            if (i >= t6.length)
              return H.ioore(t6, i);
            buildingRect = new P.Rectangle(t5, t4, t7, J.$sub$n(J.$mul$n(J.get$size$x(t6[i]), $.game.tileSize), 1));
            buildingRect.$builtinTypeInfo = [null];
          } else {
            if (i >= t4)
              return H.ioore(t3, i);
            t3 = t5.get$position(t5).x;
            t4 = $.get$Building_buildings();
            if (i >= t4.length)
              return H.ioore(t4, i);
            t4 = J.$sub$n(t3, J.$div$n(J.$mul$n(J.get$size$x(t4[i]), $.game.tileSize), 2));
            t3 = $.get$Building_buildings();
            if (i >= t3.length)
              return H.ioore(t3, i);
            t3 = J.get$y$x(J.get$position$x(t3[i]));
            t5 = $.get$Building_buildings();
            if (i >= t5.length)
              return H.ioore(t5, i);
            t5 = J.$sub$n(t3, J.$div$n(J.$mul$n(J.get$size$x(t5[i]), $.game.tileSize), 2));
            t3 = $.get$Building_buildings();
            if (i >= t3.length)
              return H.ioore(t3, i);
            t3 = J.$sub$n(J.$mul$n(J.get$size$x(t3[i]), $.game.tileSize), 1);
            t6 = $.get$Building_buildings();
            if (i >= t6.length)
              return H.ioore(t6, i);
            buildingRect = new P.Rectangle(t4, t5, t3, J.$sub$n(J.$mul$n(J.get$size$x(t6[i]), $.game.tileSize), 1));
            buildingRect.$builtinTypeInfo = [null];
          }
          if (rectangle.intersects$1(rectangle, buildingRect))
            return true;
        }
        return false;
      }, Building_drawRepositionInfo: function() {
        var t1, context, i, t2, t3, t4, positionI, t5, t6, canBePlaced, t7, t8, t9, j, positionJ, allowedDistance;
        t1 = $.engine.renderer;
        context = t1.$index(t1, "buffer").get$context();
        for (t1 = J.getInterceptor$x(context), i = 0; t2 = $.get$Building_buildings(), i < t2.length; ++i) {
          t2 = t2[i];
          if (t2.get$built() && t2.selected && t2.canMove) {
            t2 = $.engine.renderer;
            J.set$cursor$x(J.get$style$x(J.get$view$x(t2.$index(t2, "main"))), "none");
            t2 = $.game.hoveredTile.tiled2screen$0();
            t3 = $.game.zoom;
            if (typeof t3 !== "number")
              return H.iae(t3);
            t3 = 8 * t3;
            t4 = J.$add$ns(t2.x, t3);
            t3 = J.$add$ns(t2.y, t3);
            positionI = new U.Vector(t4, t3);
            t2 = $.game;
            t5 = t2.hoveredTile;
            t6 = $.get$Building_buildings();
            if (i >= t6.length)
              return H.ioore(t6, i);
            t2.drawRangeBoxes$2(t5, t6[i]);
            t6 = $.game;
            t5 = t6.hoveredTile;
            t2 = $.get$Building_buildings();
            if (i >= t2.length)
              return H.ioore(t2, i);
            canBePlaced = t6.canBePlaced$2(t5, t2[i]);
            if (canBePlaced)
              t1.set$fillStyle(context, "rgba(0,255,0,0.5)");
            else
              t1.set$fillStyle(context, "rgba(255,0,0,0.5)");
            t2 = $.game.tileSize;
            t5 = $.get$Building_buildings();
            if (i >= t5.length)
              return H.ioore(t5, i);
            t5 = J.get$size$x(t5[i]);
            if (typeof t5 !== "number")
              return H.iae(t5);
            t6 = $.game.zoom;
            if (typeof t6 !== "number")
              return H.iae(t6);
            t6 = J.$sub$n(t4, t2 * t5 * t6 / 2);
            t5 = $.game.tileSize;
            t2 = $.get$Building_buildings();
            if (i >= t2.length)
              return H.ioore(t2, i);
            t2 = J.get$size$x(t2[i]);
            if (typeof t2 !== "number")
              return H.iae(t2);
            t4 = $.game.zoom;
            if (typeof t4 !== "number")
              return H.iae(t4);
            t4 = J.$sub$n(t3, t5 * t2 * t4 / 2);
            t2 = $.game.tileSize;
            t5 = $.get$Building_buildings();
            if (i >= t5.length)
              return H.ioore(t5, i);
            t5 = J.get$size$x(t5[i]);
            if (typeof t5 !== "number")
              return H.iae(t5);
            t3 = $.game;
            t7 = t3.zoom;
            if (typeof t7 !== "number")
              return H.iae(t7);
            t3 = t3.tileSize;
            t8 = $.get$Building_buildings();
            if (i >= t8.length)
              return H.ioore(t8, i);
            t8 = J.get$size$x(t8[i]);
            if (typeof t8 !== "number")
              return H.iae(t8);
            t9 = $.game.zoom;
            if (typeof t9 !== "number")
              return H.iae(t9);
            t1.fillRect$4(context, t6, t4, t2 * t5 * t7, t3 * t8 * t9);
            if (canBePlaced)
              for (j = 0; t2 = $.get$Building_buildings(), t3 = t2.length, j < t3; ++j)
                if (i !== j) {
                  if (i >= t3)
                    return H.ioore(t2, i);
                  if (J.get$type$x(t2[i]) !== "base") {
                    t3 = t2[j];
                    t3 = J.get$type$x(t3) === "collector" || J.get$type$x(t3) === "relay" || J.get$type$x(t3) === "base";
                  } else
                    t3 = true;
                  if (t3) {
                    positionJ = J.get$position$x(t2[j]).real2screen$0();
                    t2 = $.game.tileSize;
                    allowedDistance = 10 * t2;
                    t3 = $.get$Building_buildings();
                    t4 = t3.length;
                    if (j >= t4)
                      return H.ioore(t3, j);
                    if (J.get$type$x(t3[j]) === "relay") {
                      if (i >= t4)
                        return H.ioore(t3, i);
                      t3 = J.get$type$x(t3[i]) === "relay";
                    } else
                      t3 = false;
                    if (t3)
                      allowedDistance = 20 * t2;
                    t2 = J.$sub$n(positionJ.x, positionI.x);
                    if (typeof t2 !== "number")
                      H.throwExpression(new P.ArgumentError(t2));
                    t2 = Math.pow(t2, 2);
                    t3 = J.$sub$n(positionJ.y, positionI.y);
                    if (typeof t3 !== "number")
                      H.throwExpression(new P.ArgumentError(t3));
                    t3 = Math.pow(t3, 2);
                    t2 = Math.sqrt(t2 + t3);
                    t3 = $.game.zoom;
                    if (typeof t3 !== "number")
                      return H.iae(t3);
                    if (t2 <= allowedDistance * t3) {
                      context.strokeStyle = "#000";
                      context.lineWidth = 3 * t3;
                      context.beginPath();
                      context.moveTo(positionJ.x, positionJ.y);
                      context.lineTo(positionI.x, positionI.y);
                      context.stroke();
                      context.strokeStyle = "#0f0";
                      t2 = $.game.zoom;
                      if (typeof t2 !== "number")
                        return H.iae(t2);
                      context.lineWidth = 2 * t2;
                      context.stroke();
                    }
                  }
                }
          }
        }
      }, Building_draw: function() {
        var t1, context, i, t2, realPosition, center, t3, t4, t5, targetPosition;
        t1 = $.engine.renderer;
        context = t1.$index(t1, "buffer").get$context();
        for (t1 = J.getInterceptor$x(context), i = 0; t2 = $.get$Building_buildings(), i < t2.length; ++i) {
          realPosition = J.get$position$x(t2[i]).real2screen$0();
          t2 = $.get$Building_buildings();
          if (i >= t2.length)
            return H.ioore(t2, i);
          center = J.get$position$x(t2[i]).real2screen$0();
          t2 = $.engine.renderer;
          t2 = t2.$index(t2, "buffer");
          t3 = $.engine.images;
          t4 = $.get$Building_buildings();
          if (i >= t4.length)
            return H.ioore(t4, i);
          t4 = J.$mul$n(J.get$width$x(t3.$index(t3, J.get$type$x(t4[i]))), $.game.zoom);
          t3 = $.engine.images;
          t5 = $.get$Building_buildings();
          if (i >= t5.length)
            return H.ioore(t5, i);
          if (t2.isVisible$2(realPosition, new U.Vector(t4, J.$mul$n(J.get$height$x(t3.$index(t3, J.get$type$x(t5[i]))), $.game.zoom)))) {
            t2 = $.get$Building_buildings();
            if (i >= t2.length)
              return H.ioore(t2, i);
            if (t2[i].get$needsEnergy()) {
              t1.set$fillStyle(context, "#f00");
              t2 = realPosition.x;
              t3 = $.get$Building_buildings();
              if (i >= t3.length)
                return H.ioore(t3, i);
              t3 = J.$sub$n(t2, J.$mul$n(J.$sub$n(J.$div$n(J.$mul$n(J.get$size$x(t3[i]), $.game.tileSize), 2), 2), $.game.zoom));
              t2 = realPosition.y;
              t4 = $.get$Building_buildings();
              if (i >= t4.length)
                return H.ioore(t4, i);
              t4 = J.$sub$n(t2, J.$mul$n(J.$sub$n(J.$div$n(J.$mul$n(J.get$size$x(t4[i]), $.game.tileSize), 2), 4), $.game.zoom));
              t2 = $.get$Building_buildings();
              if (i >= t2.length)
                return H.ioore(t2, i);
              t2 = J.$sub$n(J.$mul$n(J.$mul$n(J.get$size$x(t2[i]), $.game.tileSize), $.game.zoom), 4);
              t5 = $.get$Building_buildings();
              if (i >= t5.length)
                return H.ioore(t5, i);
              t5 = J.$div$n(t2, t5[i].get$maxEnergy());
              t2 = $.get$Building_buildings();
              if (i >= t2.length)
                return H.ioore(t2, i);
              t2 = J.$mul$n(t5, t2[i].get$energy());
              t5 = $.game.zoom;
              if (typeof t5 !== "number")
                return H.iae(t5);
              context.fillRect(t3, t4, t2, 3 * t5);
            }
            t2 = $.get$Building_buildings();
            t3 = t2.length;
            if (i >= t3)
              return H.ioore(t2, i);
            t4 = t2[i];
            t5 = t4.get$health();
            if (i >= t3)
              return H.ioore(t2, i);
            if (t5 < t4.get$maxHealth()) {
              t1.set$fillStyle(context, "#0f0");
              t2 = realPosition.x;
              t3 = $.get$Building_buildings();
              if (i >= t3.length)
                return H.ioore(t3, i);
              t3 = J.$sub$n(t2, J.$mul$n(J.$sub$n(J.$div$n(J.$mul$n(J.get$size$x(t3[i]), $.game.tileSize), 2), 2), $.game.zoom));
              t2 = realPosition.y;
              t4 = $.get$Building_buildings();
              if (i >= t4.length)
                return H.ioore(t4, i);
              t4 = J.$add$ns(t2, J.$mul$n(J.$sub$n(J.$div$n(J.$mul$n(J.get$size$x(t4[i]), $.game.tileSize), 2), 4), $.game.zoom));
              t2 = $.get$Building_buildings();
              if (i >= t2.length)
                return H.ioore(t2, i);
              t2 = J.$sub$n(J.$mul$n(J.$mul$n(J.get$size$x(t2[i]), $.game.tileSize), $.game.zoom), 4);
              t5 = $.get$Building_buildings();
              if (i >= t5.length)
                return H.ioore(t5, i);
              t5 = J.$div$n(t2, t5[i].get$maxHealth());
              t2 = $.get$Building_buildings();
              if (i >= t2.length)
                return H.ioore(t2, i);
              t2 = J.$mul$n(t5, t2[i].get$health());
              t5 = $.game.zoom;
              if (typeof t5 !== "number")
                return H.iae(t5);
              context.fillRect(t3, t4, t2, 3 * t5);
            }
            t2 = $.get$Building_buildings();
            if (i >= t2.length)
              return H.ioore(t2, i);
            if (!t2[i].get$active()) {
              t1.set$strokeStyle(context, "#F00");
              t2 = $.game.zoom;
              if (typeof t2 !== "number")
                return H.iae(t2);
              context.lineWidth = 2 * t2;
              context.beginPath();
              t2 = center.x;
              t3 = center.y;
              t4 = $.game.tileSize;
              t5 = $.get$Building_buildings();
              if (i >= t5.length)
                return H.ioore(t5, i);
              t5 = J.get$size$x(t5[i]);
              if (typeof t5 !== "number")
                return H.iae(t5);
              context.arc(t2, t3, t4 / 2 * t5, 0, 6.283185307179586, true);
              context.closePath();
              context.stroke();
              context.beginPath();
              t5 = realPosition.x;
              t4 = $.game.tileSize;
              t3 = $.get$Building_buildings();
              if (i >= t3.length)
                return H.ioore(t3, i);
              t3 = J.get$size$x(t3[i]);
              if (typeof t3 !== "number")
                return H.iae(t3);
              t3 = J.$sub$n(t5, t4 * t3 / 3);
              t4 = realPosition.y;
              t5 = $.game.tileSize;
              t2 = $.get$Building_buildings();
              if (i >= t2.length)
                return H.ioore(t2, i);
              t2 = J.get$size$x(t2[i]);
              if (typeof t2 !== "number")
                return H.iae(t2);
              context.moveTo(t3, J.$add$ns(t4, t5 * t2 / 3));
              t2 = realPosition.x;
              t5 = $.game.tileSize;
              t4 = $.get$Building_buildings();
              if (i >= t4.length)
                return H.ioore(t4, i);
              t4 = J.get$size$x(t4[i]);
              if (typeof t4 !== "number")
                return H.iae(t4);
              t4 = J.$add$ns(t2, t5 * t4 / 3);
              t5 = realPosition.y;
              t2 = $.game.tileSize;
              t3 = $.get$Building_buildings();
              if (i >= t3.length)
                return H.ioore(t3, i);
              t3 = J.get$size$x(t3[i]);
              if (typeof t3 !== "number")
                return H.iae(t3);
              context.lineTo(t4, J.$sub$n(t5, t2 * t3 / 3));
              context.stroke();
            }
          }
          t2 = $.get$Building_buildings();
          t3 = t2.length;
          if (i >= t3)
            return H.ioore(t2, i);
          t4 = t2[i];
          if (t4.get$operating()) {
            if (i >= t3)
              return H.ioore(t2, i);
            if (t4.type === "analyzer") {
              if (i >= t3)
                return H.ioore(t2, i);
              targetPosition = t4.weaponTargetPosition.real2screen$0();
              t1.set$strokeStyle(context, "#00f");
              t2 = $.game.zoom;
              if (typeof t2 !== "number")
                return H.iae(t2);
              context.lineWidth = 5 * t2;
              context.beginPath();
              context.moveTo(center.x, center.y);
              context.lineTo(targetPosition.x, targetPosition.y);
              context.stroke();
              context.strokeStyle = "#fff";
              t2 = $.game.zoom;
              if (typeof t2 !== "number")
                return H.iae(t2);
              context.lineWidth = 3 * t2;
              context.beginPath();
              context.moveTo(center.x, center.y);
              context.lineTo(targetPosition.x, targetPosition.y);
              context.stroke();
            } else {
              if (i >= t3)
                return H.ioore(t2, i);
              if (t4.type === "beam") {
                if (i >= t3)
                  return H.ioore(t2, i);
                targetPosition = t4.weaponTargetPosition.real2screen$0();
                t1.set$strokeStyle(context, "#f00");
                t2 = $.game.zoom;
                if (typeof t2 !== "number")
                  return H.iae(t2);
                context.lineWidth = 5 * t2;
                context.beginPath();
                context.moveTo(center.x, center.y);
                context.lineTo(targetPosition.x, targetPosition.y);
                context.stroke();
                context.strokeStyle = "#fff";
                t2 = $.game.zoom;
                if (typeof t2 !== "number")
                  return H.iae(t2);
                context.lineWidth = 3 * t2;
                context.beginPath();
                context.moveTo(center.x, center.y);
                context.lineTo(targetPosition.x, targetPosition.y);
                context.stroke();
              } else {
                if (i >= t3)
                  return H.ioore(t2, i);
                if (t4.type === "shield") {
                  t1.save$0(context);
                  context.globalAlpha = 0.5;
                  t2 = $.engine.images;
                  t2 = t2.$index(t2, "forcefield");
                  t3 = center.x;
                  t4 = $.game.zoom;
                  if (typeof t4 !== "number")
                    return H.iae(t4);
                  t4 = J.$sub$n(t3, 168 * t4);
                  t3 = center.y;
                  t5 = $.game.zoom;
                  if (typeof t5 !== "number")
                    return H.iae(t5);
                  t5 = J.$sub$n(t3, 168 * t5);
                  t3 = $.game.zoom;
                  if (typeof t3 !== "number")
                    return H.iae(t3);
                  t3 = 336 * t3;
                  context.drawImage(t2, t4, t5, t3, t3);
                  context.restore();
                } else {
                  if (i >= t3)
                    return H.ioore(t2, i);
                  if (t4.type === "terp") {
                    if (i >= t3)
                      return H.ioore(t2, i);
                    targetPosition = t4.weaponTargetPosition.tiled2screen$0();
                    t1.set$strokeStyle(context, "#f00");
                    t2 = $.game.zoom;
                    if (typeof t2 !== "number")
                      return H.iae(t2);
                    context.lineWidth = 4 * t2;
                    context.beginPath();
                    context.moveTo(center.x, center.y);
                    context.lineTo(J.$add$ns(targetPosition.x, 8), J.$add$ns(targetPosition.y, 8));
                    context.stroke();
                    context.strokeStyle = "#fff";
                    t2 = $.game.zoom;
                    if (typeof t2 !== "number")
                      return H.iae(t2);
                    context.lineWidth = 2 * t2;
                    context.beginPath();
                    context.moveTo(center.x, center.y);
                    context.lineTo(J.$add$ns(targetPosition.x, 8), J.$add$ns(targetPosition.y, 8));
                    context.stroke();
                  }
                }
              }
            }
          }
        }
      }}
  },
  Connection: {
    "": "Object;from<,to<,line,line2<",
    Connection$2: function(from, to) {
      var t1, color;
      t1 = new U.Line("#000", this.from.position, J.get$position$x(this.to), 3, null, true);
      t1.layer = C.Layer_1;
      this.line = t1;
      t1 = $.engine.renderer;
      t1.$index(t1, "buffer").addDisplayObject$1(this.line);
      t1 = this.from;
      color = t1.built && this.to.get$built() ? "#fff" : "#777";
      t1 = new U.Line(color, t1.position, J.get$position$x(this.to), 2, null, true);
      t1.layer = C.Layer_2;
      this.line2 = t1;
      t1 = $.engine.renderer;
      t1.$index(t1, "buffer").addDisplayObject$1(this.line2);
    },
    static: {"": "Connection_connections", Connection_add: function(building) {
        var i, t1, t2, t3, t4, allowedDistance, connection;
        for (i = 0; t1 = $.get$Building_buildings(), i < t1.length; ++i) {
          if (!J.$eq(t1[i], building)) {
            t1 = $.get$Building_buildings();
            t2 = t1.length;
            if (i >= t2)
              return H.ioore(t1, i);
            t3 = t1[i];
            if (J.get$status$x(t3) === "IDLE") {
              t4 = building.type;
              if (t4 !== "collector")
                if (t4 !== "relay") {
                  if (i >= t2)
                    return H.ioore(t1, i);
                  if (t3.get$type(t3) !== "collector") {
                    if (i >= t2)
                      return H.ioore(t1, i);
                    if (t3.get$type(t3) !== "relay") {
                      if (i >= t2)
                        return H.ioore(t1, i);
                      t1 = t3.get$type(t3) === "base";
                    } else
                      t1 = true;
                  } else
                    t1 = true;
                } else
                  t1 = true;
              else
                t1 = true;
            } else
              t1 = false;
          } else
            t1 = false;
          if (t1) {
            t1 = $.game.tileSize;
            allowedDistance = 10 * t1;
            t2 = $.get$Building_buildings();
            t3 = t2.length;
            if (i >= t3)
              return H.ioore(t2, i);
            t4 = t2[i];
            if (J.get$type$x(t4) === "relay" && building.type === "relay")
              allowedDistance = 20 * t1;
            t1 = building.position;
            if (i >= t3)
              return H.ioore(t2, i);
            t4 = J.get$position$x(t4);
            t2 = J.$sub$n(t1.x, J.get$x$x(t4));
            if (typeof t2 !== "number")
              H.throwExpression(new P.ArgumentError(t2));
            t2 = Math.pow(t2, 2);
            t4 = J.$sub$n(t1.y, t4.y);
            if (typeof t4 !== "number")
              H.throwExpression(new P.ArgumentError(t4));
            t1 = Math.pow(t4, 2);
            if (Math.sqrt(t2 + t1) <= allowedDistance) {
              t1 = $.get$Building_buildings();
              if (i >= t1.length)
                return H.ioore(t1, i);
              if (!U.Connection_exists(building, t1[i])) {
                t1 = $.get$Building_buildings();
                if (i >= t1.length)
                  return H.ioore(t1, i);
                t1 = t1[i];
                connection = new U.Connection(building, t1, null, null);
                connection.Connection$2(building, t1);
                $.get$Connection_connections().push(connection);
              }
            }
          }
        }
      }, Connection_remove: function(building) {
        var i, t1, t2, t3;
        for (i = $.get$Connection_connections().length - 1; i >= 0; --i) {
          t1 = $.get$Connection_connections();
          t2 = t1.length;
          if (i >= t2)
            return H.ioore(t1, i);
          t3 = t1[i];
          if (t3.from !== building) {
            if (i >= t2)
              return H.ioore(t1, i);
            t1 = J.$eq(t3.to, building);
          } else
            t1 = true;
          if (t1) {
            t1 = $.engine.renderer;
            t1 = t1.$index(t1, "buffer");
            t2 = $.get$Connection_connections();
            if (i >= t2.length)
              return H.ioore(t2, i);
            t1.removeDisplayObject$1(t2[i].line);
            t2 = $.engine.renderer;
            t2 = t2.$index(t2, "buffer");
            t1 = $.get$Connection_connections();
            if (i >= t1.length)
              return H.ioore(t1, i);
            t2.removeDisplayObject$1(t1[i].line2);
            J.removeAt$1$ax($.get$Connection_connections(), i);
          }
        }
      }, Connection_exists: function(from, to) {
        var t1, connection, t2;
        for (t1 = $.get$Connection_connections(), t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
          connection = t1._current;
          if (!(J.$eq(connection.get$from(), from) && J.$eq(connection.get$to(), to)))
            t2 = J.$eq(connection.get$from(), to) && J.$eq(connection.get$to(), from);
          else
            t2 = true;
          if (t2)
            return true;
        }
        return false;
      }, Connection_activate: function(building) {
        var t1, connection;
        for (t1 = $.get$Connection_connections(), t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
          connection = t1._current;
          if ((J.$eq(connection.get$from(), building) || J.$eq(connection.get$to(), building)) && connection.get$from().get$built() && connection.get$to().get$built())
            connection.get$line2().color = "#fff";
        }
      }}
  },
  DisplayObject: {
    "": "Object;visible<"
  },
  Rect: {
    "": "DisplayObject;position*,size>,lineWidth,color,anchor,scale,layer,visible",
    $isRect: true
  },
  Circle: {
    "": "DisplayObject;position>,radius,lineWidth,color,scale,layer,visible",
    $isCircle: true
  },
  Line: {
    "": "DisplayObject;color,from<,to<,lineWidth,layer,visible",
    $isLine: true
  },
  Sprite: {
    "": "DisplayObject;frame,image,anchor,scale,position*,size>,rotation,alpha,animated,layer,visible",
    Sprite$5: function(layer, image, position, width, height) {
      this.layer = layer;
      this.anchor = new U.Vector(0, 0);
      this.scale = new U.Vector(1, 1);
      this.size = new U.Vector(width, height);
    },
    $isSprite: true,
    static: {Sprite$: function(layer, image, position, width, height) {
        var t1 = new U.Sprite(0, image, null, null, position, null, 0, 1, false, null, true);
        t1.Sprite$5(layer, image, position, width, height);
        return t1;
      }}
  },
  Layer: {
    "": "Object;_creeper$_value",
    $sub: function(_, other) {
      return C.JSInt_methods.$sub(this._creeper$_value, other.get$_creeper$_value());
    },
    static: {"": "Layer_ENERGYBAR,Layer_BUILDINGGUNFLYING,Layer_SPORE,Layer_SHELL,Layer_SHIP,Layer_BUILDINGFLYING,Layer_SMOKE,Layer_EXPLOSION,Layer_PACKET,Layer_BUILDINGGUN,Layer_PROJECTILE,Layer_EMITTER,Layer_SPORETOWER,Layer_BUILDING,Layer_CONNECTION,Layer_CONNECTIONBORDER,Layer_TARGETSYMBOL,Layer_SELECTEDCIRCLE,Layer_TERRAFORM"}
  },
  Emitter: {
    "": "Object;sprite,strength,analyzer",
    Emitter$2: function(position, strength) {
      var t1 = $.engine.images;
      t1 = U.Sprite$(C.Layer_3, t1.$index(t1, "emitter"), position, 48, 48);
      this.sprite = t1;
      t1.anchor = new U.Vector(0.5, 0.5);
      t1 = $.engine.renderer;
      t1.$index(t1, "buffer").addDisplayObject$1(this.sprite);
    },
    static: {"": "Emitter_counter,Emitter_emitters", Emitter_update: function() {
        var t1, t2, i, t3;
        t1 = $.Emitter_counter;
        t2 = $.game.speed;
        if (typeof t1 !== "number")
          return t1.$add();
        t2 = t1 + 1 * t2;
        $.Emitter_counter = t2;
        if (t2 >= 25) {
          $.Emitter_counter = t2 - 25;
          for (i = 0; t1 = $.get$Emitter_emitters(), i < t1.length; ++i) {
            t1 = t1[i];
            if (t1.analyzer == null) {
              t2 = $.game.world;
              t1 = t1.sprite.position;
              t2 = t2.tiles;
              t3 = J.get$x$x(t1);
              if (typeof t3 !== "number")
                return t3.$tdiv();
              t3 = C.JSNumber_methods._tdivFast$1(t3, 16);
              if (t3 >>> 0 !== t3 || t3 >= t2.length)
                return H.ioore(t2, t3);
              t3 = t2[t3];
              t1 = t1.y;
              if (typeof t1 !== "number")
                return t1.$tdiv();
              t1 = J.$index$asx(t3, C.JSNumber_methods._tdivFast$1(t1, 16));
              t3 = t1.get$creep();
              t2 = $.get$Emitter_emitters();
              if (i >= t2.length)
                return H.ioore(t2, i);
              t1.creep = t3 + t2[i].strength;
              $.World_creeperDirty = true;
            }
          }
        }
        U.Emitter_checkWinningCondition();
      }, Emitter_find: function(building) {
        var center, t1, i, t2, emitterCenter, t3, t4, t5;
        center = building.sprite.position;
        if (building.weaponTargetPosition == null && building.energy > 0)
          for (t1 = J.getInterceptor$x(center), i = 0; t2 = $.get$Emitter_emitters(), i < t2.length; ++i) {
            emitterCenter = t2[i].sprite.position;
            t2 = J.$sub$n(J.get$x$x(emitterCenter), t1.get$x(center));
            if (typeof t2 !== "number")
              H.throwExpression(new P.ArgumentError(t2));
            t2 = Math.pow(t2, 2);
            t3 = J.$sub$n(emitterCenter.y, center.y);
            if (typeof t3 !== "number")
              H.throwExpression(new P.ArgumentError(t3));
            t3 = Math.pow(t3, 2);
            t4 = building.weaponRadius;
            t5 = $.game.tileSize;
            if (t2 + t3 <= Math.pow(t4 * t5, 2)) {
              t2 = $.get$Emitter_emitters();
              t3 = t2.length;
              if (i >= t3)
                return H.ioore(t2, i);
              t4 = t2[i];
              if (t4.analyzer == null) {
                if (i >= t3)
                  return H.ioore(t2, i);
                t4.analyzer = building;
                if (i >= t3)
                  return H.ioore(t2, i);
                building.weaponTargetPosition = t4.sprite.position;
                break;
              }
            }
          }
        else {
          t1 = building.energy;
          if (t1 > 0) {
            if (building.energyCounter > 20) {
              building.energyCounter = 0;
              building.energy = t1 - 1;
            }
            building.operating = true;
          } else {
            building.operating = false;
            for (i = 0; t1 = $.get$Emitter_emitters(), i < t1.length; ++i)
              if (J.$eq(building.weaponTargetPosition, t1[i].sprite.position)) {
                t1 = $.get$Emitter_emitters();
                if (i >= t1.length)
                  return H.ioore(t1, i);
                t1[i].analyzer = null;
                building.weaponTargetPosition = null;
                break;
              }
          }
        }
      }, Emitter_checkWinningCondition: function() {
        var emittersChecked, i, t1, t2;
        if (!$.game.won) {
          for (emittersChecked = 0, i = 0; t1 = $.get$Emitter_emitters(), t2 = t1.length, i < t2; ++i)
            if (t1[i].analyzer != null)
              ++emittersChecked;
          if (emittersChecked === t2) {
            J.set$display$x(document.querySelector("#win").style, "block");
            t1 = $.game.stopwatch;
            t1.stop$0(t1);
            t1 = $.game;
            t1.paused = true;
            t1.won = true;
          }
        }
      }, Emitter_collision: function(rectangle) {
        var i, t1, t2, t3, emitterRect;
        for (i = 0; t1 = $.get$Emitter_emitters(), i < t1.length; ++i) {
          t1 = J.$sub$n(J.get$x$x(t1[i].sprite.position), 3 * $.game.tileSize / 2);
          t2 = $.get$Emitter_emitters();
          if (i >= t2.length)
            return H.ioore(t2, i);
          t3 = 3 * $.game.tileSize - 1;
          emitterRect = new P.Rectangle(t1, J.$sub$n(J.get$y$x(t2[i].sprite.position), 3 * $.game.tileSize / 2), t3, t3);
          emitterRect.$builtinTypeInfo = [null];
          if (rectangle.intersects$1(rectangle, emitterRect))
            return true;
        }
        return false;
      }}
  },
  Mouse: {
    "": "Object;position>,active<,buttonPressed,dragStart",
    toString$0: function(_) {
      return H.S(this.position);
    }
  },
  Engine: {
    "": "Object;animationRequest,TPS,width>,height*,halfWidth,halfHeight,mouse,renderer,sounds,images,resizeTimer",
    setupEventHandler$0: function() {
      var t1, t2, t3, t4;
      t1 = document.querySelector("#terraform");
      t1.toString;
      t1 = C.EventStreamProvider_click.forElement$1(t1);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new U.Engine_setupEventHandler_closure()), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      t1 = document.querySelector("#continue");
      t1.toString;
      t1 = C.EventStreamProvider_click.forElement$1(t1);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new U.Engine_setupEventHandler_closure0()), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      t1 = document.querySelector("#restart");
      t1.toString;
      t1 = C.EventStreamProvider_click.forElement$1(t1);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new U.Engine_setupEventHandler_closure1()), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      t1 = document.querySelector("#restart2");
      t1.toString;
      t1 = C.EventStreamProvider_click.forElement$1(t1);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new U.Engine_setupEventHandler_closure2()), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      t1 = document.querySelector("#deactivate");
      t1.toString;
      t1 = C.EventStreamProvider_click.forElement$1(t1);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new U.Engine_setupEventHandler_closure3()), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      t1 = document.querySelector("#activate");
      t1.toString;
      t1 = C.EventStreamProvider_click.forElement$1(t1);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new U.Engine_setupEventHandler_closure4()), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      t1 = this.renderer;
      t2 = J.get$view$x(t1.$index(t1, "main"));
      t3 = J.getInterceptor$x(t2);
      t4 = t3.get$onMouseMove(t2);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t4._target, t4._eventType, W._wrapZone(new U.Engine_setupEventHandler_closure5()), t4._useCapture), [H.getTypeArgumentByIndex(t4, 0)])._tryResume$0();
      t4 = t3.get$onDoubleClick(t2);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t4._target, t4._eventType, W._wrapZone(new U.Engine_setupEventHandler_closure6()), t4._useCapture), [H.getTypeArgumentByIndex(t4, 0)])._tryResume$0();
      t4 = t3.get$onMouseDown(t2);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t4._target, t4._eventType, W._wrapZone(new U.Engine_setupEventHandler_closure7()), t4._useCapture), [H.getTypeArgumentByIndex(t4, 0)])._tryResume$0();
      t4 = t3.get$onMouseUp(t2);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t4._target, t4._eventType, W._wrapZone(new U.Engine_setupEventHandler_closure8()), t4._useCapture), [H.getTypeArgumentByIndex(t4, 0)])._tryResume$0();
      t2 = t3.get$onMouseWheel(t2);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t2._target, t2._eventType, W._wrapZone(new U.Engine_setupEventHandler_closure9()), t2._useCapture), [H.getTypeArgumentByIndex(t2, 0)])._tryResume$0();
      t1 = J.get$view$x(t1.$index(t1, "gui"));
      t2 = J.getInterceptor$x(t1);
      t3 = t2.get$onMouseMove(t1);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t3._target, t3._eventType, W._wrapZone(new U.Engine_setupEventHandler_closure10()), t3._useCapture), [H.getTypeArgumentByIndex(t3, 0)])._tryResume$0();
      t1 = t2.get$onClick(t1);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new U.Engine_setupEventHandler_closure11()), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      t1 = document;
      t2 = C.EventStreamProvider_keydown.forTarget$1(t1);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t2._target, t2._eventType, W._wrapZone(new U.Engine_setupEventHandler_closure12()), t2._useCapture), [H.getTypeArgumentByIndex(t2, 0)])._tryResume$0();
      t2 = C.EventStreamProvider_keyup.forTarget$1(t1);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t2._target, t2._eventType, W._wrapZone(new U.Engine_setupEventHandler_closure13()), t2._useCapture), [H.getTypeArgumentByIndex(t2, 0)])._tryResume$0();
      t1 = C.EventStreamProvider_contextmenu.forTarget$1(t1);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new U.Engine_setupEventHandler_closure14()), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      t1 = C.EventStreamProvider_resize.forTarget$1(window);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new U.Engine_setupEventHandler_closure15()), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
    },
    loadImages$0: function() {
      var t1, completer, filenames;
      t1 = {};
      completer = H.setRuntimeTypeInfo(new P._AsyncCompleter(P._Future$(null)), [null]);
      filenames = ["analyzer", "numbers", "level0", "level1", "level2", "level3", "level4", "level5", "level6", "level7", "level8", "level9", "borders", "mask", "cannon", "cannongun", "base", "collector", "reactor", "storage", "terp", "packet_collection", "packet_energy", "packet_health", "relay", "emitter", "creeper", "mortar", "shell", "beam", "spore", "bomber", "bombership", "smoke", "explosion", "targetcursor", "sporetower", "forcefield", "shield", "projectile"];
      t1.loadedImages_0 = 0;
      H.IterableMixinWorkaround_forEach(filenames, new U.Engine_loadImages_closure(t1, this, completer, filenames));
      return completer.future;
    },
    loadSounds$0: function() {
      H.IterableMixinWorkaround_forEach(["shot.wav", "click.wav", "explosion.wav", "failure.wav", "energy.wav", "laser.wav"], new U.Engine_loadSounds_closure(this));
    },
    playSound$2: function($name, position) {
      var t1, distance, volume, i;
      if (position != null) {
        t1 = $.game.scroll;
        distance = position.distanceTo$1(new U.Vector(t1.x, t1.y));
        t1 = $.game.zoom;
        volume = J.clamp$2$n(J.$div$n(t1, Math.pow(distance / 20, 2)), 0, 1);
      } else
        volume = 1;
      for (t1 = this.sounds, i = 0; i < 5; ++i)
        if (J.get$ended$x(J.$index$asx(t1.$index(t1, $name), i)) === true || J.get$currentTime$x(J.$index$asx(t1.$index(t1, $name), i)) === 0) {
          J.set$volume$x(J.$index$asx(t1.$index(t1, $name), i), volume);
          J.play$0$x(J.$index$asx(t1.$index(t1, $name), i));
          return;
        }
    },
    playSound$1: function(name) {
      return this.playSound$2(name, null);
    },
    randomInt$3: function(from, to, seed) {
      var random = seed == null ? C.C__JSRandom : P._Random$(seed);
      return random.nextInt$1(J.$add$ns(J.$sub$n(to, from), 1)) + from;
    },
    randomInt$2: function(from, to) {
      return this.randomInt$3(from, to, null);
    },
    Engine$0: function() {
      var t1, t2, t3, i, e;
      t1 = window.innerWidth;
      this.width = t1;
      this.height = window.innerHeight;
      if (typeof t1 !== "number")
        return t1.$div();
      this.halfWidth = C.JSNumber_methods.toInt$0(Math.floor(t1 / 2));
      this.halfHeight = J.floor$0$n(J.$div$n(this.height, 2));
      t1 = this.renderer;
      t1.$indexSet(t1, "main", U.Renderer$(W.CanvasElement_CanvasElement(null, null), this.width, this.height));
      t2 = J.get$children$x(document.querySelector("#canvasContainer"));
      t2.add$1(t2, J.get$view$x(t1.$index(t1, "main")));
      J.set$top$x(t1.$index(t1, "main"), J.get$offsetTop$x(J.get$view$x(t1.$index(t1, "main"))));
      J.set$left$x(t1.$index(t1, "main"), J.get$offsetLeft$x(J.get$view$x(t1.$index(t1, "main"))));
      t2 = t1.$index(t1, "main");
      t3 = J.get$offset$x(J.get$view$x(t1.$index(t1, "main")));
      J.set$right$x(t2, t3.get$right(t3));
      t3 = t1.$index(t1, "main");
      t2 = J.get$offset$x(J.get$view$x(t1.$index(t1, "main")));
      J.set$bottom$x(t3, t2.get$bottom(t2));
      J.set$zIndex$x(J.get$style$x(J.get$view$x(t1.$index(t1, "main"))), "1");
      t1.$indexSet(t1, "buffer", U.Renderer$(W.CanvasElement_CanvasElement(null, null), this.width, this.height));
      t1.$indexSet(t1, "gui", U.Renderer$(W.CanvasElement_CanvasElement(null, null), 780, 110));
      t2 = J.get$children$x(document.querySelector("#gui"));
      t2.add$1(t2, J.get$view$x(t1.$index(t1, "gui")));
      J.set$top$x(t1.$index(t1, "gui"), J.get$offsetTop$x(J.get$view$x(t1.$index(t1, "gui"))));
      J.set$left$x(t1.$index(t1, "gui"), J.get$offsetLeft$x(J.get$view$x(t1.$index(t1, "gui"))));
      for (i = 0; i < 10; ++i) {
        t2 = "level" + i;
        e = document.createElement("canvas", null);
        t1.$indexSet(t1, t2, U.Renderer$(e, 2048, 2048));
      }
      t1.$indexSet(t1, "levelbuffer", U.Renderer$(W.CanvasElement_CanvasElement(null, null), 2048, 2048));
      t1.$indexSet(t1, "levelfinal", U.Renderer$(W.CanvasElement_CanvasElement(null, null), this.width, this.height));
      t2 = J.get$children$x(document.querySelector("#canvasContainer"));
      t2.add$1(t2, J.get$view$x(t1.$index(t1, "levelfinal")));
      t1.$indexSet(t1, "collection", U.Renderer$(W.CanvasElement_CanvasElement(null, null), this.width, this.height));
      t2 = J.get$children$x(document.querySelector("#canvasContainer"));
      t2.add$1(t2, J.get$view$x(t1.$index(t1, "collection")));
      t1.$indexSet(t1, "creeperbuffer", U.Renderer$(W.CanvasElement_CanvasElement(null, null), this.width, this.height));
      t1.$indexSet(t1, "creeper", U.Renderer$(W.CanvasElement_CanvasElement(null, null), this.width, this.height));
      t2 = J.get$children$x(document.querySelector("#canvasContainer"));
      t2.add$1(t2, J.get$view$x(t1.$index(t1, "creeper")));
      this.loadSounds$0();
    },
    static: {Engine$: function() {
        var t1 = new U.Engine(null, 60, null, null, null, null, new U.Mouse(new U.Vector(0, 0), true, 0, null), P.LinkedHashMap_LinkedHashMap(null, null, null, null, null), P.LinkedHashMap_LinkedHashMap(null, null, null, null, null), P.LinkedHashMap_LinkedHashMap(null, null, null, null, null), null);
        t1.Engine$0();
        return t1;
      }}
  },
  Engine_setupEventHandler_closure: {
    "": "Closure:14;",
    call$1: function($event) {
      var t1 = $.game;
      if (t1.mode === "TERRAFORM") {
        t1.mode = "DEFAULT";
        document.querySelector("#terraform").setAttribute("value", "Terraform Off");
        t1.tfNumber.visible = false;
      } else {
        t1.mode = "TERRAFORM";
        document.querySelector("#terraform").setAttribute("value", "Terraform On");
        t1.tfNumber.visible = true;
      }
      return;
    }
  },
  Engine_setupEventHandler_closure0: {
    "": "Closure:14;",
    call$1: function($event) {
      return $.game.resume$0();
    }
  },
  Engine_setupEventHandler_closure1: {
    "": "Closure:14;",
    call$1: function($event) {
      return $.game.restart$0();
    }
  },
  Engine_setupEventHandler_closure2: {
    "": "Closure:14;",
    call$1: function($event) {
      return $.game.restart$0();
    }
  },
  Engine_setupEventHandler_closure3: {
    "": "Closure:14;",
    call$1: function($event) {
      return U.Building_deactivate();
    }
  },
  Engine_setupEventHandler_closure4: {
    "": "Closure:14;",
    call$1: function($event) {
      return U.Building_activate();
    }
  },
  Engine_setupEventHandler_closure5: {
    "": "Closure:14;",
    call$1: function($event) {
      var t1, t2, t3, t4, t5, t6, currentRect;
      t1 = $.engine;
      t2 = t1.mouse;
      t3 = t2.position;
      t4 = J.getInterceptor$x($event);
      t5 = t4.get$client($event);
      t5 = t5.get$x(t5);
      t6 = t1.renderer;
      t3.x = J.toInt$0$n(J.$sub$n(t5, J.get$left$x(J.getBoundingClientRect$0$x(J.get$view$x(t6.$index(t6, "main"))))));
      t5 = t2.position;
      t4 = t4.get$client($event);
      t5.y = J.toInt$0$n(J.$sub$n(t4.get$y(t4), J.get$top$x(J.getBoundingClientRect$0$x(J.get$view$x(t6.$index(t6, "main"))))));
      t3 = $.game;
      if (t3 != null) {
        t3.oldHoveredTile = t3.hoveredTile;
        t4 = J.$sub$n(t2.position.x, t1.halfWidth);
        t5 = $.game;
        t6 = t5.tileSize;
        t5 = t5.zoom;
        if (typeof t5 !== "number")
          return H.iae(t5);
        t5 = J.floor$0$n(J.$div$n(t4, t6 * t5));
        t6 = $.game.scroll.x;
        if (typeof t6 !== "number")
          return H.iae(t6);
        t1 = J.$sub$n(t2.position.y, t1.halfHeight);
        t2 = $.game;
        t4 = t2.tileSize;
        t2 = t2.zoom;
        if (typeof t2 !== "number")
          return H.iae(t2);
        t2 = J.floor$0$n(J.$div$n(t1, t4 * t2));
        t4 = $.game;
        t1 = t4.scroll.y;
        if (typeof t1 !== "number")
          return H.iae(t1);
        t3.hoveredTile = new U.Vector(t5 + t6, t2 + t1);
        t4.updateTerraformInfo$0();
      }
      t1 = $.game;
      if (t1 != null) {
        t1.mouseScrolling = new U.Vector(0, 0);
        if (J.$eq($.engine.mouse.position.x, 0))
          $.game.mouseScrolling.x = -1;
        else {
          t1 = $.engine;
          t2 = t1.mouse.position.x;
          t1 = t1.width;
          if (typeof t1 !== "number")
            return t1.$sub();
          if (J.$eq(t2, t1 - 1))
            $.game.mouseScrolling.x = 1;
        }
        if (J.$eq($.engine.mouse.position.y, 0))
          $.game.mouseScrolling.y = -1;
        else {
          t1 = $.engine;
          if (J.$eq(t1.mouse.position.y, J.$sub$n(t1.height, 1)))
            $.game.mouseScrolling.y = 1;
        }
      }
      if ($.engine.mouse.buttonPressed === 1) {
        t1 = $.game;
        if (t1.mode === "TERRAFORM") {
          t2 = t1.world;
          if (t2.contains$1(t2, t1.hoveredTile)) {
            t1 = $.game;
            t1 = J.$mul$n(t1.hoveredTile.x, t1.tileSize);
            t2 = $.game;
            t3 = $.game.tileSize - 1;
            currentRect = H.setRuntimeTypeInfo(new P.Rectangle(t1, J.$mul$n(t2.hoveredTile.y, t2.tileSize), t3, t3), [null]);
            if (!U.Building_collision(currentRect, null) && !U.Emitter_collision(currentRect) && !U.Sporetower_collision(currentRect)) {
              t1 = $.game;
              t2 = t1.world.tiles;
              t1 = t1.hoveredTile;
              t3 = t1.x;
              if (t3 >>> 0 !== t3 || t3 >= t2.length)
                return H.ioore(t2, t3);
              t1 = J.$index$asx(t2[t3], t1.y);
              t3 = $.game;
              t2 = t3.hoveredTile;
              t3 = t3.tileSize;
              t1.flagTerraform$1(new U.Vector(J.$mul$n(t2.x, t3), J.$mul$n(t2.y, t3)));
            }
          }
        }
      }
      return;
    }
  },
  Engine_setupEventHandler_closure6: {
    "": "Closure:14;",
    call$1: function($event) {
      U.Ship_select();
      return;
    }
  },
  Engine_setupEventHandler_closure7: {
    "": "Closure:14;",
    call$1: function($event) {
      var t1, t2, t3, currentRect;
      t1 = $.engine.mouse;
      t1.buttonPressed = J.get$which$x($event);
      if ($event.which === 1) {
        if (t1.dragStart == null)
          t1.dragStart = $.game.hoveredTile;
        t1 = $.game;
        if (t1.mode === "TERRAFORM") {
          t2 = t1.world;
          if (t2.contains$1(t2, t1.hoveredTile)) {
            t1 = $.game;
            t1 = J.$mul$n(t1.hoveredTile.x, t1.tileSize);
            t2 = $.game;
            t3 = $.game.tileSize - 1;
            currentRect = H.setRuntimeTypeInfo(new P.Rectangle(t1, J.$mul$n(t2.hoveredTile.y, t2.tileSize), t3, t3), [null]);
            if (!U.Building_collision(currentRect, null) && !U.Emitter_collision(currentRect) && !U.Sporetower_collision(currentRect)) {
              t1 = $.game;
              t2 = t1.world.tiles;
              t1 = t1.hoveredTile;
              t3 = t1.x;
              if (t3 >>> 0 !== t3 || t3 >= t2.length)
                return H.ioore(t2, t3);
              t1 = J.$index$asx(t2[t3], t1.y);
              t3 = $.game;
              t2 = t3.hoveredTile;
              t3 = t3.tileSize;
              t1.flagTerraform$1(new U.Vector(J.$mul$n(t2.x, t3), J.$mul$n(t2.y, t3)));
            }
          }
        }
      }
      return;
    }
  },
  Engine_setupEventHandler_closure8: {
    "": "Closure:14;",
    call$1: function($event) {
      return U.onMouseUp($event);
    }
  },
  Engine_setupEventHandler_closure9: {
    "": "Closure:14;",
    call$1: function($event) {
      var t1, t2;
      t1 = J.get$deltaY$x($event);
      if (typeof t1 !== "number")
        return t1.$gt();
      t2 = $.game;
      if (t1 > 0) {
        if (J.$gt$n(t2.zoom, 0.4)) {
          t1 = J.$sub$n(t2.zoom, 0.2);
          t2.zoom = t1;
          t2.zoom = H.Primitives_parseDouble(J.toStringAsFixed$1$n(t1, 2), null);
          t2.copyTerrain$0();
          t2.drawCollection$0();
          $.World_creeperDirty = true;
        }
      } else if (J.$lt$n(t2.zoom, 1.6)) {
        t1 = J.$add$ns(t2.zoom, 0.2);
        t2.zoom = t1;
        t2.zoom = H.Primitives_parseDouble(J.toStringAsFixed$1$n(t1, 2), null);
        t2.copyTerrain$0();
        t2.drawCollection$0();
        $.World_creeperDirty = true;
      }
      $event.preventDefault();
      return;
    }
  },
  Engine_setupEventHandler_closure10: {
    "": "Closure:14;",
    call$1: function($event) {
      U.UISymbol_checkHovered($event);
      return;
    }
  },
  Engine_setupEventHandler_closure11: {
    "": "Closure:14;",
    call$1: function($event) {
      U.Building_deselect();
      U.Ship_deselect();
      U.UISymbol_setActive();
      $.engine.playSound$1("click");
      return;
    }
  },
  Engine_setupEventHandler_closure12: {
    "": "Closure:14;",
    call$1: function($event) {
      var t1, t2, t3, t4, tilesToRedraw;
      U.UISymbol_select($event);
      t1 = J.getInterceptor$x($event);
      if (t1.get$keyCode($event) === 112) {
        t2 = $.game;
        t3 = t2.speed;
        if (t3 < 2) {
          t2.speed = t3 * 2;
          t2.updateSpeedElement$0();
        }
        t1.preventDefault$0($event);
      }
      if (t1.get$keyCode($event) === 113) {
        t2 = $.game;
        t3 = t2.speed;
        if (t3 > 1) {
          t2.speed = C.JSInt_methods._tdivFast$1(t3, 2);
          t2.updateSpeedElement$0();
        }
        t1.preventDefault$0($event);
      }
      if (t1.get$keyCode($event) === 46)
        U.Building_removeSelected();
      t2 = t1.get$keyCode($event);
      if (t2 === 19 || t2 === 9) {
        t2 = $.game;
        if (t2.paused)
          t2.resume$0();
        else {
          t2.toString;
          J.set$display$x(document.querySelector("#paused").style, "block");
          t2.paused = true;
          t2 = t2.stopwatch;
          t2.stop$0(t2);
        }
      }
      t2 = t1.get$keyCode($event);
      if (t2 === 27 || t2 === 32) {
        U.UISymbol_deselect();
        U.Building_deselect();
        U.Ship_deselect();
        t2 = $.engine.renderer;
        J.set$cursor$x(J.get$style$x(J.get$view$x(t2.$index(t2, "main"))), "url('images/Normal.cur') 2 2, pointer");
      }
      if (t1.get$keyCode($event) === 37)
        $.game.keyScrolling.x = -1;
      if (t1.get$keyCode($event) === 38)
        $.game.keyScrolling.y = -1;
      if (t1.get$keyCode($event) === 39)
        $.game.keyScrolling.x = 1;
      if (t1.get$keyCode($event) === 40)
        $.game.keyScrolling.y = 1;
      if (t1.get$keyCode($event) === 86) {
        t2 = $.game;
        t2 = J.$add$ns(J.$mul$n(t2.hoveredTile.x, t2.tileSize), 8);
        t3 = $.game;
        U.Explosion_add(new U.Vector(t2, J.$add$ns(J.$mul$n(t3.hoveredTile.y, t3.tileSize), 8)));
        $.engine.playSound$2("explosion", $.game.hoveredTile);
      }
      if (t1.get$keyCode($event) === 78) {
        t2 = $.game;
        t3 = t2.world.tiles;
        t2 = t2.hoveredTile;
        t4 = t2.x;
        if (t4 >>> 0 !== t4 || t4 >= t3.length)
          return H.ioore(t3, t4);
        t2 = J.get$height$x(J.$index$asx(t3[t4], t2.y));
        if (typeof t2 !== "number")
          return t2.$gt();
        if (t2 > -1) {
          t2 = $.game;
          t3 = t2.world.tiles;
          t2 = t2.hoveredTile;
          t4 = t2.x;
          if (t4 >>> 0 !== t4 || t4 >= t3.length)
            return H.ioore(t3, t4);
          t2 = J.$index$asx(t3[t4], t2.y);
          t4 = J.getInterceptor$x(t2);
          t4.set$height(t2, J.$sub$n(t4.get$height(t2), 1));
          tilesToRedraw = [];
          t2 = $.game.hoveredTile;
          tilesToRedraw.push(new U.Vector(t2.x, t2.y));
          tilesToRedraw.push(new U.Vector(J.$sub$n($.game.hoveredTile.x, 1), $.game.hoveredTile.y));
          t2 = $.game.hoveredTile;
          tilesToRedraw.push(new U.Vector(t2.x, J.$sub$n(t2.y, 1)));
          tilesToRedraw.push(new U.Vector(J.$add$ns($.game.hoveredTile.x, 1), $.game.hoveredTile.y));
          t2 = $.game.hoveredTile;
          tilesToRedraw.push(new U.Vector(t2.x, J.$add$ns(t2.y, 1)));
          $.game.redrawTerrain$1(tilesToRedraw);
        }
      }
      if (t1.get$keyCode($event) === 77) {
        t2 = $.game;
        t3 = t2.world.tiles;
        t2 = t2.hoveredTile;
        t4 = t2.x;
        if (t4 >>> 0 !== t4 || t4 >= t3.length)
          return H.ioore(t3, t4);
        t2 = J.get$height$x(J.$index$asx(t3[t4], t2.y));
        if (typeof t2 !== "number")
          return t2.$lt();
        if (t2 < 9) {
          t2 = $.game;
          t3 = t2.world.tiles;
          t2 = t2.hoveredTile;
          t4 = t2.x;
          if (t4 >>> 0 !== t4 || t4 >= t3.length)
            return H.ioore(t3, t4);
          t2 = J.$index$asx(t3[t4], t2.y);
          t4 = J.getInterceptor$x(t2);
          t4.set$height(t2, J.$add$ns(t4.get$height(t2), 1));
          tilesToRedraw = [];
          t2 = $.game.hoveredTile;
          tilesToRedraw.push(new U.Vector(t2.x, t2.y));
          tilesToRedraw.push(new U.Vector(J.$sub$n($.game.hoveredTile.x, 1), $.game.hoveredTile.y));
          t2 = $.game.hoveredTile;
          tilesToRedraw.push(new U.Vector(t2.x, J.$sub$n(t2.y, 1)));
          tilesToRedraw.push(new U.Vector(J.$add$ns($.game.hoveredTile.x, 1), $.game.hoveredTile.y));
          t2 = $.game.hoveredTile;
          tilesToRedraw.push(new U.Vector(t2.x, J.$add$ns(t2.y, 1)));
          $.game.redrawTerrain$1(tilesToRedraw);
        }
      }
      if (t1.get$keyCode($event) === 66) {
        t2 = $.game;
        t3 = t2.world.tiles;
        t2 = t2.hoveredTile;
        t4 = t2.x;
        if (t4 >>> 0 !== t4 || t4 >= t3.length)
          return H.ioore(t3, t4);
        J.set$height$x(J.$index$asx(t3[t4], t2.y), -1);
        tilesToRedraw = [];
        t2 = $.game.hoveredTile;
        tilesToRedraw.push(new U.Vector(t2.x, t2.y));
        tilesToRedraw.push(new U.Vector(J.$sub$n($.game.hoveredTile.x, 1), $.game.hoveredTile.y));
        t2 = $.game.hoveredTile;
        tilesToRedraw.push(new U.Vector(t2.x, J.$sub$n(t2.y, 1)));
        tilesToRedraw.push(new U.Vector(J.$add$ns($.game.hoveredTile.x, 1), $.game.hoveredTile.y));
        t2 = $.game.hoveredTile;
        tilesToRedraw.push(new U.Vector(t2.x, J.$add$ns(t2.y, 1)));
        $.game.redrawTerrain$1(tilesToRedraw);
      }
      if (t1.get$keyCode($event) === 88) {
        t2 = $.game;
        t3 = t2.world.tiles;
        t2 = t2.hoveredTile;
        t4 = t2.x;
        if (t4 >>> 0 !== t4 || t4 >= t3.length)
          return H.ioore(t3, t4);
        t2 = J.get$height$x(J.$index$asx(t3[t4], t2.y));
        if (typeof t2 !== "number")
          return t2.$gt();
        if (t2 > -1) {
          t2 = $.game;
          t3 = t2.world.tiles;
          t2 = t2.hoveredTile;
          t4 = t2.x;
          if (t4 >>> 0 !== t4 || t4 >= t3.length)
            return H.ioore(t3, t4);
          t2 = J.$index$asx(t3[t4], t2.y);
          t2.creep = t2.get$creep() + 1;
          $.World_creeperDirty = true;
        }
      }
      if (t1.get$keyCode($event) === 67) {
        t2 = $.game;
        t3 = t2.world.tiles;
        t2 = t2.hoveredTile;
        t4 = t2.x;
        if (t4 >>> 0 !== t4 || t4 >= t3.length)
          return H.ioore(t3, t4);
        if (J.$index$asx(t3[t4], t2.y).get$creep() > 0) {
          t2 = $.game;
          t3 = t2.world.tiles;
          t2 = t2.hoveredTile;
          t4 = t2.x;
          if (t4 >>> 0 !== t4 || t4 >= t3.length)
            return H.ioore(t3, t4);
          t2 = J.$index$asx(t3[t4], t2.y);
          t2.creep = t2.get$creep() - 1;
          t2 = $.game;
          t3 = t2.world.tiles;
          t2 = t2.hoveredTile;
          t4 = t2.x;
          if (t4 >>> 0 !== t4 || t4 >= t3.length)
            return H.ioore(t3, t4);
          if (J.$index$asx(t3[t4], t2.y).get$creep() < 0) {
            t2 = $.game;
            t3 = t2.world.tiles;
            t2 = t2.hoveredTile;
            t4 = t2.x;
            if (t4 >>> 0 !== t4 || t4 >= t3.length)
              return H.ioore(t3, t4);
            J.$index$asx(t3[t4], t2.y).set$creep(0);
          }
          $.World_creeperDirty = true;
        }
      }
      t2 = $.game;
      if (t2.mode === "TERRAFORM") {
        if (t1.get$keyCode($event) === 46) {
          t3 = t2.world.tiles;
          t2 = t2.hoveredTile;
          t4 = t2.x;
          if (t4 >>> 0 !== t4 || t4 >= t3.length)
            return H.ioore(t3, t4);
          J.$index$asx(t3[t4], t2.y).unflagTerraform$0();
        }
        t1 = t1.get$keyCode($event);
        if (typeof t1 !== "number")
          return t1.$ge();
        if (t1 >= 48 && t1 <= 57) {
          t2 = $.game;
          t1 -= 49;
          t2.terraformingHeight = t1;
          if (t1 === -1) {
            t2.terraformingHeight = 9;
            t1 = 9;
          }
          t2.tfNumber.frame = t1;
        }
      }
      return;
    }
  },
  Engine_setupEventHandler_closure13: {
    "": "Closure:14;",
    call$1: function($event) {
      var t1, t2;
      t1 = J.getInterceptor$x($event);
      t2 = t1.get$keyCode($event);
      if (t2 === 37 || t2 === 39)
        $.game.keyScrolling.x = 0;
      t1 = t1.get$keyCode($event);
      if (t1 === 38 || t1 === 40)
        $.game.keyScrolling.y = 0;
      return;
    }
  },
  Engine_setupEventHandler_closure14: {
    "": "Closure:14;",
    call$1: function($event) {
      return J.preventDefault$0$x($event);
    }
  },
  Engine_setupEventHandler_closure15: {
    "": "Closure:14;",
    call$1: function($event) {
      var t1 = $.engine.resizeTimer;
      if (t1 != null)
        t1.cancel$0();
      $.engine.resizeTimer = P.Timer_Timer(P.Duration$(0, 0, 0, 250, 0, 0), U.doneResizing$closure());
      return;
    }
  },
  Engine_loadImages_closure: {
    "": "Closure:14;box_0,this_1,completer_2,filenames_3",
    call$1: function(filename) {
      var t1, t2, e;
      t1 = this.this_1.images;
      t2 = C.JSString_methods.$add("images/", filename) + ".png";
      e = document.createElement("img", null);
      J.set$src$x(e, t2);
      t1.$indexSet(t1, filename, e);
      t1 = J.get$onLoad$x(t1.$index(t1, filename));
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new U.Engine_loadImages__closure(this.box_0, this.completer_2, this.filenames_3)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
    }
  },
  Engine_loadImages__closure: {
    "": "Closure:14;box_0,completer_4,filenames_5",
    call$1: function($event) {
      var t1, loadedImages;
      t1 = this.box_0;
      loadedImages = t1.loadedImages_0 + 1;
      t1.loadedImages_0 = loadedImages;
      if (loadedImages === 40) {
        t1 = this.completer_4.future;
        if (t1._state !== 0)
          H.throwExpression(P.StateError$("Future already completed"));
        t1._asyncComplete$1(null);
      }
    }
  },
  Engine_loadSounds_closure: {
    "": "Closure:14;this_0",
    call$1: function(filename) {
      var t1, $name, j;
      t1 = J.split$1$s(filename, ".");
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      $name = t1[0];
      t1 = this.this_0.sounds;
      t1.$indexSet(t1, $name, []);
      for (j = 0; j < 5; ++j)
        J.add$1$ax(t1.$index(t1, $name), W.AudioElement_AudioElement("sounds/" + filename));
    }
  },
  Explosion: {
    "": "Object;sprite",
    Explosion$1: function(position) {
      var t1 = $.engine.images;
      t1 = U.Sprite$(C.Layer_7, t1.$index(t1, "explosion"), position, 64, 64);
      this.sprite = t1;
      t1.animated = true;
      t1.rotation = $.engine.randomInt$2(0, 359);
      this.sprite.anchor = new U.Vector(0.5, 0.5);
      t1 = $.engine.renderer;
      t1.$index(t1, "buffer").addDisplayObject$1(this.sprite);
    },
    static: {"": "Explosion_counter,Explosion_explosions", Explosion_add: function(position) {
        var explosion = new U.Explosion(null);
        explosion.Explosion$1(position);
        $.get$Explosion_explosions().push(explosion);
        return explosion;
      }, Explosion_update: function() {
        var t1, i, t2, t3, t4;
        t1 = $.Explosion_counter + 1;
        $.Explosion_counter = t1;
        if (t1 >= 1) {
          $.Explosion_counter = t1 - 1;
          for (i = $.get$Explosion_explosions().length - 1; i >= 0; --i) {
            t1 = $.get$Explosion_explosions();
            t2 = t1.length;
            if (i >= t2)
              return H.ioore(t1, i);
            t3 = t1[i].sprite;
            t4 = t3.frame;
            if (t4 === 44) {
              t1 = $.engine.renderer;
              t1 = t1.$index(t1, "buffer");
              t2 = $.get$Explosion_explosions();
              if (i >= t2.length)
                return H.ioore(t2, i);
              t1.removeDisplayObject$1(t2[i].sprite);
              J.removeAt$1$ax($.get$Explosion_explosions(), i);
            } else {
              if (i >= t2)
                return H.ioore(t1, i);
              t3.frame = t4 + 1;
            }
          }
        }
      }}
  },
  Game: {
    "": "Object;tileSize,seed,terraformingHeight,speed,zoom,running,mode,paused,won,ghosts,world,scroll,mouseScrolling,keyScrolling,oldHoveredTile,hoveredTile,stopwatch,tfLine1,tfLine2,tfLine3,tfLine4,tfNumber,targetCursor",
    init$0: function() {
      var t1, music;
      J.set$innerHtml$x(document.querySelector("#seed"), "Seed: " + H.S(this.seed));
      t1 = new U.World(null, null);
      t1.World$1(this.seed);
      this.world = t1;
      this.reset$0(this);
      U.UISymbol_add(new U.Vector(0, 0), U.Building$template("cannon"), 81);
      U.UISymbol_add(new U.Vector(81, 0), U.Building$template("collector"), 87);
      U.UISymbol_add(new U.Vector(162, 0), U.Building$template("reactor"), 69);
      U.UISymbol_add(new U.Vector(243, 0), U.Building$template("storage"), 82);
      U.UISymbol_add(new U.Vector(324, 0), U.Building$template("shield"), 84);
      U.UISymbol_add(new U.Vector(405, 0), U.Building$template("analyzer"), 90);
      U.UISymbol_add(new U.Vector(0, 56), U.Building$template("relay"), 65);
      U.UISymbol_add(new U.Vector(81, 56), U.Building$template("mortar"), 83);
      U.UISymbol_add(new U.Vector(162, 56), U.Building$template("beam"), 68);
      U.UISymbol_add(new U.Vector(243, 56), U.Building$template("bomber"), 70);
      U.UISymbol_add(new U.Vector(324, 56), U.Building$template("terp"), 71);
      music = W.AudioElement_AudioElement("sounds/music.ogg");
      music.loop = true;
      music.volume = 0.25;
      t1 = C.EventStreamProvider_canplay.forElement$1(music);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new U.Game_init_closure(music)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      t1 = new U.Line("#fff", new U.Vector(0, 0), new U.Vector(0, 0), 1, null, true);
      t1.layer = C.Layer_0;
      this.tfLine1 = t1;
      t1.visible = false;
      t1 = $.engine.renderer;
      t1.$index(t1, "buffer").addDisplayObject$1(this.tfLine1);
      t1 = new U.Line("#fff", new U.Vector(0, 0), new U.Vector(0, 0), 1, null, true);
      t1.layer = C.Layer_0;
      this.tfLine2 = t1;
      t1.visible = false;
      t1 = $.engine.renderer;
      t1.$index(t1, "buffer").addDisplayObject$1(this.tfLine2);
      t1 = new U.Line("#fff", new U.Vector(0, 0), new U.Vector(0, 0), 1, null, true);
      t1.layer = C.Layer_0;
      this.tfLine3 = t1;
      t1.visible = false;
      t1 = $.engine.renderer;
      t1.$index(t1, "buffer").addDisplayObject$1(this.tfLine3);
      t1 = new U.Line("#fff", new U.Vector(0, 0), new U.Vector(0, 0), 1, null, true);
      t1.layer = C.Layer_0;
      this.tfLine4 = t1;
      t1.visible = false;
      t1 = $.engine.renderer;
      t1.$index(t1, "buffer").addDisplayObject$1(this.tfLine4);
      t1 = $.engine.images;
      t1 = U.Sprite$(C.Layer_0, t1.$index(t1, "numbers"), new U.Vector(0, 0), 16, 16);
      this.tfNumber = t1;
      t1.visible = false;
      t1.animated = true;
      t1.frame = this.terraformingHeight;
      t1 = $.engine.renderer;
      t1.$index(t1, "buffer").addDisplayObject$1(this.tfNumber);
      t1 = $.engine.images;
      t1 = U.Sprite$(C.Layer_0, t1.$index(t1, "targetcursor"), new U.Vector(0, 0), 48, 48);
      this.targetCursor = t1;
      t1.anchor = new U.Vector(0.5, 0.5);
      t1.visible = false;
      t1 = $.engine.renderer;
      t1.$index(t1, "buffer").addDisplayObject$1(this.targetCursor);
      this.drawTerrain$0();
      this.copyTerrain$0();
      $.engine.setupEventHandler$0();
      this.run$0();
    },
    reset$0: function(_) {
      var t1;
      J.set$length$asx($.get$Building_buildings(), 0);
      $.Building_damageCounter = 0;
      J.set$length$asx($.get$Packet_packets(), 0);
      J.set$length$asx($.get$Packet_queue(), 0);
      J.set$length$asx($.get$Shell_shells(), 0);
      J.set$length$asx($.get$Spore_spores(), 0);
      J.set$length$asx($.get$Ship_ships(), 0);
      J.set$length$asx($.get$Smoke_smokes(), 0);
      $.Smoke_counter = 0;
      J.set$length$asx($.get$Explosion_explosions(), 0);
      $.Explosion_counter = 0;
      J.set$length$asx($.get$Emitter_emitters(), 0);
      $.Emitter_counter = 0;
      J.set$length$asx($.get$Sporetower_sporetowers(), 0);
      J.set$length$asx($.get$Projectile_projectiles(), 0);
      U.UISymbol_reset();
      t1 = $.engine.renderer;
      t1.$index(t1, "buffer").removeAllDisplayObjects$0();
      this.mode = "DEFAULT";
      this.speed = 1;
      this.won = false;
      this.createWorld$0();
      this.drawCollection$0();
      t1 = this.stopwatch;
      t1.reset$0(t1);
      t1.start$0(t1);
      P.Timer_Timer$periodic(P.Duration$(0, 0, 0, 0, 0, 1), this.get$updateTime());
      J.set$display$x(document.querySelector("#win").style, "none");
      this.updateEnergyElement$0();
      this.updateSpeedElement$0();
      J.set$innerHtml$x(document.querySelector("#time"), "Time: 00:00");
    },
    updateTime$1: [function(_) {
      var s, m, minute, second;
      s = C.JSNumber_methods._tdivFast$1(C.JSNumber_methods._tdivFast$1($.game.stopwatch.get$elapsedTicks() * 1000, 1000000), 1000);
      if (s >= 60) {
        m = C.JSNumber_methods._tdivFast$1(s, 60);
        s = C.JSNumber_methods.$mod(s, 60);
      } else
        m = 0;
      minute = m <= 9 ? "0" + H.S(m) : H.S(m);
      second = s <= 9 ? "0" + H.S(s) : H.S(s);
      J.set$innerHtml$x(document.querySelector("#time"), "Time: " + minute + ":" + second);
    }, "call$1", "get$updateTime", 2, 0, 16],
    resume$0: function() {
      J.set$display$x(document.querySelector("#paused").style, "none");
      J.set$display$x(document.querySelector("#win").style, "none");
      this.paused = false;
      var t1 = this.stopwatch;
      t1.start$0(t1);
    },
    run$0: function() {
      var t1, t2, t3;
      this.running = P.Timer_Timer$periodic(P.Duration$(0, 0, 0, C.JSNumber_methods.toInt$0(Math.floor(1000 / $.engine.TPS)), 0, 0), new U.Game_run_closure(this));
      t1 = $.engine;
      t2 = window;
      t3 = this.get$draw();
      C.Window_methods._ensureRequestAnimationFrame$0(t2);
      t1.animationRequest = C.Window_methods._requestAnimationFrame$1(t2, W._wrapZone(t3));
    },
    restart$0: function() {
      J.set$display$x(document.querySelector("#lose").style, "none");
      this.running.cancel$0();
      this.reset$0(this);
      this.drawTerrain$0();
      this.copyTerrain$0();
      this.run$0();
    },
    createWorld$0: function() {
      var t1, t2, i, t3, j, heightmap, height, randomPosition, building, t4, t5, number, l, random, t6, emitter, sporetower;
      t1 = this.world;
      t2 = t1.size.x;
      if (typeof t2 !== "number")
        return H.iae(t2);
      t2 = Array(t2);
      t2.fixed$length = init;
      t1.tiles = t2;
      i = 0;
      while (true) {
        t2 = t1.size;
        t3 = t2.x;
        if (typeof t3 !== "number")
          return H.iae(t3);
        if (!(i < t3))
          break;
        t1 = t1.tiles;
        t2 = t2.y;
        if (typeof t2 !== "number")
          return H.iae(t2);
        t2 = Array(t2);
        t2.fixed$length = init;
        t2.$builtinTypeInfo = [U.Tile];
        if (i >= t1.length)
          return H.ioore(t1, i);
        t1[i] = t2;
        j = 0;
        while (true) {
          t1 = this.world;
          t2 = t1.size.y;
          if (typeof t2 !== "number")
            return H.iae(t2);
          if (!(j < t2))
            break;
          t1 = t1.tiles;
          if (i >= t1.length)
            return H.ioore(t1, i);
          t1 = t1[i];
          t2 = new U.Tile(null, null, null, null, null, null, null, null);
          t2.Tile$0();
          J.$indexSet$ax(t1, j, t2);
          ++j;
        }
        ++i;
      }
      t1 = this.seed;
      heightmap = new U.HeightMap(t1, 129, 0, 90, null, null, [], null);
      heightmap.HeightMap$4(t1, 129, 0, 90);
      heightmap.run$0();
      i = 0;
      while (true) {
        t1 = this.world.size.x;
        if (typeof t1 !== "number")
          return H.iae(t1);
        if (!(i < t1))
          break;
        j = 0;
        while (true) {
          t1 = this.world.size.y;
          if (typeof t1 !== "number")
            return H.iae(t1);
          if (!(j < t1))
            break;
          t1 = heightmap.map;
          if (i >= t1.length)
            return H.ioore(t1, i);
          t1 = t1[i];
          if (j >= t1.length)
            return H.ioore(t1, j);
          t1 = t1[j];
          if (typeof t1 !== "number")
            return t1.$div();
          height = C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(t1 / 10));
          if (height > 10)
            height = 10;
          t1 = this.world.tiles;
          if (i >= t1.length)
            return H.ioore(t1, i);
          J.set$height$x(J.$index$asx(t1[i], j), height);
          ++j;
        }
        ++i;
      }
      randomPosition = new U.Vector($.engine.randomInt$3(4, t1 - 5, this.seed + 1), $.engine.randomInt$3(4, J.$sub$n(this.world.size.y, 5), this.seed + 1));
      this.scroll = randomPosition;
      building = U.Building_add(randomPosition, "base");
      height = J.get$height$x(this.world.getTile$1(building.position));
      if (typeof height !== "number")
        return height.$lt();
      if (height < 0)
        height = 0;
      for (t1 = this.tileSize, i = -4; i <= 4; ++i)
        for (t2 = i * t1, j = -4; j <= 4; ++j) {
          t3 = this.world;
          t4 = building.position;
          t5 = J.$add$ns(t4.x, t2);
          t4 = J.$add$ns(t4.y, j * t1);
          t3 = t3.tiles;
          if (typeof t5 !== "number")
            return t5.$tdiv();
          t5 = C.JSNumber_methods._tdivFast$1(t5, 16);
          if (t5 >>> 0 !== t5 || t5 >= t3.length)
            return H.ioore(t3, t5);
          t5 = t3[t5];
          if (typeof t4 !== "number")
            return t4.$tdiv();
          J.set$height$x(J.$index$asx(t5, C.JSNumber_methods._tdivFast$1(t4, 16)), height);
        }
      number = $.engine.randomInt$3(2, 3, this.seed);
      for (l = 0; t2 = $.engine, l < number; ++l) {
        t3 = J.$sub$n(this.world.size.x, 2);
        t4 = this.seed;
        $.engine.toString;
        t5 = P._Random$(t4 + l).nextInt$1(1000);
        t2.toString;
        random = P._Random$(t4 + (t5 + 1));
        t2 = random.nextInt$1(J.$add$ns(J.$sub$n(t3, 1), 1));
        t3 = $.engine;
        t4 = J.$sub$n(this.world.size.y, 2);
        t5 = this.seed;
        $.engine.toString;
        t6 = P._Random$(t5 + 1 + l).nextInt$1(1000);
        t3.toString;
        random = P._Random$(t5 + (t6 + 1));
        emitter = new U.Emitter(null, 25, null);
        emitter.Emitter$2(new U.Vector((t2 + 1) * t1 + 8, (random.nextInt$1(J.$add$ns(J.$sub$n(t4, 1), 1)) + 1) * t1 + 8), 25);
        $.get$Emitter_emitters().push(emitter);
        t2 = this.world;
        t3 = emitter.sprite.position;
        t2 = t2.tiles;
        t4 = J.get$x$x(t3);
        if (typeof t4 !== "number")
          return t4.$tdiv();
        t4 = C.JSNumber_methods._tdivFast$1(t4, 16);
        if (t4 >>> 0 !== t4 || t4 >= t2.length)
          return H.ioore(t2, t4);
        t4 = t2[t4];
        t3 = t3.y;
        if (typeof t3 !== "number")
          return t3.$tdiv();
        height = J.get$height$x(J.$index$asx(t4, C.JSNumber_methods._tdivFast$1(t3, 16)));
        if (typeof height !== "number")
          return height.$lt();
        if (height < 0)
          height = 0;
        for (i = -1; i <= 1; ++i)
          for (t2 = i * t1, j = -1; j <= 1; ++j) {
            t3 = this.world;
            t4 = J.$add$ns(emitter.sprite.position, new U.Vector(t2, j * t1));
            t3 = t3.tiles;
            t5 = J.get$x$x(t4);
            if (typeof t5 !== "number")
              return t5.$tdiv();
            t5 = C.JSNumber_methods._tdivFast$1(t5, 16);
            if (t5 >>> 0 !== t5 || t5 >= t3.length)
              return H.ioore(t3, t5);
            t5 = t3[t5];
            t4 = t4.y;
            if (typeof t4 !== "number")
              return t4.$tdiv();
            J.set$height$x(J.$index$asx(t5, C.JSNumber_methods._tdivFast$1(t4, 16)), height);
          }
      }
      number = t2.randomInt$3(1, 2, this.seed + 1);
      for (l = 0; l < number; ++l) {
        t2 = $.engine;
        t3 = J.$sub$n(this.world.size.x, 2);
        t4 = this.seed;
        $.engine.toString;
        t5 = P._Random$(t4 + 2 + l).nextInt$1(1000);
        t2.toString;
        random = P._Random$(t4 + 3 + (t5 + 1));
        t2 = random.nextInt$1(J.$add$ns(J.$sub$n(t3, 1), 1));
        t3 = $.engine;
        t4 = J.$sub$n(this.world.size.y, 2);
        t5 = this.seed + 3;
        $.engine.toString;
        t6 = P._Random$(t5 + l).nextInt$1(1000);
        t3.toString;
        random = P._Random$(t5 + (t6 + 1));
        sporetower = new U.Sporetower(null, 0);
        sporetower.Sporetower$1(new U.Vector((t2 + 1) * t1 + 8, (random.nextInt$1(J.$add$ns(J.$sub$n(t4, 1), 1)) + 1) * t1 + 8));
        $.get$Sporetower_sporetowers().push(sporetower);
        t2 = this.world;
        t3 = sporetower.sprite.position;
        t2 = t2.tiles;
        t4 = J.get$x$x(t3);
        if (typeof t4 !== "number")
          return t4.$tdiv();
        t4 = C.JSNumber_methods._tdivFast$1(t4, 16);
        if (t4 >>> 0 !== t4 || t4 >= t2.length)
          return H.ioore(t2, t4);
        t4 = t2[t4];
        t3 = t3.y;
        if (typeof t3 !== "number")
          return t3.$tdiv();
        height = J.get$height$x(J.$index$asx(t4, C.JSNumber_methods._tdivFast$1(t3, 16)));
        if (typeof height !== "number")
          return height.$lt();
        if (height < 0)
          height = 0;
        for (i = -1; i <= 1; ++i)
          for (t2 = i * t1, j = -1; j <= 1; ++j) {
            t3 = this.world;
            t4 = J.$add$ns(sporetower.sprite.position, new U.Vector(t2, j * t1));
            t3 = t3.tiles;
            t5 = J.get$x$x(t4);
            if (typeof t5 !== "number")
              return t5.$tdiv();
            t5 = C.JSNumber_methods._tdivFast$1(t5, 16);
            if (t5 >>> 0 !== t5 || t5 >= t3.length)
              return H.ioore(t3, t5);
            t5 = t3[t5];
            t4 = t4.y;
            if (typeof t4 !== "number")
              return t4.$tdiv();
            J.set$height$x(J.$index$asx(t5, C.JSNumber_methods._tdivFast$1(t4, 16)), height);
          }
      }
    },
    drawTerrain$0: function() {
      var t1, t2, t3, i, t4, i0, t5, t6, j, t7, j0, t8, t9, indexAbove, k, t10, up, down, left, right, index, t11, pattern;
      t1 = this.tileSize;
      t2 = t1 + 6;
      t3 = t2 + 3;
      i = 0;
      while (true) {
        t4 = this.world.size.x;
        if (typeof t4 !== "number")
          return H.iae(t4);
        if (!(i < t4))
          break;
        t4 = i * t1;
        i0 = i + 1;
        t5 = i - 1;
        t6 = t5 < 0;
        j = 0;
        while (true) {
          t7 = this.world.size.y;
          if (typeof t7 !== "number")
            return H.iae(t7);
          if (!(j < t7))
            break;
          for (t7 = j * t1, j0 = j + 1, t8 = j - 1, t9 = t8 < 0, indexAbove = -1, k = 9; k > -1; --k) {
            t10 = this.world.tiles;
            if (i >= t10.length)
              return H.ioore(t10, i);
            t10 = J.get$height$x(J.$index$asx(t10[i], j));
            if (typeof t10 !== "number")
              return H.iae(t10);
            if (k <= t10) {
              if (t9)
                up = 0;
              else {
                t10 = this.world.tiles;
                if (i >= t10.length)
                  return H.ioore(t10, i);
                t10 = J.get$height$x(J.$index$asx(t10[i], t8));
                if (typeof t10 !== "number")
                  return t10.$ge();
                up = t10 >= k ? 1 : 0;
              }
              t10 = J.$sub$n(this.world.size.y, 1);
              if (typeof t10 !== "number")
                return H.iae(t10);
              if (j0 > t10)
                down = 0;
              else {
                t10 = this.world.tiles;
                if (i >= t10.length)
                  return H.ioore(t10, i);
                t10 = J.get$height$x(J.$index$asx(t10[i], j0));
                if (typeof t10 !== "number")
                  return t10.$ge();
                down = t10 >= k ? 1 : 0;
              }
              if (t6)
                left = 0;
              else {
                t10 = this.world.tiles;
                if (t5 >= t10.length)
                  return H.ioore(t10, t5);
                t10 = J.get$height$x(J.$index$asx(t10[t5], j));
                if (typeof t10 !== "number")
                  return t10.$ge();
                left = t10 >= k ? 1 : 0;
              }
              t10 = J.$sub$n(this.world.size.x, 1);
              if (typeof t10 !== "number")
                return H.iae(t10);
              if (i0 > t10)
                right = 0;
              else {
                t10 = this.world.tiles;
                if (i0 >= t10.length)
                  return H.ioore(t10, i0);
                t10 = J.get$height$x(J.$index$asx(t10[i0], j));
                if (typeof t10 !== "number")
                  return t10.$ge();
                right = t10 >= k ? 1 : 0;
              }
              index = 8 * down + 4 * left + 2 * up + right;
              t10 = this.world.tiles;
              if (i >= t10.length)
                return H.ioore(t10, i);
              if (k === J.get$height$x(J.$index$asx(t10[i], j))) {
                t10 = this.world.tiles;
                if (i >= t10.length)
                  return H.ioore(t10, i);
                J.set$index$x(J.$index$asx(t10[i], j), index);
              }
              if (k < 9) {
                if (index === indexAbove)
                  continue;
                if (indexAbove === 5 || indexAbove === 7 || indexAbove === 10 || indexAbove === 11 || indexAbove === 13 || indexAbove === 14 || indexAbove === 15)
                  continue;
              }
              t10 = $.engine.renderer;
              t10 = t10.$index(t10, "level" + k).get$context();
              t11 = $.engine.images;
              J.drawImageScaledFromSource$9$x(t10, t11.$index(t11, "mask"), index * t2 + 3, t3, t1, t1, t4, t7, t1, t1);
              indexAbove = index;
            }
          }
          j = j0;
        }
        i = i0;
      }
      for (i = 0; i < 10; ++i) {
        t3 = $.engine.renderer;
        t3 = t3.$index(t3, "level" + i).get$context();
        t4 = $.engine.images;
        pattern = J.createPatternFromImage$2$x(t3, t4.$index(t4, "level" + i), "repeat");
        t4 = $.engine.renderer;
        J.set$globalCompositeOperation$x(t4.$index(t4, "level" + i).get$context(), "source-in");
        t4 = $.engine.renderer;
        J.set$fillStyle$x(t4.$index(t4, "level" + i).get$context(), pattern);
        t4 = $.engine.renderer;
        t4 = t4.$index(t4, "level" + i).get$context();
        t3 = $.engine.renderer;
        t3 = J.get$width$x(J.get$view$x(t3.$index(t3, "level" + i)));
        t5 = $.engine.renderer;
        J.fillRect$4$x(t4, 0, 0, t3, J.get$height$x(J.get$view$x(t5.$index(t5, "level" + i))));
        t5 = $.engine.renderer;
        J.set$globalCompositeOperation$x(t5.$index(t5, "level" + i).get$context(), "source-over");
      }
      t3 = t1 + 2;
      i = 0;
      while (true) {
        t4 = this.world.size.x;
        if (typeof t4 !== "number")
          return H.iae(t4);
        if (!(i < t4))
          break;
        t4 = i * t1;
        i0 = i + 1;
        t5 = i - 1;
        t6 = t5 < 0;
        j = 0;
        while (true) {
          t7 = this.world.size.y;
          if (typeof t7 !== "number")
            return H.iae(t7);
          if (!(j < t7))
            break;
          for (t7 = j * t1, j0 = j + 1, t8 = j - 1, t9 = t8 < 0, indexAbove = -1, k = 9; k > -1; --k) {
            t10 = this.world.tiles;
            if (i >= t10.length)
              return H.ioore(t10, i);
            t10 = J.get$height$x(J.$index$asx(t10[i], j));
            if (typeof t10 !== "number")
              return H.iae(t10);
            if (k <= t10) {
              if (t9)
                up = 0;
              else {
                t10 = this.world.tiles;
                if (i >= t10.length)
                  return H.ioore(t10, i);
                t10 = J.get$height$x(J.$index$asx(t10[i], t8));
                if (typeof t10 !== "number")
                  return t10.$ge();
                up = t10 >= k ? 1 : 0;
              }
              t10 = J.$sub$n(this.world.size.y, 1);
              if (typeof t10 !== "number")
                return H.iae(t10);
              if (j0 > t10)
                down = 0;
              else {
                t10 = this.world.tiles;
                if (i >= t10.length)
                  return H.ioore(t10, i);
                t10 = J.get$height$x(J.$index$asx(t10[i], j0));
                if (typeof t10 !== "number")
                  return t10.$ge();
                down = t10 >= k ? 1 : 0;
              }
              if (t6)
                left = 0;
              else {
                t10 = this.world.tiles;
                if (t5 >= t10.length)
                  return H.ioore(t10, t5);
                t10 = J.get$height$x(J.$index$asx(t10[t5], j));
                if (typeof t10 !== "number")
                  return t10.$ge();
                left = t10 >= k ? 1 : 0;
              }
              t10 = J.$sub$n(this.world.size.x, 1);
              if (typeof t10 !== "number")
                return H.iae(t10);
              if (i0 > t10)
                right = 0;
              else {
                t10 = this.world.tiles;
                if (i0 >= t10.length)
                  return H.ioore(t10, i0);
                t10 = J.get$height$x(J.$index$asx(t10[i0], j));
                if (typeof t10 !== "number")
                  return t10.$ge();
                right = t10 >= k ? 1 : 0;
              }
              index = 8 * down + 4 * left + 2 * up + right;
              if (k < 9) {
                if (index === indexAbove)
                  continue;
                if (indexAbove === 5 || indexAbove === 7 || indexAbove === 10 || indexAbove === 11 || indexAbove === 13 || indexAbove === 14 || indexAbove === 15)
                  continue;
              }
              t10 = $.engine.renderer;
              t10 = t10.$index(t10, "level" + k).get$context();
              t11 = $.engine.images;
              J.drawImageScaledFromSource$9$x(t10, t11.$index(t11, "borders"), index * t2 + 2, 2, t3, t3, t4, t7, t3, t3);
              indexAbove = index;
            }
          }
          j = j0;
        }
        i = i0;
      }
      t1 = $.engine.renderer;
      J.clear$0$ax(t1.$index(t1, "levelbuffer"));
      for (k = 0; k < 10; ++k) {
        t1 = $.engine.renderer;
        t1 = t1.$index(t1, "levelbuffer").get$context();
        t2 = $.engine.renderer;
        J.drawImage$3$x(t1, J.get$view$x(t2.$index(t2, "level" + k)), 0, 0);
      }
      J.set$display$x(document.querySelector("#loading").style, "none");
    },
    copyTerrain$0: function() {
      var t1, t2, t3, t4, sourceLeft, sourceTop, targetLeft, targetTop, targetWidth, targetHeight, sourceWidth, sourceHeight, t5;
      t1 = $.engine.renderer;
      J.clear$0$ax(t1.$index(t1, "levelfinal"));
      t1 = this.tileSize;
      t2 = J.$mul$n(this.scroll.x, t1);
      t3 = $.engine.halfWidth;
      t4 = this.zoom;
      if (typeof t4 !== "number")
        return H.iae(t4);
      sourceLeft = J.$sub$n(t2, t3 / t4);
      t4 = J.$mul$n(this.scroll.y, t1);
      t3 = $.engine.halfHeight;
      t2 = this.zoom;
      if (typeof t2 !== "number")
        return H.iae(t2);
      sourceTop = J.$sub$n(t4, t3 / t2);
      if (typeof sourceLeft !== "number")
        return sourceLeft.$lt();
      if (sourceLeft < 0) {
        t2 = this.zoom;
        if (typeof t2 !== "number")
          return H.iae(t2);
        targetLeft = -sourceLeft * t2;
        sourceLeft = 0;
      } else
        targetLeft = 0;
      if (typeof sourceTop !== "number")
        return sourceTop.$lt();
      if (sourceTop < 0) {
        t2 = this.zoom;
        if (typeof t2 !== "number")
          return H.iae(t2);
        targetTop = -sourceTop * t2;
        sourceTop = 0;
      } else
        targetTop = 0;
      t2 = $.engine;
      targetWidth = t2.width;
      targetHeight = t2.height;
      t2 = this.zoom;
      if (typeof targetWidth !== "number")
        return targetWidth.$div();
      if (typeof t2 !== "number")
        return H.iae(t2);
      sourceWidth = targetWidth / t2;
      t3 = J.getInterceptor$n(targetHeight);
      sourceHeight = t3.$div(targetHeight, t2);
      t2 = sourceLeft + sourceWidth;
      t4 = J.$mul$n(this.world.size.x, t1);
      if (typeof t4 !== "number")
        return H.iae(t4);
      if (t2 > t4) {
        t4 = J.$mul$n(this.world.size.x, t1);
        if (typeof t4 !== "number")
          return H.iae(t4);
        t5 = this.zoom;
        if (typeof t5 !== "number")
          return H.iae(t5);
        targetWidth -= (t2 - t4) * t5;
        sourceWidth = J.$sub$n(J.$mul$n(this.world.size.x, t1), sourceLeft);
      }
      if (typeof sourceHeight !== "number")
        return H.iae(sourceHeight);
      t2 = sourceTop + sourceHeight;
      t4 = J.$mul$n(this.world.size.y, t1);
      if (typeof t4 !== "number")
        return H.iae(t4);
      if (t2 > t4) {
        t4 = J.$mul$n(this.world.size.y, t1);
        if (typeof t4 !== "number")
          return H.iae(t4);
        t5 = this.zoom;
        if (typeof t5 !== "number")
          return H.iae(t5);
        targetHeight = t3.$sub(targetHeight, (t2 - t4) * t5);
        sourceHeight = J.$sub$n(J.$mul$n(this.world.size.y, t1), sourceTop);
      }
      t1 = $.engine.renderer;
      t1 = t1.$index(t1, "levelfinal").get$context();
      t2 = $.engine.renderer;
      J.drawImageScaledFromSource$9$x(t1, J.get$view$x(t2.$index(t2, "levelbuffer")), sourceLeft, sourceTop, sourceWidth, sourceHeight, targetLeft, targetTop, targetWidth, targetHeight);
    },
    redrawTerrain$1: function(tiles) {
      var tempCanvas, tempContext, t1, t, e, t2, t3, t4, i, t5, iS, jS, index, indexAbove, t6, up, t7, down, left, right, t8, t9, pattern;
      tempCanvas = [];
      tempContext = [];
      for (t1 = this.tileSize, t = 0; t < 10; ++t) {
        e = document.createElement("canvas", null);
        tempCanvas.push(e);
        if (t >= tempCanvas.length)
          return H.ioore(tempCanvas, t);
        t2 = tempCanvas[t];
        t3 = J.getInterceptor$x(t2);
        t3.set$width(t2, t1);
        if (t >= tempCanvas.length)
          return H.ioore(tempCanvas, t);
        t3.set$height(t2, t1);
        if (t >= tempCanvas.length)
          return H.ioore(tempCanvas, t);
        tempContext.push(t3.getContext$1(t2, "2d"));
      }
      for (t2 = t1 + 6, t3 = t1 + 2, t4 = t2 + 3, i = 0; i < tiles.length; ++i) {
        t5 = tiles[i];
        iS = t5.get$x(t5);
        jS = t5.get$y(t5);
        t5 = this.world;
        if (t5.contains$1(t5, new U.Vector(iS, jS))) {
          for (t5 = J.getInterceptor$ns(jS), index = -1, indexAbove = -1, t = 9; t > -1; --t) {
            t6 = this.world.tiles;
            if (iS >>> 0 !== iS || iS >= t6.length)
              return H.ioore(t6, iS);
            t6 = J.get$height$x(J.$index$asx(t6[iS], jS));
            if (typeof t6 !== "number")
              return H.iae(t6);
            if (t <= t6) {
              t6 = t5.$sub(jS, 1);
              if (typeof t6 !== "number")
                return t6.$lt();
              if (t6 < 0)
                up = 0;
              else {
                t6 = this.world.tiles;
                if (iS >= t6.length)
                  return H.ioore(t6, iS);
                t6 = J.get$height$x(J.$index$asx(t6[iS], t5.$sub(jS, 1)));
                if (typeof t6 !== "number")
                  return t6.$ge();
                up = t6 >= t ? 1 : 0;
              }
              t6 = t5.$add(jS, 1);
              t7 = J.$sub$n(this.world.size.y, 1);
              if (typeof t6 !== "number")
                return t6.$gt();
              if (typeof t7 !== "number")
                return H.iae(t7);
              if (t6 > t7)
                down = 0;
              else {
                t6 = this.world.tiles;
                if (iS >= t6.length)
                  return H.ioore(t6, iS);
                t6 = J.get$height$x(J.$index$asx(t6[iS], t5.$add(jS, 1)));
                if (typeof t6 !== "number")
                  return t6.$ge();
                down = t6 >= t ? 1 : 0;
              }
              t6 = iS - 1;
              if (t6 < 0)
                left = 0;
              else {
                t7 = this.world.tiles;
                if (t6 >= t7.length)
                  return H.ioore(t7, t6);
                t6 = J.get$height$x(J.$index$asx(t7[t6], jS));
                if (typeof t6 !== "number")
                  return t6.$ge();
                left = t6 >= t ? 1 : 0;
              }
              t6 = iS + 1;
              t7 = J.$sub$n(this.world.size.x, 1);
              if (typeof t7 !== "number")
                return H.iae(t7);
              if (t6 > t7)
                right = 0;
              else {
                t7 = this.world.tiles;
                if (t6 >= t7.length)
                  return H.ioore(t7, t6);
                t6 = J.get$height$x(J.$index$asx(t7[t6], jS));
                if (typeof t6 !== "number")
                  return t6.$ge();
                right = t6 >= t ? 1 : 0;
              }
              index = 8 * down + 4 * left + 2 * up + right;
            }
            if (t >= tempContext.length)
              return H.ioore(tempContext, t);
            J.clearRect$4$x(tempContext[t], 0, 0, t1, t1);
            t6 = t < 9;
            if (t6) {
              if (index === indexAbove)
                continue;
              if (indexAbove === 5 || indexAbove === 7 || indexAbove === 10 || indexAbove === 11 || indexAbove === 13 || indexAbove === 14 || indexAbove === 15)
                continue;
            }
            if (t >= tempContext.length)
              return H.ioore(tempContext, t);
            t7 = tempContext[t];
            t8 = $.engine.images;
            t9 = index * t2;
            J.drawImageScaledFromSource$9$x(t7, t8.$index(t8, "mask"), t9 + 3, t4, t1, t1, 0, 0, t1, t1);
            if (t >= tempContext.length)
              return H.ioore(tempContext, t);
            t8 = tempContext[t];
            t7 = $.engine.images;
            pattern = J.createPatternFromImage$2$x(t8, t7.$index(t7, "level" + t), "repeat");
            if (t >= tempContext.length)
              return H.ioore(tempContext, t);
            t7 = tempContext[t];
            J.set$globalCompositeOperation$x(t7, "source-in");
            if (t >= tempContext.length)
              return H.ioore(tempContext, t);
            t7.fillStyle = pattern;
            if (t >= tempContext.length)
              return H.ioore(tempContext, t);
            t7.save();
            t7 = C.JSInt_methods.floor$0(iS * t1);
            t8 = J.floor$0$n(t5.$mul(jS, t1));
            if (t >= tempContext.length)
              return H.ioore(tempContext, t);
            J.translate$2$x(tempContext[t], -t7, -t8);
            if (t >= tempContext.length)
              return H.ioore(tempContext, t);
            J.fillRect$4$x(tempContext[t], t7, t8, t1, t1);
            if (t >= tempContext.length)
              return H.ioore(tempContext, t);
            J.restore$0$x(tempContext[t]);
            if (t >= tempContext.length)
              return H.ioore(tempContext, t);
            t8 = tempContext[t];
            J.set$globalCompositeOperation$x(t8, "source-over");
            if (t6) {
              if (index === indexAbove)
                continue;
              if (indexAbove === 5 || indexAbove === 7 || indexAbove === 10 || indexAbove === 11 || indexAbove === 13 || indexAbove === 14 || indexAbove === 15)
                continue;
            }
            if (t >= tempContext.length)
              return H.ioore(tempContext, t);
            t6 = $.engine.images;
            t8.drawImage(t6.$index(t6, "borders"), t9 + 2, 2, t3, t3, 0, 0, t3, t3);
            indexAbove = index;
          }
          t6 = $.engine.renderer;
          t7 = J.getInterceptor$n(iS);
          J.clearRect$4$x(t6.$index(t6, "levelbuffer").get$context(), t7.$mul(iS, t1), t5.$mul(jS, t1), t1, t1);
          for (t = 0; t < 10; ++t) {
            t6 = $.engine.renderer;
            t6 = t6.$index(t6, "levelbuffer").get$context();
            if (t >= tempCanvas.length)
              return H.ioore(tempCanvas, t);
            J.drawImageScaledFromSource$9$x(t6, tempCanvas[t], 0, 0, t1, t1, t7.$mul(iS, t1), t5.$mul(jS, t1), t1, t1);
          }
        }
      }
      this.copyTerrain$0();
    },
    canBePlaced$2: function(position, building) {
      var t1, t2, height, currentRect, t3, i, j, tileHeight;
      t1 = $.game.world;
      if (t1.contains$1(t1, position)) {
        t1 = $.game.world.tiles;
        t2 = position.x;
        if (t2 >>> 0 !== t2 || t2 >= t1.length)
          return H.ioore(t1, t2);
        height = J.get$height$x(J.$index$asx(t1[t2], position.y));
        t2 = this.tileSize;
        t1 = J.getInterceptor$x(building);
        currentRect = new P.Rectangle(J.$sub$n(J.$add$ns(J.$mul$n(position.x, t2), 8), J.$div$n(J.$mul$n(t1.get$size(building), t2), 2)), J.$sub$n(J.$add$ns(J.$mul$n(position.y, t2), 8), J.$div$n(J.$mul$n(t1.get$size(building), t2), 2)), J.$sub$n(J.$mul$n(t1.get$size(building), t2), 1), J.$sub$n(J.$mul$n(t1.get$size(building), t2), 1));
        currentRect.$builtinTypeInfo = [null];
        if (U.Building_collision(currentRect, building) || U.Emitter_collision(currentRect) || U.Sporetower_collision(currentRect))
          return false;
        t2 = position.x;
        t3 = t1.get$size(building);
        if (typeof t3 !== "number")
          return t3.$tdiv();
        i = J.$sub$n(t2, C.JSInt_methods._tdivFast$1(t3, 2));
        while (true) {
          t2 = position.x;
          t3 = t1.get$size(building);
          if (typeof t3 !== "number")
            return t3.$tdiv();
          t3 = J.$add$ns(t2, C.JSInt_methods._tdivFast$1(t3, 2));
          if (typeof i !== "number")
            return i.$le();
          if (typeof t3 !== "number")
            return H.iae(t3);
          if (!(i <= t3))
            break;
          t2 = position.y;
          t3 = t1.get$size(building);
          if (typeof t3 !== "number")
            return t3.$tdiv();
          j = J.$sub$n(t2, C.JSInt_methods._tdivFast$1(t3, 2));
          while (true) {
            t2 = position.y;
            t3 = t1.get$size(building);
            if (typeof t3 !== "number")
              return t3.$tdiv();
            t3 = J.$add$ns(t2, C.JSInt_methods._tdivFast$1(t3, 2));
            if (typeof j !== "number")
              return j.$le();
            if (typeof t3 !== "number")
              return H.iae(t3);
            if (!(j <= t3))
              break;
            t2 = this.world;
            if (t2.contains$1(t2, new U.Vector(i, j))) {
              t2 = $.game.world.tiles;
              if (i >>> 0 !== i || i >= t2.length)
                return H.ioore(t2, i);
              tileHeight = J.get$height$x(J.$index$asx(t2[i], j));
              if (typeof tileHeight !== "number")
                return tileHeight.$lt();
              if (tileHeight < 0 || tileHeight !== height)
                return false;
              t2 = this.world.tiles;
              if (i >= t2.length)
                return H.ioore(t2, i);
              if (J.get$index$x(J.$index$asx(t2[i], j)) !== 7) {
                t2 = this.world.tiles;
                if (i >= t2.length)
                  return H.ioore(t2, i);
                if (J.get$index$x(J.$index$asx(t2[i], j)) !== 11) {
                  t2 = this.world.tiles;
                  if (i >= t2.length)
                    return H.ioore(t2, i);
                  if (J.get$index$x(J.$index$asx(t2[i], j)) !== 13) {
                    t2 = this.world.tiles;
                    if (i >= t2.length)
                      return H.ioore(t2, i);
                    if (J.get$index$x(J.$index$asx(t2[i], j)) !== 14) {
                      t2 = this.world.tiles;
                      if (i >= t2.length)
                        return H.ioore(t2, i);
                      t2 = J.get$index$x(J.$index$asx(t2[i], j)) === 15;
                    } else
                      t2 = true;
                  } else
                    t2 = true;
                } else
                  t2 = true;
              } else
                t2 = true;
              if (!t2)
                return false;
            } else
              return false;
            ++j;
          }
          ++i;
        }
        return true;
      } else
        return false;
    },
    updateEnergyElement$0: function() {
      if ($.Building_base != null)
        J.set$innerHtml$x(document.querySelector("#energy"), "Energy: " + C.JSNumber_methods.toString$0($.Building_base.energy) + "/" + C.JSInt_methods.toString$0($.Building_base.maxEnergy));
    },
    updateSpeedElement$0: function() {
      J.set$innerHtml$x(document.querySelector("#speed"), "Speed: " + C.JSInt_methods.toString$0(this.speed) + "x");
    },
    drawRangeBoxes$2: function(position, building) {
      var t1, context, t2, positionCenter, t3, t4, positionHeight, i, j, positionCurrent, drawPositionCurrent, t5, t6, positionCurrentHeight;
      t1 = $.engine.renderer;
      context = t1.$index(t1, "buffer").get$context();
      if (this.canBePlaced$2(position, building)) {
        t1 = J.get$type$x(building);
        t1 = t1 === "collector" || t1 === "cannon" || t1 === "mortar" || t1 === "shield" || t1 === "beam" || t1 === "terp" || t1 === "analyzer";
      } else
        t1 = false;
      if (t1) {
        t1 = this.tileSize;
        t2 = t1 / 2;
        positionCenter = new U.Vector(J.$add$ns(J.$mul$n(position.x, t1), t2), J.$add$ns(J.$mul$n(position.y, t1), t2));
        t3 = $.game.world.tiles;
        t4 = position.x;
        if (t4 >>> 0 !== t4 || t4 >= t3.length)
          return H.ioore(t3, t4);
        positionHeight = J.get$height$x(J.$index$asx(t3[t4], position.y));
        J.save$0$x(context);
        context.globalAlpha = 0.35;
        for (i = -building.get$weaponRadius(); t3 = building.weaponRadius, i <= t3; ++i)
          for (j = -t3; j <= building.weaponRadius; ++j) {
            positionCurrent = new U.Vector(J.$add$ns(position.x, i), J.$add$ns(position.y, j));
            t3 = this.world;
            if (t3.contains$1(t3, positionCurrent)) {
              t3 = J.$add$ns(J.$mul$n(positionCurrent.x, t1), t2);
              t4 = J.$add$ns(J.$mul$n(positionCurrent.y, t1), t2);
              drawPositionCurrent = positionCurrent.tiled2screen$0();
              t5 = $.game.world.tiles;
              t6 = positionCurrent.x;
              if (t6 >>> 0 !== t6 || t6 >= t5.length)
                return H.ioore(t5, t6);
              positionCurrentHeight = J.get$height$x(J.$index$asx(t5[t6], positionCurrent.y));
              t3 = J.$sub$n(positionCenter.x, t3);
              if (typeof t3 !== "number")
                H.throwExpression(new P.ArgumentError(t3));
              t3 = Math.pow(t3, 2);
              t4 = J.$sub$n(positionCenter.y, t4);
              if (typeof t4 !== "number")
                H.throwExpression(new P.ArgumentError(t4));
              t4 = Math.pow(t4, 2);
              if (Math.sqrt(t3 + t4) < building.weaponRadius * t1) {
                context.fillStyle = "#fff";
                if (!(building.type === "collector" && !J.$eq(positionCurrentHeight, positionHeight)))
                  if (building.type === "cannon") {
                    if (typeof positionCurrentHeight !== "number")
                      return positionCurrentHeight.$gt();
                    if (typeof positionHeight !== "number")
                      return H.iae(positionHeight);
                    t3 = positionCurrentHeight > positionHeight;
                  } else
                    t3 = false;
                else
                  t3 = true;
                if (t3)
                  context.fillStyle = "#f00";
                t3 = drawPositionCurrent.x;
                t4 = drawPositionCurrent.y;
                t5 = this.zoom;
                if (typeof t5 !== "number")
                  return H.iae(t5);
                t5 = t1 * t5;
                context.fillRect(t3, t4, t5, t5);
              }
            }
          }
        context.restore();
      }
    },
    drawCollection$0: function() {
      var t1, t2, t3, timesX, timesY, i, j, t4, j0, t5, t6, position, up, down, left, right, t7, t8, t9, t10;
      t1 = $.engine.renderer;
      J.clear$0$ax(t1.$index(t1, "collection"));
      t1 = $.engine.renderer;
      J.save$0$x(t1.$index(t1, "collection").get$context());
      t1 = $.engine.renderer;
      J.set$globalAlpha$x(t1.$index(t1, "collection").get$context(), 0.5);
      t1 = $.engine.halfWidth;
      t2 = this.tileSize;
      t3 = this.zoom;
      if (typeof t3 !== "number")
        return H.iae(t3);
      timesX = C.JSNumber_methods.toInt$0(Math.ceil(t1 / t2 / t3));
      t3 = $.engine.halfHeight;
      t1 = this.zoom;
      if (typeof t1 !== "number")
        return H.iae(t1);
      timesY = C.JSNumber_methods.toInt$0(Math.ceil(t3 / t2 / t1));
      for (i = -timesX, j = -timesY, t1 = t2 + 6, t3 = t1 + 3; i <= timesX; ++i)
        for (t4 = i * t2, j0 = j; j0 <= timesY; ++j0) {
          t5 = this.scroll;
          t6 = t5.x;
          if (typeof t6 !== "number")
            return H.iae(t6);
          t5 = t5.y;
          if (typeof t5 !== "number")
            return H.iae(t5);
          position = new U.Vector(i + t6, j0 + t5);
          t5 = this.world;
          if (t5.contains$1(t5, position)) {
            t5 = this.world.tiles;
            t6 = position.x;
            if (t6 >>> 0 !== t6 || t6 >= t5.length)
              return H.ioore(t5, t6);
            if (J.$index$asx(t5[t6], position.y).get$collector() != null) {
              t5 = J.$sub$n(position.y, 1);
              if (typeof t5 !== "number")
                return t5.$lt();
              if (t5 < 0)
                up = 0;
              else {
                t5 = this.world.tiles;
                t6 = position.x;
                if (t6 >>> 0 !== t6 || t6 >= t5.length)
                  return H.ioore(t5, t6);
                up = J.$index$asx(t5[t6], J.$sub$n(position.y, 1)).get$collector() != null ? 1 : 0;
              }
              t5 = J.$add$ns(position.y, 1);
              t6 = J.$sub$n(this.world.size.y, 1);
              if (typeof t5 !== "number")
                return t5.$gt();
              if (typeof t6 !== "number")
                return H.iae(t6);
              if (t5 > t6)
                down = 0;
              else {
                t5 = this.world.tiles;
                t6 = position.x;
                if (t6 >>> 0 !== t6 || t6 >= t5.length)
                  return H.ioore(t5, t6);
                down = J.$index$asx(t5[t6], J.$add$ns(position.y, 1)).get$collector() != null ? 1 : 0;
              }
              t5 = J.$sub$n(position.x, 1);
              if (typeof t5 !== "number")
                return t5.$lt();
              if (t5 < 0)
                left = 0;
              else {
                t5 = this.world.tiles;
                t6 = J.$sub$n(position.x, 1);
                if (t6 >>> 0 !== t6 || t6 >= t5.length)
                  return H.ioore(t5, t6);
                left = J.$index$asx(t5[t6], position.y).get$collector() != null ? 1 : 0;
              }
              t5 = J.$add$ns(position.x, 1);
              t6 = J.$sub$n(this.world.size.x, 1);
              if (typeof t5 !== "number")
                return t5.$gt();
              if (typeof t6 !== "number")
                return H.iae(t6);
              if (t5 > t6)
                right = 0;
              else {
                t5 = this.world.tiles;
                t6 = J.$add$ns(position.x, 1);
                if (t6 >>> 0 !== t6 || t6 >= t5.length)
                  return H.ioore(t5, t6);
                right = J.$index$asx(t5[t6], position.y).get$collector() != null ? 1 : 0;
              }
              t5 = $.engine.renderer;
              t5 = t5.$index(t5, "collection").get$context();
              t6 = $.engine.images;
              t6 = t6.$index(t6, "mask");
              t7 = $.engine;
              t8 = t7.halfWidth;
              t9 = this.zoom;
              if (typeof t9 !== "number")
                return H.iae(t9);
              t10 = t2 * t9;
              J.drawImageScaledFromSource$9$x(t5, t6, (8 * down + 4 * left + 2 * up + right) * t1 + 3, t3, t2, t2, t8 + t4 * t9, t7.halfHeight + j0 * t2 * t9, t10, t10);
            }
          }
        }
      t1 = $.engine.renderer;
      J.restore$0$x(t1.$index(t1, "collection").get$context());
    },
    drawCreeper$0: function() {
      var t1, t2, t3, timesX, timesY, i, j, j0, t4, position, height, t, t5, up, down, left, right, t6, t7, t8, t9, ind, indexOk, index;
      t1 = $.engine.renderer;
      J.clear$0$ax(t1.$index(t1, "creeperbuffer"));
      t1 = $.engine.halfWidth;
      t2 = this.tileSize;
      t3 = this.zoom;
      if (typeof t3 !== "number")
        return H.iae(t3);
      timesX = C.JSNumber_methods.toInt$0(Math.ceil(t1 / t2 / t3));
      t3 = $.engine.halfHeight;
      t1 = this.zoom;
      if (typeof t1 !== "number")
        return H.iae(t1);
      timesY = C.JSNumber_methods.toInt$0(Math.ceil(t3 / t2 / t1));
      for (i = -timesX, j = -timesY; i <= timesX; ++i)
        for (t1 = i * t2, j0 = j; j0 <= timesY; ++j0) {
          t3 = this.scroll;
          t4 = t3.x;
          if (typeof t4 !== "number")
            return H.iae(t4);
          t3 = t3.y;
          if (typeof t3 !== "number")
            return H.iae(t3);
          position = new U.Vector(i + t4, j0 + t3);
          t3 = this.world;
          if (t3.contains$1(t3, position)) {
            t3 = this.world.tiles;
            t4 = position.x;
            if (t4 >>> 0 !== t4 || t4 >= t3.length)
              return H.ioore(t3, t4);
            height = J.get$height$x(J.$index$asx(t3[t4], position.y));
            for (t3 = j0 * t2, t = 0; t <= 9; ++t) {
              t4 = this.world.tiles;
              t5 = position.x;
              if (t5 >>> 0 !== t5 || t5 >= t4.length)
                return H.ioore(t4, t5);
              if (J.$index$asx(t4[t5], position.y).get$creep() > t) {
                t4 = J.$sub$n(position.y, 1);
                if (typeof t4 !== "number")
                  return t4.$lt();
                if (t4 < 0)
                  up = 0;
                else {
                  t4 = this.world.tiles;
                  t5 = position.x;
                  if (t5 >>> 0 !== t5 || t5 >= t4.length)
                    return H.ioore(t4, t5);
                  if (!(J.$index$asx(t4[t5], J.$sub$n(position.y, 1)).get$creep() > t)) {
                    t4 = this.world.tiles;
                    t5 = position.x;
                    if (t5 >>> 0 !== t5 || t5 >= t4.length)
                      return H.ioore(t4, t5);
                    t5 = J.get$height$x(J.$index$asx(t4[t5], J.$sub$n(position.y, 1)));
                    if (typeof t5 !== "number")
                      return t5.$gt();
                    if (typeof height !== "number")
                      return H.iae(height);
                    t5 = t5 > height;
                    t4 = t5;
                  } else
                    t4 = true;
                  up = t4 ? 1 : 0;
                }
                t4 = J.$add$ns(position.y, 1);
                t5 = J.$sub$n(this.world.size.y, 1);
                if (typeof t4 !== "number")
                  return t4.$gt();
                if (typeof t5 !== "number")
                  return H.iae(t5);
                if (t4 > t5)
                  down = 0;
                else {
                  t4 = this.world.tiles;
                  t5 = position.x;
                  if (t5 >>> 0 !== t5 || t5 >= t4.length)
                    return H.ioore(t4, t5);
                  if (!(J.$index$asx(t4[t5], J.$add$ns(position.y, 1)).get$creep() > t)) {
                    t4 = this.world.tiles;
                    t5 = position.x;
                    if (t5 >>> 0 !== t5 || t5 >= t4.length)
                      return H.ioore(t4, t5);
                    t5 = J.get$height$x(J.$index$asx(t4[t5], J.$add$ns(position.y, 1)));
                    if (typeof t5 !== "number")
                      return t5.$gt();
                    if (typeof height !== "number")
                      return H.iae(height);
                    t5 = t5 > height;
                    t4 = t5;
                  } else
                    t4 = true;
                  down = t4 ? 1 : 0;
                }
                t4 = J.$sub$n(position.x, 1);
                if (typeof t4 !== "number")
                  return t4.$lt();
                if (t4 < 0)
                  left = 0;
                else {
                  t4 = this.world.tiles;
                  t5 = J.$sub$n(position.x, 1);
                  if (t5 >>> 0 !== t5 || t5 >= t4.length)
                    return H.ioore(t4, t5);
                  if (!(J.$index$asx(t4[t5], position.y).get$creep() > t)) {
                    t4 = this.world.tiles;
                    t5 = J.$sub$n(position.x, 1);
                    if (t5 >>> 0 !== t5 || t5 >= t4.length)
                      return H.ioore(t4, t5);
                    t5 = J.get$height$x(J.$index$asx(t4[t5], position.y));
                    if (typeof t5 !== "number")
                      return t5.$gt();
                    if (typeof height !== "number")
                      return H.iae(height);
                    t5 = t5 > height;
                    t4 = t5;
                  } else
                    t4 = true;
                  left = t4 ? 1 : 0;
                }
                t4 = J.$add$ns(position.x, 1);
                t5 = J.$sub$n(this.world.size.x, 1);
                if (typeof t4 !== "number")
                  return t4.$gt();
                if (typeof t5 !== "number")
                  return H.iae(t5);
                if (t4 > t5)
                  right = 0;
                else {
                  t4 = this.world.tiles;
                  t5 = J.$add$ns(position.x, 1);
                  if (t5 >>> 0 !== t5 || t5 >= t4.length)
                    return H.ioore(t4, t5);
                  if (!(J.$index$asx(t4[t5], position.y).get$creep() > t)) {
                    t4 = this.world.tiles;
                    t5 = J.$add$ns(position.x, 1);
                    if (t5 >>> 0 !== t5 || t5 >= t4.length)
                      return H.ioore(t4, t5);
                    t5 = J.get$height$x(J.$index$asx(t4[t5], position.y));
                    if (typeof t5 !== "number")
                      return t5.$gt();
                    if (typeof height !== "number")
                      return H.iae(height);
                    t5 = t5 > height;
                    t4 = t5;
                  } else
                    t4 = true;
                  right = t4 ? 1 : 0;
                }
                t4 = $.engine.renderer;
                t4 = t4.$index(t4, "creeperbuffer").get$context();
                t5 = $.engine.images;
                t5 = t5.$index(t5, "creeper");
                t6 = $.engine;
                t7 = t6.halfWidth;
                t8 = this.zoom;
                if (typeof t8 !== "number")
                  return H.iae(t8);
                t9 = t2 * t8;
                J.drawImageScaledFromSource$9$x(t4, t5, (8 * down + 4 * left + 2 * up + right) * t2, 0, t2, t2, t7 + t1 * t8, t6.halfHeight + t3 * t8, t9, t9);
                continue;
              }
              if (t < 9) {
                t4 = this.world.tiles;
                t5 = position.x;
                if (t5 >>> 0 !== t5 || t5 >= t4.length)
                  return H.ioore(t4, t5);
                ind = J.get$index$x(J.$index$asx(t4[t5], position.y));
                if (ind !== 5)
                  if (ind !== 7) {
                    if (ind !== 10)
                      if (ind !== 11)
                        if (ind !== 13) {
                          t4 = ind !== 14;
                          t4 = t4 && t4;
                        } else
                          t4 = false;
                      else
                        t4 = false;
                    else
                      t4 = false;
                    indexOk = t4;
                  } else
                    indexOk = false;
                else
                  indexOk = false;
                t4 = J.$sub$n(position.y, 1);
                if (typeof t4 !== "number")
                  return t4.$lt();
                if (t4 < 0)
                  up = 0;
                else {
                  t4 = this.world.tiles;
                  t5 = position.x;
                  if (t5 >>> 0 !== t5 || t5 >= t4.length)
                    return H.ioore(t4, t5);
                  if (J.$index$asx(t4[t5], J.$sub$n(position.y, 1)).get$creep() > t)
                    if (indexOk) {
                      t4 = this.world.tiles;
                      t5 = position.x;
                      if (t5 >>> 0 !== t5 || t5 >= t4.length)
                        return H.ioore(t4, t5);
                      t5 = J.get$height$x(J.$index$asx(t4[t5], J.$sub$n(position.y, 1)));
                      if (typeof t5 !== "number")
                        return t5.$lt();
                      if (typeof height !== "number")
                        return H.iae(height);
                      t5 = t5 < height;
                      t4 = t5;
                    } else
                      t4 = false;
                  else
                    t4 = false;
                  up = t4 ? 1 : 0;
                }
                t4 = J.$add$ns(position.y, 1);
                t5 = J.$sub$n(this.world.size.y, 1);
                if (typeof t4 !== "number")
                  return t4.$gt();
                if (typeof t5 !== "number")
                  return H.iae(t5);
                if (t4 > t5)
                  down = 0;
                else {
                  t4 = this.world.tiles;
                  t5 = position.x;
                  if (t5 >>> 0 !== t5 || t5 >= t4.length)
                    return H.ioore(t4, t5);
                  if (J.$index$asx(t4[t5], J.$add$ns(position.y, 1)).get$creep() > t)
                    if (indexOk) {
                      t4 = this.world.tiles;
                      t5 = position.x;
                      if (t5 >>> 0 !== t5 || t5 >= t4.length)
                        return H.ioore(t4, t5);
                      t5 = J.get$height$x(J.$index$asx(t4[t5], J.$add$ns(position.y, 1)));
                      if (typeof t5 !== "number")
                        return t5.$lt();
                      if (typeof height !== "number")
                        return H.iae(height);
                      t5 = t5 < height;
                      t4 = t5;
                    } else
                      t4 = false;
                  else
                    t4 = false;
                  down = t4 ? 1 : 0;
                }
                t4 = J.$sub$n(position.x, 1);
                if (typeof t4 !== "number")
                  return t4.$lt();
                if (t4 < 0)
                  left = 0;
                else {
                  t4 = this.world.tiles;
                  t5 = J.$sub$n(position.x, 1);
                  if (t5 >>> 0 !== t5 || t5 >= t4.length)
                    return H.ioore(t4, t5);
                  if (J.$index$asx(t4[t5], position.y).get$creep() > t)
                    if (indexOk) {
                      t4 = this.world.tiles;
                      t5 = J.$sub$n(position.x, 1);
                      if (t5 >>> 0 !== t5 || t5 >= t4.length)
                        return H.ioore(t4, t5);
                      t5 = J.get$height$x(J.$index$asx(t4[t5], position.y));
                      if (typeof t5 !== "number")
                        return t5.$lt();
                      if (typeof height !== "number")
                        return H.iae(height);
                      t5 = t5 < height;
                      t4 = t5;
                    } else
                      t4 = false;
                  else
                    t4 = false;
                  left = t4 ? 1 : 0;
                }
                t4 = J.$add$ns(position.x, 1);
                t5 = J.$sub$n(this.world.size.x, 1);
                if (typeof t4 !== "number")
                  return t4.$gt();
                if (typeof t5 !== "number")
                  return H.iae(t5);
                if (t4 > t5)
                  right = 0;
                else {
                  t4 = this.world.tiles;
                  t5 = J.$add$ns(position.x, 1);
                  if (t5 >>> 0 !== t5 || t5 >= t4.length)
                    return H.ioore(t4, t5);
                  if (J.$index$asx(t4[t5], position.y).get$creep() > t)
                    if (indexOk) {
                      t4 = this.world.tiles;
                      t5 = J.$add$ns(position.x, 1);
                      if (t5 >>> 0 !== t5 || t5 >= t4.length)
                        return H.ioore(t4, t5);
                      t5 = J.get$height$x(J.$index$asx(t4[t5], position.y));
                      if (typeof t5 !== "number")
                        return t5.$lt();
                      if (typeof height !== "number")
                        return H.iae(height);
                      t5 = t5 < height;
                      t4 = t5;
                    } else
                      t4 = false;
                  else
                    t4 = false;
                  right = t4 ? 1 : 0;
                }
                index = 8 * down + 4 * left + 2 * up + right;
                if (index !== 0) {
                  t4 = $.engine.renderer;
                  t4 = t4.$index(t4, "creeperbuffer").get$context();
                  t5 = $.engine.images;
                  t5 = t5.$index(t5, "creeper");
                  t6 = $.engine;
                  t7 = t6.halfWidth;
                  t8 = this.zoom;
                  if (typeof t8 !== "number")
                    return H.iae(t8);
                  t9 = t2 * t8;
                  J.drawImageScaledFromSource$9$x(t4, t5, index * t2, 0, t2, t2, t7 + t1 * t8, t6.halfHeight + t3 * t8, t9, t9);
                }
              }
            }
          }
        }
      t1 = $.engine.renderer;
      J.clear$0$ax(t1.$index(t1, "creeper"));
      t1 = $.engine.renderer;
      t1 = t1.$index(t1, "creeper").get$context();
      t2 = $.engine.renderer;
      J.drawImage$3$x(t1, J.get$view$x(t2.$index(t2, "creeperbuffer")), 0, 0);
    },
    updateTerraformInfo$0: function() {
      var t1, t2, t3, t4;
      t1 = this.hoveredTile;
      if (!t1.$eq(t1, this.oldHoveredTile)) {
        t1 = this.world;
        if (t1.contains$1(t1, this.hoveredTile)) {
          if (this.mode === "TERRAFORM") {
            t1 = this.hoveredTile;
            t2 = this.tileSize;
            t3 = J.$mul$n(t1.x, t2);
            t1 = J.$mul$n(t1.y, t2);
            t4 = this.tfLine1;
            t4.from = new U.Vector(0, t1);
            t4.to = new U.Vector(J.$mul$n(this.world.size.y, t2), t1);
            t4.visible = true;
            t4 = this.tfLine2;
            t4.from = new U.Vector(0, J.$add$ns(t1, t2));
            t4.to = new U.Vector(J.$mul$n(this.world.size.y, t2), J.$add$ns(t1, t2));
            t4.visible = true;
            t4 = this.tfLine3;
            t4.from = new U.Vector(t3, 0);
            t4.to = new U.Vector(t3, J.$mul$n(this.world.size.y, t2));
            t4.visible = true;
            t4 = this.tfLine4;
            t4.from = new U.Vector(J.$add$ns(t3, t2), 0);
            t4.to = new U.Vector(J.$add$ns(t3, t2), J.$mul$n(this.world.size.y, t2));
            t4.visible = true;
            t4 = this.tfNumber;
            t3 = this.hoveredTile;
            t4.position = new U.Vector(J.$mul$n(t3.x, t2), J.$mul$n(t3.y, t2));
            t4.visible = true;
          } else {
            this.tfLine1.visible = false;
            this.tfLine2.visible = false;
            this.tfLine3.visible = false;
            this.tfLine4.visible = false;
            this.tfNumber.visible = false;
          }
          t1 = this.targetCursor;
          t2 = this.hoveredTile;
          t3 = this.tileSize;
          t3 = new U.Vector(J.$mul$n(t2.x, t3), J.$mul$n(t2.y, t3));
          t1.position = t3.$add(t3, new U.Vector(8, 8));
        } else {
          this.tfLine1.visible = false;
          this.tfLine2.visible = false;
          this.tfLine3.visible = false;
          this.tfLine4.visible = false;
          this.tfNumber.visible = false;
        }
      }
    },
    drawPositionInfo$0: function() {
      var t1, context, t2, end, delta, distance, buildingDistance, times, i, newX, newY, allowedDistance, allowedDistance0, t3, positionScrolled, drawPosition, ghostICenter, t4, t5, t6, t7, ghostCanBePlaced, j, buildingCenter, allowedDistance1, t8;
      if ($.UISymbol_activeSymbol != null) {
        t1 = $.engine.renderer;
        context = t1.$index(t1, "buffer").get$context();
        t1 = $.game;
        t2 = t1.hoveredTile;
        if (!t2.$eq(t2, t1.oldHoveredTile)) {
          this.ghosts = [];
          t1 = $.engine.mouse;
          t2 = t1.dragStart;
          if (t2 != null) {
            end = this.hoveredTile;
            delta = end.$sub(end, t2);
            distance = t2.distanceTo$1(end);
            t1 = $.UISymbol_activeSymbol.building.type;
            if (t1 === "collector")
              buildingDistance = 9;
            else
              buildingDistance = t1 === "relay" ? 18 : 3;
            times = C.JSDouble_methods.$tdiv(distance, buildingDistance) + 1;
            this.ghosts.push(t2);
            for (i = 1; i < times; ++i) {
              newX = J.floor$0$n(J.$add$ns(t2.x, J.$mul$n(J.$mul$n(J.$div$n(delta.x, distance), i), buildingDistance)));
              newY = J.floor$0$n(J.$add$ns(t2.y, J.$mul$n(J.$mul$n(J.$div$n(delta.y, distance), i), buildingDistance)));
              t1 = this.world;
              if (t1.contains$1(t1, new U.Vector(newX, newY)))
                this.ghosts.push(new U.Vector(newX, newY));
            }
            t1 = this.world;
            if (t1.contains$1(t1, end))
              this.ghosts.push(end);
          } else if (t1.active) {
            t1 = this.world;
            if (t1.contains$1(t1, $.game.hoveredTile))
              this.ghosts.push($.game.hoveredTile);
          }
        }
        for (t1 = this.tileSize, t2 = J.getInterceptor$x(context), allowedDistance = 10 * t1, allowedDistance0 = 20 * t1, i = 0; t3 = this.ghosts, i < t3.length; ++i) {
          t3 = t3[i];
          positionScrolled = new U.Vector(t3.x, t3.y);
          drawPosition = positionScrolled.tiled2screen$0();
          t3 = this.zoom;
          if (typeof t3 !== "number")
            return H.iae(t3);
          t3 = 8 * t3;
          ghostICenter = new U.Vector(J.$add$ns(drawPosition.x, t3), J.$add$ns(drawPosition.y, t3));
          this.drawRangeBoxes$2(positionScrolled, $.UISymbol_activeSymbol.building);
          t3 = this.world;
          if (t3.contains$1(t3, positionScrolled)) {
            t2.save$0(context);
            context.globalAlpha = 0.5;
            t3 = $.engine.images;
            t3 = t3.$index(t3, $.UISymbol_activeSymbol.building.type);
            t4 = drawPosition.x;
            t5 = this.zoom;
            if (typeof t5 !== "number")
              return H.iae(t5);
            t5 = J.$sub$n(t4, t1 * t5);
            t4 = drawPosition.y;
            t6 = this.zoom;
            if (typeof t6 !== "number")
              return H.iae(t6);
            t6 = J.$sub$n(t4, t1 * t6);
            t4 = $.UISymbol_activeSymbol.building.size;
            t7 = this.zoom;
            if (typeof t7 !== "number")
              return H.iae(t7);
            t7 = t4 * t1 * t7;
            context.drawImage(t3, t5, t6, t7, t7);
            if ($.UISymbol_activeSymbol.building.type === "cannon") {
              t3 = $.engine.images;
              t3 = t3.$index(t3, "cannongun");
              t4 = drawPosition.x;
              t5 = this.zoom;
              if (typeof t5 !== "number")
                return H.iae(t5);
              t5 = J.$sub$n(t4, t1 * t5);
              t4 = drawPosition.y;
              t6 = this.zoom;
              if (typeof t6 !== "number")
                return H.iae(t6);
              t6 = J.$sub$n(t4, t1 * t6);
              t4 = this.zoom;
              if (typeof t4 !== "number")
                return H.iae(t4);
              t4 = 48 * t4;
              context.drawImage(t3, t5, t6, t4, t4);
            }
            ghostCanBePlaced = this.canBePlaced$2(positionScrolled, $.UISymbol_activeSymbol.building);
            if (ghostCanBePlaced)
              context.strokeStyle = "#0f0";
            else
              context.strokeStyle = "#f00";
            t3 = this.zoom;
            if (typeof t3 !== "number")
              return H.iae(t3);
            context.lineWidth = 4 * t3;
            t3 = J.$sub$n(drawPosition.x, t1 * t3);
            t4 = drawPosition.y;
            t5 = this.zoom;
            if (typeof t5 !== "number")
              return H.iae(t5);
            t5 = J.$sub$n(t4, t1 * t5);
            t4 = $.UISymbol_activeSymbol.building.size;
            t6 = this.zoom;
            if (typeof t6 !== "number")
              return H.iae(t6);
            t6 = t1 * t4 * t6;
            context.strokeRect(t3, t5, t6, t6);
            context.restore();
            if (ghostCanBePlaced) {
              for (j = 0; t3 = $.get$Building_buildings(), j < t3.length; ++j) {
                t4 = $.UISymbol_activeSymbol.building.type;
                if (t4 !== "collector")
                  if (t4 !== "relay") {
                    t4 = t3[j];
                    t4 = J.get$type$x(t4) === "collector" || J.get$type$x(t4) === "relay" || J.get$type$x(t4) === "base";
                  } else
                    t4 = true;
                else
                  t4 = true;
                if (t4) {
                  buildingCenter = J.get$position$x(t3[j]).real2screen$0();
                  t3 = $.get$Building_buildings();
                  if (j >= t3.length)
                    return H.ioore(t3, j);
                  allowedDistance1 = J.get$type$x(t3[j]) === "relay" && $.UISymbol_activeSymbol.building.type === "relay" ? allowedDistance0 : allowedDistance;
                  t3 = J.$sub$n(buildingCenter.x, ghostICenter.x);
                  if (typeof t3 !== "number")
                    H.throwExpression(new P.ArgumentError(t3));
                  t3 = Math.pow(t3, 2);
                  t4 = J.$sub$n(buildingCenter.y, ghostICenter.y);
                  if (typeof t4 !== "number")
                    H.throwExpression(new P.ArgumentError(t4));
                  t4 = Math.pow(t4, 2);
                  t3 = Math.sqrt(t3 + t4);
                  t4 = this.zoom;
                  if (typeof t4 !== "number")
                    return H.iae(t4);
                  if (t3 <= allowedDistance1 * t4) {
                    context.strokeStyle = "#000";
                    t3 = $.game.zoom;
                    if (typeof t3 !== "number")
                      return H.iae(t3);
                    context.lineWidth = 3 * t3;
                    context.beginPath();
                    context.moveTo(buildingCenter.x, buildingCenter.y);
                    context.lineTo(ghostICenter.x, ghostICenter.y);
                    context.stroke();
                    context.strokeStyle = "#0f0";
                    t3 = $.game.zoom;
                    if (typeof t3 !== "number")
                      return H.iae(t3);
                    context.lineWidth = 2 * t3;
                    context.stroke();
                  }
                }
              }
              for (j = 0; t3 = this.ghosts, j < t3.length; ++j)
                if (j !== i) {
                  t4 = $.UISymbol_activeSymbol.building.type;
                  if (t4 === "collector" || t4 === "relay") {
                    t3 = t3[j].tiled2screen$0();
                    t4 = $.game.zoom;
                    if (typeof t4 !== "number")
                      return H.iae(t4);
                    t4 = 8 * t4;
                    t5 = J.$add$ns(t3.x, t4);
                    t4 = J.$add$ns(t3.y, t4);
                    allowedDistance1 = $.UISymbol_activeSymbol.building.type === "relay" ? allowedDistance0 : allowedDistance;
                    t3 = $.game.zoom;
                    if (typeof t3 !== "number")
                      return H.iae(t3);
                    t3 = 8 * t3;
                    t6 = J.$add$ns(drawPosition.x, t3);
                    t3 = J.$add$ns(drawPosition.y, t3);
                    t7 = J.$sub$n(t5, t6);
                    if (typeof t7 !== "number")
                      H.throwExpression(new P.ArgumentError(t7));
                    t7 = Math.pow(t7, 2);
                    t8 = J.$sub$n(t4, t3);
                    if (typeof t8 !== "number")
                      H.throwExpression(new P.ArgumentError(t8));
                    t8 = Math.pow(t8, 2);
                    t7 = Math.sqrt(t7 + t8);
                    t8 = this.zoom;
                    if (typeof t8 !== "number")
                      return H.iae(t8);
                    if (t7 <= allowedDistance1 * t8) {
                      context.strokeStyle = "#000";
                      t7 = $.game.zoom;
                      if (typeof t7 !== "number")
                        return H.iae(t7);
                      context.lineWidth = 2 * t7;
                      context.beginPath();
                      context.moveTo(t5, t4);
                      context.lineTo(t6, t3);
                      context.stroke();
                      context.strokeStyle = "#fff";
                      t3 = $.game.zoom;
                      if (typeof t3 !== "number")
                        return H.iae(t3);
                      context.lineWidth = 1 * t3;
                      context.stroke();
                    }
                  }
                }
            }
          }
        }
      }
    },
    drawGUI$0: function() {
      var t1, context, i, t2, t3, total;
      t1 = $.engine.renderer;
      context = t1.$index(t1, "gui").get$context();
      t1 = $.engine.renderer;
      J.clear$0$ax(t1.$index(t1, "gui"));
      for (i = 0; t1 = $.get$UISymbol_symbols(), i < t1.length; ++i)
        t1[i].draw$0();
      t1 = this.world;
      if (t1.contains$1(t1, $.game.hoveredTile)) {
        t1 = this.world.tiles;
        t2 = $.game.hoveredTile;
        t3 = t2.x;
        if (t3 >>> 0 !== t3 || t3 >= t1.length)
          return H.ioore(t1, t3);
        total = J.$index$asx(t1[t3], t2.y).get$creep();
        J.getInterceptor$x(context).set$fillStyle(context, "#fff");
        context.font = "9px";
        context.textAlign = "right";
        context.strokeStyle = "#fff";
        context.lineWidth = 1;
        context.fillStyle = "rgba(205, 133, 63, 1)";
        t2 = $.game;
        t3 = t2.world.tiles;
        t2 = t2.hoveredTile;
        t1 = t2.x;
        if (t1 >>> 0 !== t1 || t1 >= t3.length)
          return H.ioore(t3, t1);
        t2 = J.get$height$x(J.$index$asx(t3[t1], t2.y));
        if (typeof t2 !== "number")
          return t2.$negate();
        context.fillRect(555, 110, 25, -t2 * 10 - 10);
        context.fillStyle = "rgba(100, 150, 255, 1)";
        t2 = $.game;
        t1 = t2.world.tiles;
        t2 = t2.hoveredTile;
        t3 = t2.x;
        if (t3 >>> 0 !== t3 || t3 >= t1.length)
          return H.ioore(t1, t3);
        t2 = J.$mul$n(J.get$height$x(J.$index$asx(t1[t3], t2.y)), 10);
        if (typeof t2 !== "number")
          return H.iae(t2);
        context.fillRect(555, 110 - t2 - 10, 25, -total * 10);
        context.fillStyle = "rgba(255, 255, 255, 1)";
        for (i = 1; i < 11; ++i) {
          t1 = 120 - i * 10;
          C.CanvasRenderingContext2D_methods.fillText$3(context, C.JSInt_methods.toString$0(i), 550, t1);
          context.beginPath();
          context.moveTo(555, t1);
          context.lineTo(580, t1);
          context.stroke();
        }
        context.textAlign = "left";
        C.CanvasRenderingContext2D_methods.fillText$3(context, C.JSNumber_methods.toStringAsFixed$1(total, 2), 605, 10);
      }
    },
    draw$1: [function(_) {
      var t1, t2;
      t1 = $.engine.renderer;
      t1.$index(t1, "buffer").get$context();
      this.drawGUI$0();
      t1 = $.engine.renderer;
      J.clear$0$ax(t1.$index(t1, "buffer"));
      t1 = $.engine.renderer;
      t1.$index(t1, "buffer").draw$0();
      U.Building_draw();
      if ($.World_creeperDirty) {
        this.drawCreeper$0();
        $.World_creeperDirty = false;
      }
      if ($.engine.mouse.active) {
        U.Building_drawRepositionInfo();
        this.drawPositionInfo$0();
      }
      t1 = $.engine.renderer;
      J.clear$0$ax(t1.$index(t1, "main"));
      t1 = $.engine.renderer;
      t1 = t1.$index(t1, "main").get$context();
      t2 = $.engine.renderer;
      J.drawImage$3$x(t1, J.get$view$x(t2.$index(t2, "buffer")), 0, 0);
      t2 = window;
      t1 = this.get$draw();
      C.Window_methods._ensureRequestAnimationFrame$0(t2);
      C.Window_methods._requestAnimationFrame$1(t2, W._wrapZone(t1));
    }, "call$1", "get$draw", 2, 0, 17]
  },
  Game_init_closure: {
    "": "Closure:14;music_0",
    call$1: function($event) {
      return this.music_0.play();
    }
  },
  Game_run_closure: {
    "": "Closure:18;this_0",
    call$1: function(timer) {
      var t1, t2, t3, t4, t5;
      t1 = $.game;
      t1.toString;
      U.Building_updateHoverState();
      U.Ship_updateHoverState();
      if (!t1.paused) {
        U.Emitter_update();
        U.Spore_update();
        U.Shell_update();
        U.World_update();
        U.Projectile_update();
        U.Building_update();
        U.Packet_update();
        U.Smoke_update();
        U.Explosion_update();
        U.Ship_update();
        U.Sporetower_update();
      }
      t2 = t1.scroll;
      t3 = t2.x;
      t4 = t1.mouseScrolling.x;
      t5 = t1.keyScrolling;
      t2.x = J.$add$ns(t3, J.$add$ns(t4, t5.x));
      t2 = t1.scroll;
      t3 = t2.x;
      if (typeof t3 !== "number")
        return t3.$lt();
      if (t3 < 0)
        t2.x = 0;
      else {
        t4 = t1.world.size.x;
        if (typeof t4 !== "number")
          return H.iae(t4);
        if (t3 > t4)
          t2.x = t4;
      }
      t2.y = J.$add$ns(t2.y, J.$add$ns(t1.mouseScrolling.y, t5.y));
      t2 = t1.scroll;
      t3 = t2.y;
      if (typeof t3 !== "number")
        return t3.$lt();
      if (t3 < 0)
        t2.y = 0;
      else {
        t4 = t1.world.size.y;
        if (typeof t4 !== "number")
          return H.iae(t4);
        if (t3 > t4)
          t2.y = t4;
      }
      if (!J.$eq(t1.mouseScrolling.x, 0) || !J.$eq(t1.mouseScrolling.y, 0) || !J.$eq(t5.x, 0) || !J.$eq(t5.y, 0)) {
        t1.copyTerrain$0();
        t1.drawCollection$0();
        t1.updateTerraformInfo$0();
        $.World_creeperDirty = true;
      }
      return;
    }
  },
  HeightMap: {
    "": "Object;seed,size>,low_value,high_value,mid_value,centre_cell,queue,map",
    reset$0: function(_) {
      var t1, random, t2, t3, i, t4, t5;
      t1 = this.seed;
      random = P._Random$(t1);
      t1 = this.queue;
      C.JSArray_methods.set$length(t1, 0);
      t2 = this.size;
      t3 = Array(t2);
      this.map = t3;
      for (i = 0; i < t2; ++i) {
        t4 = Array(t2);
        if (i >= t2)
          return H.ioore(t3, i);
        t3[i] = t4;
      }
      t2 = this.high_value;
      t3 = random.nextInt$1(t2);
      t4 = this.map;
      if (0 >= t4.length)
        return H.ioore(t4, 0);
      t4 = t4[0];
      if (0 >= t4.length)
        return H.ioore(t4, 0);
      t4[0] = t3;
      t3 = random.nextInt$1(t2);
      t4 = this.size - 1;
      t5 = this.map;
      if (t4 < 0 || t4 >= t5.length)
        return H.ioore(t5, t4);
      t4 = t5[t4];
      if (0 >= t4.length)
        return H.ioore(t4, 0);
      t4[0] = t3;
      t3 = random.nextInt$1(t2);
      t4 = this.size - 1;
      t5 = this.map;
      if (0 >= t5.length)
        return H.ioore(t5, 0);
      t5 = t5[0];
      if (t4 < 0 || t4 >= t5.length)
        return H.ioore(t5, t4);
      t5[t4] = t3;
      t2 = random.nextInt$1(t2);
      t3 = this.size - 1;
      t4 = this.map;
      if (t3 < 0 || t3 >= t4.length)
        return H.ioore(t4, t3);
      t4 = t4[t3];
      if (t3 >= t4.length)
        return H.ioore(t4, t3);
      t4[t3] = t2;
      t1.push(new U.HeightMap_reset_closure(this));
      return t1;
    },
    soft_set_cell$3: function(x, y, v) {
      var t1, t2;
      t1 = this.map;
      if (y >>> 0 !== y || y >= t1.length)
        return H.ioore(t1, y);
      t2 = t1[y];
      if (x >>> 0 !== x || x >= t2.length)
        return H.ioore(t2, x);
      if (t2[x] == null)
        t2[x] = v;
      t1 = t1[y];
      if (x >= t1.length)
        return H.ioore(t1, x);
      return t1[x];
    },
    remaining$0: function() {
      if (this.queue.length > 0)
        return true;
      else
        return false;
    },
    run$0: function() {
      for (var t1 = this.queue; this.remaining$0();)
        C.JSArray_methods.removeAt$1(t1, 0).call$0();
      return;
    },
    diamond_square$6: function(left, $top, right, bottom, base_height, seed) {
      var t1, random, t2, t3, t4, t5, t6, centre_point_value;
      t1 = {};
      t1.base_height_0 = base_height;
      random = P._Random$(seed);
      t1.x_centre_1 = null;
      t1.y_centre_2 = null;
      if (typeof left !== "number")
        return left.$add();
      if (typeof right !== "number")
        return H.iae(right);
      t1.x_centre_1 = C.JSNumber_methods.toInt$0(Math.floor((left + right) / 2));
      if (typeof $top !== "number")
        return $top.$add();
      if (typeof bottom !== "number")
        return H.iae(bottom);
      t1.y_centre_2 = C.JSNumber_methods.toInt$0(Math.floor(($top + bottom) / 2));
      t2 = this.map;
      t3 = t2.length;
      if ($top < 0 || $top >= t3)
        return H.ioore(t2, $top);
      t4 = t2[$top];
      t5 = t4.length;
      if (left < 0 || left >= t5)
        return H.ioore(t4, left);
      t6 = t4[left];
      if (right < 0 || right >= t5)
        return H.ioore(t4, right);
      t4 = t4[right];
      if (typeof t6 !== "number")
        return t6.$add();
      if (typeof t4 !== "number")
        return H.iae(t4);
      if (bottom < 0 || bottom >= t3)
        return H.ioore(t2, bottom);
      t2 = t2[bottom];
      t3 = t2.length;
      if (left >= t3)
        return H.ioore(t2, left);
      t5 = t2[left];
      if (typeof t5 !== "number")
        return H.iae(t5);
      if (right >= t3)
        return H.ioore(t2, right);
      t2 = t2[right];
      if (typeof t2 !== "number")
        return H.iae(t2);
      centre_point_value = C.JSNumber_methods.toInt$0(Math.floor((t6 + t4 + t5 + t2) / 4 - C.JSNumber_methods.toInt$0(Math.floor((random.nextDouble$0() - 0.5) * t1.base_height_0 * 2))));
      this.soft_set_cell$3(t1.x_centre_1, t1.y_centre_2, centre_point_value);
      t2 = t1.x_centre_1;
      t5 = this.map;
      if ($top >= t5.length)
        return H.ioore(t5, $top);
      t5 = t5[$top];
      t4 = t5.length;
      if (left >= t4)
        return H.ioore(t5, left);
      t6 = t5[left];
      if (right >= t4)
        return H.ioore(t5, right);
      t5 = t5[right];
      if (typeof t6 !== "number")
        return t6.$add();
      if (typeof t5 !== "number")
        return H.iae(t5);
      this.soft_set_cell$3(t2, $top, C.JSNumber_methods.toInt$0(Math.floor((t6 + t5) / 2 + (random.nextDouble$0() - 0.5) * t1.base_height_0)));
      t5 = t1.x_centre_1;
      t6 = this.map;
      if (bottom >= t6.length)
        return H.ioore(t6, bottom);
      t6 = t6[bottom];
      t2 = t6.length;
      if (left >= t2)
        return H.ioore(t6, left);
      t4 = t6[left];
      if (right >= t2)
        return H.ioore(t6, right);
      t6 = t6[right];
      if (typeof t4 !== "number")
        return t4.$add();
      if (typeof t6 !== "number")
        return H.iae(t6);
      this.soft_set_cell$3(t5, bottom, C.JSNumber_methods.toInt$0(Math.floor((t4 + t6) / 2 + (random.nextDouble$0() - 0.5) * t1.base_height_0)));
      t6 = t1.y_centre_2;
      t4 = this.map;
      t5 = t4.length;
      if ($top >= t5)
        return H.ioore(t4, $top);
      t2 = t4[$top];
      if (left >= t2.length)
        return H.ioore(t2, left);
      t2 = t2[left];
      if (bottom >= t5)
        return H.ioore(t4, bottom);
      t4 = t4[bottom];
      if (left >= t4.length)
        return H.ioore(t4, left);
      t4 = t4[left];
      if (typeof t2 !== "number")
        return t2.$add();
      if (typeof t4 !== "number")
        return H.iae(t4);
      this.soft_set_cell$3(left, t6, C.JSNumber_methods.toInt$0(Math.floor((t2 + t4) / 2 + (random.nextDouble$0() - 0.5) * t1.base_height_0)));
      t4 = t1.y_centre_2;
      t2 = this.map;
      t6 = t2.length;
      if ($top >= t6)
        return H.ioore(t2, $top);
      t5 = t2[$top];
      if (right >= t5.length)
        return H.ioore(t5, right);
      t5 = t5[right];
      if (bottom >= t6)
        return H.ioore(t2, bottom);
      t2 = t2[bottom];
      if (right >= t2.length)
        return H.ioore(t2, right);
      t2 = t2[right];
      if (typeof t5 !== "number")
        return t5.$add();
      if (typeof t2 !== "number")
        return H.iae(t2);
      this.soft_set_cell$3(right, t4, C.JSNumber_methods.toInt$0(Math.floor((t5 + t2) / 2 + (random.nextDouble$0() - 0.5) * t1.base_height_0)));
      if (right - left > 2) {
        t2 = t1.base_height_0;
        t1.base_height_0 = C.JSNumber_methods.toInt$0(Math.floor(t2 * Math.pow(2, -0.75)));
        t2 = this.queue;
        t2.push(new U.HeightMap_diamond_square_closure(t1, this, left, $top, random));
        t2.push(new U.HeightMap_diamond_square_closure0(t1, this, $top, right, random));
        t2.push(new U.HeightMap_diamond_square_closure1(t1, this, left, bottom, random));
        t2.push(new U.HeightMap_diamond_square_closure2(t1, this, right, bottom, random));
        return t2;
      }
    },
    HeightMap$4: function(seed, size, low_value, high_value) {
      this.mid_value = C.JSNumber_methods.toInt$0(Math.floor((this.low_value + this.high_value) / 2));
      this.centre_cell = C.JSNumber_methods.toInt$0(Math.floor(this.size / 2));
      this.reset$0(this);
    }
  },
  HeightMap_reset_closure: {
    "": "Closure:12;this_0",
    call$0: function() {
      var t1, t2;
      t1 = this.this_0;
      t2 = t1.size - 1;
      return t1.diamond_square$6(0, 0, t2, t2, t1.mid_value, t1.seed);
    }
  },
  HeightMap_diamond_square_closure: {
    "": "Closure:12;box_0,this_1,left_2,top_3,random_4",
    call$0: function() {
      var t1 = this.box_0;
      return this.this_1.diamond_square$6(this.left_2, this.top_3, t1.x_centre_1, t1.y_centre_2, t1.base_height_0, this.random_4.nextInt$1(10000));
    }
  },
  HeightMap_diamond_square_closure0: {
    "": "Closure:12;box_0,this_5,top_6,right_7,random_8",
    call$0: function() {
      var t1 = this.box_0;
      return this.this_5.diamond_square$6(t1.x_centre_1, this.top_6, this.right_7, t1.y_centre_2, t1.base_height_0, this.random_8.nextInt$1(10000));
    }
  },
  HeightMap_diamond_square_closure1: {
    "": "Closure:12;box_0,this_9,left_10,bottom_11,random_12",
    call$0: function() {
      var t1 = this.box_0;
      return this.this_9.diamond_square$6(this.left_10, t1.y_centre_2, t1.x_centre_1, this.bottom_11, t1.base_height_0, this.random_12.nextInt$1(10000));
    }
  },
  HeightMap_diamond_square_closure2: {
    "": "Closure:12;box_0,this_13,right_14,bottom_15,random_16",
    call$0: function() {
      var t1 = this.box_0;
      return this.this_13.diamond_square$6(t1.x_centre_1, t1.y_centre_2, this.right_14, this.bottom_15, t1.base_height_0, this.random_16.nextInt$1(10000));
    }
  },
  main_closure: {
    "": "Closure:14;",
    call$1: function(results) {
      var t1 = new U.Game(16, null, 0, 1, 1, null, null, false, false, H.setRuntimeTypeInfo([], [U.Vector]), null, new U.Vector(0, 0), new U.Vector(0, 0), new U.Vector(0, 0), new U.Vector(0, 0), new U.Vector(0, 0), new P.Stopwatch(null, null), null, null, null, null, null, null);
      t1.seed = $.engine.randomInt$2(0, 10000);
      t1.init$0();
      $.game = t1;
      return t1;
    }
  },
  Packet: {
    "": "Object;speed,type>,remove,speedMultiplier,target,currentTarget,sprite",
    remove$0: function($receiver) {
      return this.remove.call$0();
    },
    move$0: function() {
      var targetPosition, delta, distance, t1, t2, t3, ship;
      targetPosition = J.get$position$x(this.currentTarget);
      delta = J.$sub$n(targetPosition, this.sprite.position);
      distance = this.sprite.position.distanceTo$1(targetPosition);
      this.speed.x = J.$mul$n(J.$mul$n(J.$mul$n(J.$div$n(J.get$x$x(delta), distance), $.Packet_baseSpeed), $.game.speed), this.speedMultiplier);
      this.speed.y = J.$mul$n(J.$mul$n(J.$mul$n(J.$div$n(delta.y, distance), $.Packet_baseSpeed), $.game.speed), this.speedMultiplier);
      if (J.abs$0$n(this.speed.x) > J.abs$0$n(delta.x))
        this.speed.x = delta.x;
      if (J.abs$0$n(this.speed.y) > J.abs$0$n(delta.y))
        this.speed.y = delta.y;
      t1 = this.sprite;
      t1.position = J.$add$ns(t1.position, this.speed);
      if (J.$eq(this.sprite.position, J.get$position$x(this.currentTarget))) {
        t1 = this.target;
        if (J.$eq(this.currentTarget, t1)) {
          this.remove = true;
          t2 = this.type;
          if (t2 === "health") {
            t2 = t1.health + 1;
            t1.health = t2;
            t1.healthRequests = t1.healthRequests - 1;
            t3 = t1.maxHealth;
            if (t2 >= t3) {
              t1.health = t3;
              if (!t1.built) {
                t1.built = true;
                t1.sprite.alpha = 1;
                U.Connection_activate(t1);
                t2 = t1.cannon;
                if (t2 != null)
                  t2.alpha = 1;
                if (t1.type === "collector") {
                  t1.updateCollection$1("add");
                  $.engine.playSound$2("energy", t1.position.real2tiled$0());
                }
                t2 = t1.type;
                if (t2 === "storage") {
                  t3 = $.Building_base;
                  t3.maxEnergy = t3.maxEnergy + 20;
                }
                if (t2 === "speed")
                  $.Packet_baseSpeed = $.Packet_baseSpeed * 1.01;
                if (t2 === "bomber") {
                  ship = new U.Ship(new U.Vector(0, 0), new U.Vector(0, 0), "Bomber", "IDLE", false, false, false, 15, 0, 0, 0, 0, t1, null, null, null, null);
                  ship.Ship$4(t1.position, "bombership", "Bomber", t1);
                  $.get$Ship_ships().push(ship);
                  t1.ship = ship;
                }
              }
            }
          } else if (t2 === "energy") {
            t2 = t1.energy + 4;
            t1.energy = t2;
            t1.energyRequests = t1.energyRequests - 4;
            t3 = t1.maxEnergy;
            if (t2 > t3)
              t1.energy = t3;
          } else if (t2 === "collection") {
            t1 = $.Building_base;
            t2 = t1.energy + 1;
            t1.energy = t2;
            t3 = t1.maxEnergy;
            if (t2 > t3)
              t1.energy = t3;
            $.game.updateEnergyElement$0();
          }
        } else
          this.findRoute$0();
      }
    },
    findRoute$0: function() {
      var routes, t1, t2, t3, t4, oldRoute, neighbours, newRoutes, i, newRoute, centerA, centerB, centerC, j, t5;
      routes = H.setRuntimeTypeInfo([], [U.Route]);
      t1 = H.setRuntimeTypeInfo([], [U.Building]);
      t1.push(this.currentTarget);
      routes.push(new U.Route(0, 0, t1, false));
      for (t1 = this.target; routes.length > 0;) {
        t2 = routes[0].nodes;
        t3 = t2.length;
        t4 = t3 - 1;
        if (t4 < 0)
          return H.ioore(t2, t4);
        if (J.$eq(t2[t4], t1))
          break;
        oldRoute = C.JSArray_methods.removeAt$1(routes, 0);
        t2 = oldRoute.nodes;
        t3 = t2.length;
        t4 = t3 - 1;
        if (t4 < 0)
          return H.ioore(t2, t4);
        neighbours = t2[t4].getNeighbours$1(t1);
        for (newRoutes = 0, i = 0; i < neighbours.length; ++i)
          if (!oldRoute.contains$1(oldRoute, neighbours[i])) {
            ++newRoutes;
            newRoute = oldRoute.clone$0(oldRoute);
            t2 = newRoute.nodes;
            if (i >= neighbours.length)
              return H.ioore(neighbours, i);
            t2.push(neighbours[i]);
            t3 = t2.length;
            t4 = t3 - 1;
            if (t4 < 0)
              return H.ioore(t2, t4);
            centerA = J.get$position$x(t2[t4]);
            t4 = t2.length;
            t3 = t4 - 2;
            if (t3 < 0)
              return H.ioore(t2, t3);
            centerB = J.get$position$x(t2[t3]);
            newRoute.distanceTravelled = newRoute.distanceTravelled + centerA.distanceTo$1(centerB);
            centerC = t1.position;
            t3 = J.$sub$n(centerA.x, centerC.x);
            if (typeof t3 !== "number")
              H.throwExpression(new P.ArgumentError(t3));
            t2 = Math.pow(t3, 2);
            t3 = J.$sub$n(centerA.y, centerC.y);
            if (typeof t3 !== "number")
              H.throwExpression(new P.ArgumentError(t3));
            t3 = Math.pow(t3, 2);
            newRoute.distanceRemaining = Math.sqrt(t2 + t3);
            routes.push(newRoute);
          }
        for (i = 0; t2 = routes.length, i < t2; ++i)
          for (j = 0; t2 = routes.length, j < t2; ++j)
            if (i !== j) {
              if (i >= t2)
                return H.ioore(routes, i);
              t2 = routes[i].nodes;
              t3 = t2.length;
              t4 = t3 - 1;
              if (t4 < 0)
                return H.ioore(t2, t4);
              t4 = t2[t4];
              t2 = routes[j].nodes;
              t3 = t2.length;
              t5 = t3 - 1;
              if (t5 < 0)
                return H.ioore(t2, t5);
              if (J.$eq(t4, t2[t5])) {
                t2 = routes.length;
                if (i >= t2)
                  return H.ioore(routes, i);
                t3 = routes[i];
                t4 = t3.distanceTravelled;
                if (j >= t2)
                  return H.ioore(routes, j);
                t2 = routes[j];
                t5 = t2.distanceTravelled;
                if (t4 < t5)
                  t2.remove = true;
                else if (t4 > t5)
                  t3.remove = true;
              }
            }
        for (i = t2 - 1; i >= 0; --i) {
          if (i >= routes.length)
            return H.ioore(routes, i);
          if (routes[i].remove)
            C.JSArray_methods.removeAt$1(routes, i);
        }
        t2 = new U.Packet_findRoute_closure();
        t3 = routes.length - 1;
        if (t3 - 0 <= 32)
          H.Sort__insertionSort(routes, 0, t3, t2);
        else
          H.Sort__dualPivotQuicksort(routes, 0, t3, t2);
      }
      if (routes.length > 0) {
        t1 = routes[0].nodes;
        t2 = t1.length;
        if (1 >= t2)
          return H.ioore(t1, 1);
        t3 = t1[1];
        if (J.get$type$x(t3) === "relay") {
          this.speedMultiplier = 2;
          t4 = 2;
        } else {
          this.speedMultiplier = 1;
          t4 = 1;
        }
        if (this.type === "collection")
          this.speedMultiplier = t4 / 4;
        if (1 >= t2)
          return H.ioore(t1, 1);
        this.currentTarget = t3;
        return true;
      } else {
        this.currentTarget = null;
        t2 = this.type;
        if (t2 === "energy") {
          t2 = t1.energyRequests - 4;
          t1.energyRequests = t2;
          if (t2 < 0)
            t1.energyRequests = 0;
        } else if (t2 === "health") {
          t2 = t1.healthRequests - 1;
          t1.healthRequests = t2;
          if (t2 < 0)
            t1.healthRequests = 0;
        }
        this.remove = true;
        return false;
      }
    },
    Packet$4: function(currentTarget, target, imageID, type) {
      var t1 = $.engine.images;
      t1 = U.Sprite$(C.Layer_6, t1.$index(t1, imageID), J.get$position$x(this.currentTarget), 16, 16);
      this.sprite = t1;
      t1.anchor = new U.Vector(0.5, 0.5);
      t1.visible = false;
      if (this.type === "collection")
        t1.scale = new U.Vector(1.5, 1.5);
      t1 = $.engine.renderer;
      t1.$index(t1, "buffer").addDisplayObject$1(this.sprite);
    },
    static: {"": "Packet_baseSpeed,Packet_packets,Packet_queue", Packet$: function(currentTarget, target, imageID, type) {
        var t1 = new U.Packet(new U.Vector(0, 0), type, false, 1, target, currentTarget, null);
        t1.Packet$4(currentTarget, target, imageID, type);
        return t1;
      }, Packet_update: function() {
        var i, t1, t2, t3, packet;
        for (i = $.get$Packet_packets().length - 1; i >= 0; --i) {
          t1 = $.get$Packet_packets();
          t2 = t1.length;
          if (i >= t2)
            return H.ioore(t1, i);
          t3 = t1[i];
          if (t3.remove) {
            t1 = $.engine.renderer;
            t1 = t1.$index(t1, "buffer");
            t2 = $.get$Packet_packets();
            if (i >= t2.length)
              return H.ioore(t2, i);
            t1.removeDisplayObject$1(t2[i].sprite);
            J.removeAt$1$ax($.get$Packet_packets(), i);
          } else {
            if (i >= t2)
              return H.ioore(t1, i);
            t3.move$0();
          }
        }
        for (i = $.get$Packet_queue().length - 1; i >= 0; --i) {
          t1 = $.Building_base;
          t2 = t1.energy;
          if (t2 > 0) {
            t1.energy = t2 - 1;
            $.game.updateEnergyElement$0();
            packet = J.removeAt$1$ax($.get$Packet_queue(), 0);
            packet.sprite.visible = true;
            $.get$Packet_packets().push(packet);
          }
        }
      }, Packet_removeWithTarget: function(building) {
        var i, t1;
        for (i = $.get$Packet_packets().length - 1; i >= 0; --i) {
          t1 = $.get$Packet_packets();
          if (i >= t1.length)
            return H.ioore(t1, i);
          if (!J.$eq(t1[i].currentTarget, building)) {
            t1 = $.get$Packet_packets();
            if (i >= t1.length)
              return H.ioore(t1, i);
            t1 = t1[i].target === building;
          } else
            t1 = true;
          if (t1) {
            t1 = $.get$Packet_packets();
            if (i >= t1.length)
              return H.ioore(t1, i);
            t1[i].remove = true;
          }
        }
        for (i = $.get$Packet_queue().length - 1; i >= 0; --i) {
          t1 = $.get$Packet_queue();
          if (i >= t1.length)
            return H.ioore(t1, i);
          if (!J.$eq(t1[i].currentTarget, building)) {
            t1 = $.get$Packet_queue();
            if (i >= t1.length)
              return H.ioore(t1, i);
            t1 = t1[i].target === building;
          } else
            t1 = true;
          if (t1) {
            t1 = $.get$Packet_queue();
            if (i >= t1.length)
              return H.ioore(t1, i);
            t1[i].remove = true;
          }
        }
      }, Packet_queuePacket: function(target, type) {
        var img, packet, t1;
        img = "packet_" + type;
        packet = U.Packet$($.Building_base, target, img, type);
        if (packet.findRoute$0()) {
          t1 = packet.type;
          if (t1 === "health") {
            t1 = packet.target;
            t1.healthRequests = t1.healthRequests + 1;
          } else if (t1 === "energy") {
            t1 = packet.target;
            t1.energyRequests = t1.energyRequests + 4;
          }
          $.get$Packet_queue().push(packet);
        } else {
          t1 = $.engine.renderer;
          t1.$index(t1, "buffer").removeDisplayObject$1(packet.sprite);
        }
      }}
  },
  Packet_findRoute_closure: {
    "": "Closure:19;",
    call$2: function(a, b) {
      return C.JSNumber_methods.compareTo$1(a.get$distanceTravelled() + a.distanceRemaining - (b.get$distanceTravelled() + b.distanceRemaining), 0);
    }
  },
  Projectile: {
    "": "Object;targetPosition,speed,remove,sprite",
    remove$0: function($receiver) {
      return this.remove.call$0();
    },
    move$0: function() {
      var t1, delta, distance, targetPositionTiled, i, j, tilePosition, t2, t3, tile;
      t1 = this.targetPosition;
      delta = t1.$sub(t1, this.sprite.position);
      distance = this.sprite.position.distanceTo$1(this.targetPosition);
      this.speed.x = J.$mul$n(J.$mul$n(J.$div$n(delta.x, distance), $.Projectile_baseSpeed), $.game.speed);
      this.speed.y = J.$mul$n(J.$mul$n(J.$div$n(delta.y, distance), $.Projectile_baseSpeed), $.game.speed);
      if (J.abs$0$n(this.speed.x) > J.abs$0$n(delta.x))
        this.speed.x = delta.x;
      if (J.abs$0$n(this.speed.y) > J.abs$0$n(delta.y))
        this.speed.y = delta.y;
      t1 = this.sprite;
      t1.position = J.$add$ns(t1.position, this.speed);
      if (J.$eq(this.sprite.position, this.targetPosition)) {
        this.remove = true;
        targetPositionTiled = this.targetPosition.real2tiled$0();
        U.Smoke_add(this.targetPosition);
        for (i = -1; i <= 1; ++i)
          for (j = -1; j <= 1; ++j) {
            tilePosition = new U.Vector(J.$add$ns(targetPositionTiled.x, i), J.$add$ns(targetPositionTiled.y, j));
            t1 = $.game.world;
            if (t1.contains$1(t1, tilePosition)) {
              t1 = $.game.tileSize;
              t2 = J.$mul$n(tilePosition.x, t1);
              t1 = J.$mul$n(tilePosition.y, t1);
              t2 = J.$add$ns(t2, 8);
              t1 = J.$add$ns(t1, 8);
              t3 = this.targetPosition;
              t2 = J.$sub$n(t2, t3.x);
              if (typeof t2 !== "number")
                H.throwExpression(new P.ArgumentError(t2));
              t2 = Math.pow(t2, 2);
              t3 = J.$sub$n(t1, t3.y);
              if (typeof t3 !== "number")
                H.throwExpression(new P.ArgumentError(t3));
              t1 = Math.pow(t3, 2);
              t1 = Math.sqrt(t2 + t1);
              t2 = $.game;
              t3 = t2.tileSize;
              if (t1 <= t3 * 4) {
                t1 = t2.world;
                t2 = J.$mul$n(tilePosition.x, t3);
                t3 = J.$mul$n(tilePosition.y, t3);
                t1 = t1.tiles;
                if (typeof t2 !== "number")
                  return t2.$tdiv();
                t2 = C.JSNumber_methods._tdivFast$1(t2, 16);
                if (t2 >>> 0 !== t2 || t2 >= t1.length)
                  return H.ioore(t1, t2);
                t2 = t1[t2];
                if (typeof t3 !== "number")
                  return t3.$tdiv();
                tile = J.$index$asx(t2, C.JSNumber_methods._tdivFast$1(t3, 16));
                t3 = tile.get$creep() - 1;
                tile.creep = t3;
                if (t3 < 0)
                  tile.creep = 0;
                $.World_creeperDirty = true;
              }
            }
          }
      }
    },
    Projectile$3: function(position, targetPosition, rotation) {
      var t1 = $.engine.images;
      t1 = U.Sprite$(C.Layer_4, t1.$index(t1, "projectile"), position, 16, 16);
      this.sprite = t1;
      t1.anchor = new U.Vector(0.5, 0.5);
      t1.rotation = rotation;
      t1 = $.engine.renderer;
      t1.$index(t1, "buffer").addDisplayObject$1(this.sprite);
    },
    static: {"": "Projectile_baseSpeed,Projectile_projectiles", Projectile_update: function() {
        var i, t1, t2, t3;
        for (i = $.get$Projectile_projectiles().length - 1; i >= 0; --i) {
          t1 = $.get$Projectile_projectiles();
          t2 = t1.length;
          if (i >= t2)
            return H.ioore(t1, i);
          t3 = t1[i];
          if (t3.remove) {
            t1 = $.engine.renderer;
            t1 = t1.$index(t1, "buffer");
            t2 = $.get$Projectile_projectiles();
            if (i >= t2.length)
              return H.ioore(t2, i);
            t1.removeDisplayObject$1(t2[i].sprite);
            J.removeAt$1$ax($.get$Projectile_projectiles(), i);
          } else {
            if (i >= t2)
              return H.ioore(t1, i);
            t3.move$0();
          }
        }
      }}
  },
  Renderer: {
    "": "Object;view>,context<,top',left',bottom',right',layers",
    clear$0: function(_) {
      var t1, t2;
      t1 = this.view;
      t2 = J.getInterceptor$x(t1);
      J.clearRect$4$x(this.context, 0, 0, t2.get$width(t1), t2.get$height(t1));
    },
    updateRect$2: function(width, height) {
      var t1, t2;
      t1 = this.view;
      t2 = J.getInterceptor$x(t1);
      t2.set$width(t1, width);
      t2.set$height(t1, height);
      this.top = H.setRuntimeTypeInfo(new P.Rectangle(t1.offsetLeft, t1.offsetTop, t1.offsetWidth, t1.offsetHeight), [null]).top;
      this.left = H.setRuntimeTypeInfo(new P.Rectangle(t1.offsetLeft, t1.offsetTop, t1.offsetWidth, t1.offsetHeight), [null]).left;
      this.bottom = J.$add$ns(H.setRuntimeTypeInfo(new P.Rectangle(t1.offsetLeft, t1.offsetTop, t1.offsetWidth, t1.offsetHeight), [null]).top, H.setRuntimeTypeInfo(new P.Rectangle(t1.offsetLeft, t1.offsetTop, t1.offsetWidth, t1.offsetHeight), [null]).height);
      this.right = J.$add$ns(H.setRuntimeTypeInfo(new P.Rectangle(t1.offsetLeft, t1.offsetTop, t1.offsetWidth, t1.offsetHeight), [null]).left, H.setRuntimeTypeInfo(new P.Rectangle(t1.offsetLeft, t1.offsetTop, t1.offsetWidth, t1.offsetHeight), [null]).width);
    },
    addDisplayObject$1: function(displayObject) {
      var t1, t2;
      t1 = this.layers;
      t2 = displayObject.layer._creeper$_value;
      if (t2 >= 20)
        return H.ioore(t1, t2);
      t1[t2].push(displayObject);
    },
    removeDisplayObject$1: function(displayObject) {
      var t1, t2;
      t1 = this.layers;
      t2 = displayObject.layer._creeper$_value;
      if (t2 >= 20)
        return H.ioore(t1, t2);
      t2 = t1[t2];
      J.removeAt$1$ax(t2, H.Lists_indexOf(t2, displayObject, 0, t2.length));
    },
    removeAllDisplayObjects$0: function() {
      var t1, i;
      for (t1 = this.layers, i = 0; i < 20; ++i)
        J.set$length$asx(t1[i], 0);
    },
    switchLayer$2: function(displayObject, layer) {
      var t1, t2;
      this.removeDisplayObject$1(displayObject);
      displayObject.layer = layer;
      t1 = this.layers;
      t2 = layer._creeper$_value;
      if (t2 >= 20)
        return H.ioore(t1, t2);
      t1[t2].push(displayObject);
    },
    isVisible$2: function(position, size) {
      var object, t1, t2, myview;
      object = new P.Rectangle(J.$sub$n(position.x, J.$div$n(J.$mul$n(J.$mul$n(size.x, $.game.tileSize), $.game.zoom), 2)), J.$sub$n(position.y, J.$div$n(J.$mul$n(J.$mul$n(size.y, $.game.tileSize), $.game.zoom), 2)), J.$mul$n(J.$mul$n(size.x, $.game.tileSize), $.game.zoom), J.$mul$n(J.$mul$n(size.y, $.game.tileSize), $.game.zoom));
      object.$builtinTypeInfo = [null];
      t1 = this.view;
      t2 = J.getInterceptor$x(t1);
      myview = new P.Rectangle(0, 0, t2.get$width(t1), t2.get$height(t1));
      myview.$builtinTypeInfo = [null];
      return myview.intersects$1(myview, object);
    },
    draw$0: function() {
      var t1, t2, t3, t4, displayObject, realPosition, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, myview, realPositionFrom, realPositionTo;
      for (t1 = new H.ListIterator(this.layers, 20, 0, null), t2 = this.view, t3 = J.getInterceptor$x(t2); t1.moveNext$0();)
        for (t4 = J.get$iterator$ax(t1._current); t4.moveNext$0();) {
          displayObject = t4.get$current();
          if (displayObject.get$visible())
            if (typeof displayObject === "object" && displayObject !== null && !!displayObject.$isSprite) {
              realPosition = displayObject.position.real2screen$0();
              if (this.isVisible$2(realPosition, displayObject.size)) {
                t5 = displayObject.alpha;
                if (t5 !== 1)
                  J.set$globalAlpha$x(this.context, t5);
                if (displayObject.rotation !== 0) {
                  J.save$0$x(this.context);
                  J.translate$2$x(this.context, realPosition.x, realPosition.y);
                  t5 = this.context;
                  t6 = $.engine;
                  t7 = displayObject.rotation;
                  t6.toString;
                  if (typeof t7 !== "number")
                    return t7.$mul();
                  J.rotate$1$x(t5, t7 * 0.017453292519943295);
                  t5 = displayObject.animated;
                  t6 = this.context;
                  t7 = $.game;
                  t8 = displayObject.image;
                  t9 = displayObject.anchor;
                  t10 = displayObject.size;
                  t11 = displayObject.scale;
                  if (t5) {
                    t5 = displayObject.frame;
                    t12 = C.JSInt_methods.$mod(t5, 8);
                    t13 = t10.x;
                    if (typeof t13 !== "number")
                      return H.iae(t13);
                    t5 = C.JSInt_methods._tdivFast$1(t5, 8);
                    t10 = t10.y;
                    if (typeof t10 !== "number")
                      return H.iae(t10);
                    t14 = t9.x;
                    if (typeof t14 !== "number")
                      return H.iae(t14);
                    t15 = t11.x;
                    if (typeof t15 !== "number")
                      return H.iae(t15);
                    t7 = t7.zoom;
                    if (typeof t7 !== "number")
                      return H.iae(t7);
                    t9 = t9.y;
                    if (typeof t9 !== "number")
                      return H.iae(t9);
                    t11 = t11.y;
                    if (typeof t11 !== "number")
                      return H.iae(t11);
                    t16 = $.game.zoom;
                    if (typeof t16 !== "number")
                      return H.iae(t16);
                    J.drawImageScaledFromSource$9$x(t6, t8, t12 * t13, t5 * t10, t13, t10, -t13 * t14 * t15 * t7, -t10 * t9 * t11 * t7, t13 * t15 * t16, J.$mul$n(J.$mul$n(displayObject.size.y, displayObject.scale.y), $.game.zoom));
                  } else {
                    t5 = t10.x;
                    if (typeof t5 !== "number")
                      return t5.$negate();
                    t12 = t9.x;
                    if (typeof t12 !== "number")
                      return H.iae(t12);
                    t13 = t11.x;
                    if (typeof t13 !== "number")
                      return H.iae(t13);
                    t7 = t7.zoom;
                    if (typeof t7 !== "number")
                      return H.iae(t7);
                    t10 = t10.y;
                    if (typeof t10 !== "number")
                      return t10.$negate();
                    t9 = t9.y;
                    if (typeof t9 !== "number")
                      return H.iae(t9);
                    t11 = t11.y;
                    if (typeof t11 !== "number")
                      return H.iae(t11);
                    t14 = $.game.zoom;
                    if (typeof t14 !== "number")
                      return H.iae(t14);
                    J.drawImageScaled$5$x(t6, t8, -t5 * t12 * t13 * t7, -t10 * t9 * t11 * t7, t5 * t13 * t14, J.$mul$n(J.$mul$n(displayObject.size.y, displayObject.scale.y), $.game.zoom));
                  }
                  J.restore$0$x(this.context);
                } else {
                  t5 = displayObject.animated;
                  t6 = this.context;
                  t7 = realPosition.x;
                  t8 = displayObject.image;
                  t9 = displayObject.size;
                  t10 = displayObject.anchor;
                  if (t5) {
                    t5 = displayObject.frame;
                    t11 = C.JSInt_methods.$mod(t5, 8);
                    t12 = t9.x;
                    if (typeof t12 !== "number")
                      return H.iae(t12);
                    t5 = C.JSInt_methods._tdivFast$1(t5, 8);
                    t9 = t9.y;
                    if (typeof t9 !== "number")
                      return H.iae(t9);
                    t10 = t10.x;
                    if (typeof t10 !== "number")
                      return H.iae(t10);
                    t13 = displayObject.scale.x;
                    if (typeof t13 !== "number")
                      return H.iae(t13);
                    t14 = $.game.zoom;
                    if (typeof t14 !== "number")
                      return H.iae(t14);
                    J.drawImageScaledFromSource$9$x(t6, t8, t11 * t12, t5 * t9, t12, t9, J.$sub$n(t7, t12 * t10 * t13 * t14), J.$sub$n(realPosition.y, J.$mul$n(J.$mul$n(J.$mul$n(displayObject.size.y, displayObject.anchor.y), displayObject.scale.y), $.game.zoom)), J.$mul$n(J.$mul$n(displayObject.size.x, displayObject.scale.x), $.game.zoom), J.$mul$n(J.$mul$n(displayObject.size.y, displayObject.scale.y), $.game.zoom));
                  } else
                    J.drawImageScaled$5$x(t6, t8, J.$sub$n(t7, J.$mul$n(J.$mul$n(J.$mul$n(t9.x, t10.x), displayObject.scale.x), $.game.zoom)), J.$sub$n(realPosition.y, J.$mul$n(J.$mul$n(J.$mul$n(displayObject.size.y, displayObject.anchor.y), displayObject.scale.y), $.game.zoom)), J.$mul$n(J.$mul$n(displayObject.size.x, displayObject.scale.x), $.game.zoom), J.$mul$n(J.$mul$n(displayObject.size.y, displayObject.scale.y), $.game.zoom));
                }
                if (displayObject.alpha !== 1)
                  J.set$globalAlpha$x(this.context, 1);
              }
            } else if (typeof displayObject === "object" && displayObject !== null && !!displayObject.$isRect) {
              realPosition = displayObject.position.real2screen$0();
              t5 = displayObject.size;
              t6 = $.game.zoom;
              if (this.isVisible$2(realPosition, new U.Vector(J.$mul$n(t5.x, t6), J.$mul$n(t5.y, t6)))) {
                J.set$fillStyle$x(this.context, displayObject.color);
                J.fillRect$4$x(this.context, J.$sub$n(realPosition.x, J.$mul$n(J.$mul$n(J.$mul$n(displayObject.size.x, displayObject.anchor.x), displayObject.scale.x), $.game.zoom)), J.$sub$n(realPosition.y, J.$mul$n(J.$mul$n(J.$mul$n(displayObject.size.y, displayObject.anchor.y), displayObject.scale.y), $.game.zoom)), J.$mul$n(J.$mul$n(displayObject.size.x, displayObject.scale.x), $.game.zoom), J.$mul$n(J.$mul$n(displayObject.size.y, displayObject.scale.y), $.game.zoom));
              }
            } else if (typeof displayObject === "object" && displayObject !== null && !!displayObject.$isCircle) {
              realPosition = displayObject.position.real2screen$0();
              t5 = displayObject.radius;
              t6 = displayObject.scale;
              if (typeof t6 !== "number")
                return H.iae(t6);
              t7 = $.game.zoom;
              if (typeof t7 !== "number")
                return H.iae(t7);
              t7 = t5 * t6 * t7;
              if (this.isVisible$2(realPosition, new U.Vector(t7, t7))) {
                t5 = this.context;
                t6 = displayObject.lineWidth;
                t7 = $.game.zoom;
                if (typeof t7 !== "number")
                  return H.iae(t7);
                J.set$lineWidth$x(t5, t6 * t7);
                J.set$strokeStyle$x(this.context, displayObject.color);
                J.beginPath$0$x(this.context);
                t7 = this.context;
                t6 = realPosition.x;
                t5 = realPosition.y;
                t8 = displayObject.radius;
                t9 = displayObject.scale;
                if (typeof t9 !== "number")
                  return H.iae(t9);
                t10 = $.game.zoom;
                if (typeof t10 !== "number")
                  return H.iae(t10);
                J.arc$6$x(t7, t6, t5, t8 * t9 * t10, 0, 6.283185307179586, true);
                J.closePath$0$x(this.context);
                J.stroke$0$x(this.context);
              }
            } else if (typeof displayObject === "object" && displayObject !== null && !!displayObject.$isLine) {
              myview = new P.Rectangle(0, 0, t3.get$width(t2), t3.get$height(t2));
              myview.$builtinTypeInfo = [null];
              realPositionFrom = displayObject.from.real2screen$0();
              realPositionTo = displayObject.to.real2screen$0();
              t5 = new P.Point(realPositionFrom.x, realPositionFrom.y);
              t5.$builtinTypeInfo = [null];
              if (!myview.containsPoint$1(myview, t5)) {
                t5 = new P.Point(realPositionTo.x, realPositionTo.y);
                t5.$builtinTypeInfo = [null];
                t5 = myview.containsPoint$1(myview, t5);
              } else
                t5 = true;
              if (t5) {
                t5 = this.context;
                t6 = displayObject.lineWidth;
                t7 = $.game.zoom;
                if (typeof t7 !== "number")
                  return H.iae(t7);
                J.set$lineWidth$x(t5, t6 * t7);
                J.set$strokeStyle$x(this.context, displayObject.color);
                J.beginPath$0$x(this.context);
                J.moveTo$2$x(this.context, realPositionFrom.x, realPositionFrom.y);
                J.lineTo$2$x(this.context, realPositionTo.x, realPositionTo.y);
                J.stroke$0$x(this.context);
              }
            }
        }
    },
    Renderer$3: function(view, width, height) {
      var t1, i, t2;
      this.updateRect$2(width, height);
      t1 = this.view;
      J.set$position$x(t1.style, "absolute");
      this.context = J.getContext$1$x(t1, "2d");
      for (t1 = this.layers, i = 0; i < 20; ++i) {
        t2 = [];
        t2.$builtinTypeInfo = [U.DisplayObject];
        t1[i] = t2;
      }
    },
    static: {Renderer$: function(view, width, height) {
        var t1 = new U.Renderer(view, null, null, null, null, null, H.setRuntimeTypeInfo(Array(20), [[J.JSArray, U.DisplayObject]]));
        t1.Renderer$3(view, width, height);
        return t1;
      }}
  },
  Route: {
    "": "Object;distanceTravelled<,distanceRemaining,nodes>,remove",
    remove$0: function($receiver) {
      return this.remove.call$0();
    },
    clone$0: function(_) {
      var t1, route, t2, i;
      t1 = H.setRuntimeTypeInfo([], [U.Building]);
      route = new U.Route(0, 0, t1, false);
      route.distanceTravelled = this.distanceTravelled;
      route.distanceRemaining = this.distanceRemaining;
      for (t2 = this.nodes, i = 0; i < t2.length; ++i)
        t1.push(t2[i]);
      return route;
    },
    contains$1: function(_, node) {
      var t1, t2, i, t3;
      for (t1 = this.nodes, t2 = J.getInterceptor$x(node), i = 0; i < t1.length; ++i) {
        t3 = t2.get$position(node);
        if (i >= t1.length)
          return H.ioore(t1, i);
        if (J.$eq(t3, J.get$position$x(t1[i])))
          return true;
      }
      return false;
    }
  },
  Shell: {
    "": "Object;targetPosition,speed,remove,trailCounter,sprite",
    remove$0: function($receiver) {
      return this.remove.call$0();
    },
    move$0: function() {
      var t1, delta, distance, t2, targetPositionTiled, i, j, tilePosition, t3, tile;
      t1 = this.targetPosition;
      delta = t1.$sub(t1, this.sprite.position);
      distance = this.sprite.position.distanceTo$1(this.targetPosition);
      this.speed.x = J.$mul$n(J.$mul$n(J.$div$n(delta.x, distance), 1.5), $.game.speed);
      this.speed.y = J.$mul$n(J.$mul$n(J.$div$n(delta.y, distance), 1.5), $.game.speed);
      if (J.abs$0$n(this.speed.x) > J.abs$0$n(delta.x))
        this.speed.x = delta.x;
      if (J.abs$0$n(this.speed.y) > J.abs$0$n(delta.y))
        this.speed.y = delta.y;
      t1 = this.trailCounter + 1;
      this.trailCounter = t1;
      if (t1 === 10) {
        this.trailCounter = 0;
        t1 = this.sprite.position;
        U.Smoke_add(new U.Vector(J.get$x$x(t1), J.$sub$n(t1.y, 16)));
      }
      t1 = this.sprite;
      t2 = t1.rotation;
      if (typeof t2 !== "number")
        return t2.$add();
      t2 += 20;
      t1.rotation = t2;
      if (t2 > 359)
        t1.rotation = t2 - 359;
      t1.position = J.$add$ns(t1.position, this.speed);
      if (J.$eq(this.sprite.position, this.targetPosition)) {
        this.remove = true;
        targetPositionTiled = this.targetPosition.real2tiled$0();
        U.Explosion_add(this.targetPosition);
        $.engine.playSound$2("explosion", targetPositionTiled);
        for (i = -4; i <= 4; ++i)
          for (j = -4; j <= 4; ++j) {
            tilePosition = new U.Vector(J.$add$ns(targetPositionTiled.x, i), J.$add$ns(targetPositionTiled.y, j));
            t1 = $.game.world;
            if (t1.contains$1(t1, tilePosition)) {
              t1 = $.game.tileSize;
              t2 = J.$mul$n(tilePosition.x, t1);
              t1 = J.$mul$n(tilePosition.y, t1);
              t2 = J.$add$ns(t2, 8);
              t1 = J.$add$ns(t1, 8);
              t3 = this.targetPosition;
              t2 = J.$sub$n(t2, t3.x);
              if (typeof t2 !== "number")
                H.throwExpression(new P.ArgumentError(t2));
              t2 = Math.pow(t2, 2);
              t3 = J.$sub$n(t1, t3.y);
              if (typeof t3 !== "number")
                H.throwExpression(new P.ArgumentError(t3));
              t1 = Math.pow(t3, 2);
              t1 = Math.sqrt(t2 + t1);
              t2 = $.game;
              t3 = t2.tileSize;
              if (t1 <= t3 * 4) {
                t1 = t2.world;
                t2 = J.$mul$n(tilePosition.x, t3);
                t3 = J.$mul$n(tilePosition.y, t3);
                t1 = t1.tiles;
                if (typeof t2 !== "number")
                  return t2.$tdiv();
                t2 = C.JSNumber_methods._tdivFast$1(t2, 16);
                if (t2 >>> 0 !== t2 || t2 >= t1.length)
                  return H.ioore(t1, t2);
                t2 = t1[t2];
                if (typeof t3 !== "number")
                  return t3.$tdiv();
                tile = J.$index$asx(t2, C.JSNumber_methods._tdivFast$1(t3, 16));
                t3 = tile.get$creep() - 10;
                tile.creep = t3;
                if (t3 < 0)
                  tile.creep = 0;
                $.World_creeperDirty = true;
              }
            }
          }
      }
    },
    Shell$2: function(position, targetPosition) {
      var t1 = $.engine.images;
      t1 = U.Sprite$(C.Layer_8, t1.$index(t1, "shell"), position, 16, 16);
      this.sprite = t1;
      t1.anchor = new U.Vector(0.5, 0.5);
      t1 = $.engine.renderer;
      t1.$index(t1, "buffer").addDisplayObject$1(this.sprite);
    },
    static: {"": "Shell_baseSpeed,Shell_shells", Shell_update: function() {
        var i, t1, t2, t3;
        for (i = $.get$Shell_shells().length - 1; i >= 0; --i) {
          t1 = $.get$Shell_shells();
          t2 = t1.length;
          if (i >= t2)
            return H.ioore(t1, i);
          t3 = t1[i];
          if (t3.remove) {
            t1 = $.engine.renderer;
            t1 = t1.$index(t1, "buffer");
            t2 = $.get$Shell_shells();
            if (i >= t2.length)
              return H.ioore(t2, i);
            t1.removeDisplayObject$1(t2[i].sprite);
            J.removeAt$1$ax($.get$Shell_shells(), i);
          } else {
            if (i >= t2)
              return H.ioore(t1, i);
            t3.move$0();
          }
        }
      }}
  },
  Ship: {
    "": "Object;speed,targetPosition,type>,status*,remove,hovered@,selected*,maxEnergy<,energy<,trailCounter,weaponCounter,flightCounter,home,sprite,targetSymbol<,selectedCircle<,energyRect",
    remove$0: function($receiver) {
      return this.remove.call$0();
    },
    turnToTarget$0: function() {
      var t1, delta, t2, t3, angleToTarget, absoluteDelta, turnRate;
      t1 = this.targetPosition;
      delta = t1.$sub(t1, this.sprite.position);
      t1 = $.engine;
      t2 = delta.y;
      t3 = delta.x;
      if (typeof t2 !== "number")
        H.throwExpression(new P.ArgumentError(t2));
      if (typeof t3 !== "number")
        H.throwExpression(new P.ArgumentError(t3));
      t2 = Math.atan2(t2, t3);
      t1.toString;
      angleToTarget = t2 * 57.29577951308232;
      t2 = this.sprite.rotation;
      if (typeof t2 !== "number")
        return H.iae(t2);
      absoluteDelta = Math.abs(angleToTarget - t2);
      turnRate = absoluteDelta < 1.5 ? absoluteDelta : 1.5;
      if (absoluteDelta <= 180) {
        t1 = this.sprite;
        t2 = t1.rotation;
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (angleToTarget < t2)
          t1.rotation = t2 - turnRate;
        else
          t1.rotation = t2 + turnRate;
      } else {
        t1 = this.sprite;
        t2 = t1.rotation;
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (angleToTarget < t2)
          t1.rotation = t2 + turnRate;
        else
          t1.rotation = t2 - turnRate;
      }
      t2 = t1.rotation;
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 180) {
        t2 -= 360;
        t1.rotation = t2;
      }
      if (typeof t2 !== "number")
        return t2.$lt();
      if (t2 < -180)
        t1.rotation = t2 + 360;
    },
    calculateVector$0: function() {
      var t1, t2, x, y;
      t1 = $.engine;
      t2 = this.sprite.rotation;
      t1.toString;
      if (typeof t2 !== "number")
        return t2.$mul();
      x = Math.cos(t2 * 0.017453292519943295);
      t1 = $.engine;
      t2 = this.sprite.rotation;
      t1.toString;
      if (typeof t2 !== "number")
        return t2.$mul();
      y = Math.sin(t2 * 0.017453292519943295);
      t1 = this.speed;
      t2 = $.game.speed;
      t1.x = x * 1 * t2;
      t1.y = y * 1 * t2;
    },
    move$0: function() {
      var t1, t2, targetPositionTiled, i, j, tilePosition, t3, tile;
      this.energyRect.size = new U.Vector(44 / this.maxEnergy * this.energy, 3);
      t1 = this.status;
      if (t1 === "ATTACKING" || t1 === "RETURNING") {
        t1 = this.trailCounter + 1;
        this.trailCounter = t1;
        if (t1 === 10) {
          this.trailCounter = 0;
          t1 = this.sprite.position;
          U.Smoke_add(new U.Vector(J.get$x$x(t1), J.$sub$n(t1.y, 16)));
        }
      }
      t1 = this.status;
      if (t1 === "RISING") {
        t1 = this.flightCounter;
        if (t1 < 25) {
          this.flightCounter = t1 + 1;
          t1 = this.sprite;
          t2 = t1.scale;
          t1.scale = new U.Vector(J.$mul$n(t2.x, 1.01), J.$mul$n(t2.y, 1.01));
          t2 = this.selectedCircle;
          t2.scale = J.$mul$n(t2.scale, 1.01);
          t2 = this.energyRect;
          t1 = t2.scale;
          t2.scale = new U.Vector(J.$mul$n(t1.x, 1.01), J.$mul$n(t1.y, 1.01));
        }
        if (this.flightCounter === 25)
          this.status = "ATTACKING";
      } else if (t1 === "FALLING") {
        t1 = this.flightCounter;
        if (t1 > 0) {
          this.flightCounter = t1 - 1;
          t1 = this.sprite;
          t2 = t1.scale;
          t1.scale = new U.Vector(J.$div$n(t2.x, 1.01), J.$div$n(t2.y, 1.01));
          t2 = this.selectedCircle;
          t2.scale = J.$div$n(t2.scale, 1.01);
          t2 = this.energyRect;
          t1 = t2.scale;
          t2.scale = new U.Vector(J.$div$n(t1.x, 1.01), J.$div$n(t1.y, 1.01));
        }
        if (this.flightCounter === 0) {
          this.status = "IDLE";
          this.targetPosition = new U.Vector(0, 0);
          this.sprite.scale = new U.Vector(1, 1);
          this.selectedCircle.scale = 1;
          this.energyRect.scale = new U.Vector(1, 1);
        }
      } else if (t1 === "ATTACKING") {
        this.weaponCounter = this.weaponCounter + 1;
        this.turnToTarget$0();
        this.calculateVector$0();
        t1 = this.sprite;
        t1.position = J.$add$ns(t1.position, this.speed);
        t1 = this.selectedCircle;
        t2 = t1.position;
        t1.position = t2.$add(t2, this.speed);
        t2 = this.energyRect;
        t1 = t2.position;
        t2.position = t1.$add(t1, this.speed);
        t1 = J.get$x$x(this.sprite.position);
        t2 = J.$sub$n(this.targetPosition.x, 2);
        if (typeof t1 !== "number")
          return t1.$gt();
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (t1 > t2) {
          t1 = J.get$x$x(this.sprite.position);
          t2 = J.$add$ns(this.targetPosition.x, 2);
          if (typeof t1 !== "number")
            return t1.$lt();
          if (typeof t2 !== "number")
            return H.iae(t2);
          if (t1 < t2) {
            t1 = J.get$y$x(this.sprite.position);
            t2 = J.$sub$n(this.targetPosition.y, 2);
            if (typeof t1 !== "number")
              return t1.$gt();
            if (typeof t2 !== "number")
              return H.iae(t2);
            if (t1 > t2) {
              t1 = J.get$y$x(this.sprite.position);
              t2 = J.$add$ns(this.targetPosition.y, 2);
              if (typeof t1 !== "number")
                return t1.$lt();
              if (typeof t2 !== "number")
                return H.iae(t2);
              t2 = t1 < t2;
              t1 = t2;
            } else
              t1 = false;
          } else
            t1 = false;
        } else
          t1 = false;
        if (t1)
          if (this.weaponCounter >= 10) {
            this.weaponCounter = 0;
            this.energy = this.energy - 1;
            targetPositionTiled = this.targetPosition.real2tiled$0();
            U.Explosion_add(this.targetPosition);
            $.engine.playSound$2("explosion", targetPositionTiled);
            for (i = -3; i <= 3; ++i)
              for (j = -3; j <= 3; ++j) {
                tilePosition = new U.Vector(J.$add$ns(targetPositionTiled.x, i), J.$add$ns(targetPositionTiled.y, j));
                t1 = $.game.world;
                if (t1.contains$1(t1, tilePosition)) {
                  t1 = $.game.tileSize;
                  t2 = J.$mul$n(tilePosition.x, t1);
                  t1 = J.$mul$n(tilePosition.y, t1);
                  t2 = J.$add$ns(t2, 8);
                  t1 = J.$add$ns(t1, 8);
                  t3 = this.targetPosition;
                  t2 = J.$sub$n(t2, t3.x);
                  if (typeof t2 !== "number")
                    H.throwExpression(new P.ArgumentError(t2));
                  t2 = Math.pow(t2, 2);
                  t3 = J.$sub$n(t1, t3.y);
                  if (typeof t3 !== "number")
                    H.throwExpression(new P.ArgumentError(t3));
                  t1 = Math.pow(t3, 2);
                  t1 = Math.sqrt(t2 + t1);
                  t2 = $.game;
                  t3 = t2.tileSize;
                  if (t1 <= t3 * 3) {
                    t1 = t2.world;
                    t2 = J.$mul$n(tilePosition.x, t3);
                    t3 = J.$mul$n(tilePosition.y, t3);
                    t1 = t1.tiles;
                    if (typeof t2 !== "number")
                      return t2.$tdiv();
                    t2 = C.JSNumber_methods._tdivFast$1(t2, 16);
                    if (t2 >>> 0 !== t2 || t2 >= t1.length)
                      return H.ioore(t1, t2);
                    t2 = t1[t2];
                    if (typeof t3 !== "number")
                      return t3.$tdiv();
                    tile = J.$index$asx(t2, C.JSNumber_methods._tdivFast$1(t3, 16));
                    t3 = tile.get$creep() - 5;
                    tile.creep = t3;
                    if (t3 < 0)
                      tile.creep = 0;
                    $.World_creeperDirty = true;
                  }
                }
              }
            if (this.energy === 0) {
              this.status = "RETURNING";
              this.targetPosition = this.home.position;
            }
          }
      } else if (t1 === "RETURNING") {
        this.turnToTarget$0();
        this.calculateVector$0();
        t1 = this.sprite;
        t1.position = J.$add$ns(t1.position, this.speed);
        t1 = this.selectedCircle;
        t2 = t1.position;
        t1.position = t2.$add(t2, this.speed);
        t2 = this.energyRect;
        t1 = t2.position;
        t2.position = t1.$add(t1, this.speed);
        t1 = J.get$x$x(this.sprite.position);
        t2 = J.$sub$n(this.targetPosition.x, 2);
        if (typeof t1 !== "number")
          return t1.$gt();
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (t1 > t2) {
          t1 = J.get$x$x(this.sprite.position);
          t2 = J.$add$ns(this.targetPosition.x, 2);
          if (typeof t1 !== "number")
            return t1.$lt();
          if (typeof t2 !== "number")
            return H.iae(t2);
          if (t1 < t2) {
            t1 = J.get$y$x(this.sprite.position);
            t2 = J.$sub$n(this.targetPosition.y, 2);
            if (typeof t1 !== "number")
              return t1.$gt();
            if (typeof t2 !== "number")
              return H.iae(t2);
            if (t1 > t2) {
              t1 = J.get$y$x(this.sprite.position);
              t2 = J.$add$ns(this.targetPosition.y, 2);
              if (typeof t1 !== "number")
                return t1.$lt();
              if (typeof t2 !== "number")
                return H.iae(t2);
              t2 = t1 < t2;
              t1 = t2;
            } else
              t1 = false;
          } else
            t1 = false;
        } else
          t1 = false;
        if (t1) {
          this.sprite.position = this.home.position;
          this.status = "FALLING";
        }
      }
      t1 = this.targetSymbol;
      t2 = this.status;
      t1.visible = (t2 === "ATTACKING" || t2 === "RISING") && this.selected;
    },
    Ship$4: function(position, imageID, type, $home) {
      var t1 = $.engine.images;
      t1 = U.Sprite$(C.Layer_8, t1.$index(t1, imageID), position, 48, 48);
      this.sprite = t1;
      t1.anchor = new U.Vector(0.5, 0.5);
      t1 = $.engine.renderer;
      t1.$index(t1, "buffer").addDisplayObject$1(this.sprite);
      t1 = new U.Circle(position, 24, 2, "#fff", null, null, true);
      t1.layer = C.Layer_0;
      t1.scale = 1;
      this.selectedCircle = t1;
      t1.visible = false;
      t1 = $.engine.renderer;
      t1.$index(t1, "buffer").addDisplayObject$1(this.selectedCircle);
      t1 = $.engine.images;
      t1 = U.Sprite$(C.Layer_0, t1.$index(t1, "targetcursor"), position, 48, 48);
      this.targetSymbol = t1;
      t1.anchor = new U.Vector(0.5, 0.5);
      t1.alpha = 0.5;
      t1.visible = false;
      t1 = $.engine.renderer;
      t1.$index(t1, "buffer").addDisplayObject$1(this.targetSymbol);
      t1 = new U.Rect(new U.Vector(J.$sub$n(position.x, 22), J.$sub$n(position.y, 20)), new U.Vector(44 / this.maxEnergy * this.energy, 3), 1, "#f00", null, null, null, true);
      t1.layer = C.Layer_10;
      t1.anchor = new U.Vector(0, 0);
      t1.scale = new U.Vector(1, 1);
      this.energyRect = t1;
      t1 = $.engine.renderer;
      t1.$index(t1, "buffer").addDisplayObject$1(this.energyRect);
    },
    static: {"": "Ship_baseSpeed,Ship_ships", Ship_update: function() {
        var i, t1;
        for (i = 0; t1 = $.get$Ship_ships(), i < t1.length; ++i)
          t1[i].move$0();
      }, Ship_select: function() {
        var i, t1;
        for (i = 0; t1 = $.get$Ship_ships(), i < t1.length; ++i) {
          t1 = t1[i];
          if (t1.hovered) {
            t1.selected = true;
            t1.selectedCircle.visible = true;
            $.game.targetCursor.visible = true;
          }
        }
      }, Ship_deselect: function() {
        var i, t1;
        for (i = 0; t1 = $.get$Ship_ships(), i < t1.length; ++i) {
          t1 = t1[i];
          t1.selected = false;
          t1.selectedCircle.visible = false;
        }
        $.game.targetCursor.visible = false;
      }, Ship_updateHoverState: function() {
        var i, t1, realPosition, t2, t3;
        for (i = 0; t1 = $.get$Ship_ships(), i < t1.length; ++i) {
          realPosition = t1[i].sprite.position.real2screen$0();
          t1 = $.get$Ship_ships();
          if (i >= t1.length)
            return H.ioore(t1, i);
          t1 = t1[i];
          t2 = $.engine.mouse.position.x;
          t3 = J.$sub$n(realPosition.x, 24);
          if (typeof t2 !== "number")
            return t2.$gt();
          if (typeof t3 !== "number")
            return H.iae(t3);
          if (t2 > t3) {
            t2 = $.engine.mouse.position.x;
            t3 = J.$add$ns(realPosition.x, 24);
            if (typeof t2 !== "number")
              return t2.$lt();
            if (typeof t3 !== "number")
              return H.iae(t3);
            if (t2 < t3) {
              t2 = $.engine.mouse.position.y;
              t3 = J.$sub$n(realPosition.y, 24);
              if (typeof t2 !== "number")
                return t2.$gt();
              if (typeof t3 !== "number")
                return H.iae(t3);
              if (t2 > t3) {
                t2 = $.engine.mouse.position.y;
                t3 = J.$add$ns(realPosition.y, 24);
                if (typeof t2 !== "number")
                  return t2.$lt();
                if (typeof t3 !== "number")
                  return H.iae(t3);
                t3 = t2 < t3;
                t2 = t3;
              } else
                t2 = false;
            } else
              t2 = false;
          } else
            t2 = false;
          t1.hovered = t2;
        }
      }, Ship_control: function(position) {
        var t1, i, t2, t3, t4, t5, delta, t6;
        t1 = $.game.tileSize;
        position = new U.Vector(J.$mul$n(position.x, t1), J.$mul$n(position.y, t1));
        position = position.$add(position, new U.Vector(8, 8));
        U.Ship_select();
        for (i = 0; t1 = $.get$Ship_ships(), i < t1.length; ++i) {
          t1 = t1[i];
          if (t1.selected) {
            $.game.mode = "SHIP_SELECTED";
            if (t1.status === "IDLE")
              if (!position.$eq(position, t1.home.position)) {
                t1 = $.get$Ship_ships();
                t2 = t1.length;
                if (i >= t2)
                  return H.ioore(t1, i);
                t3 = t1[i];
                t4 = t3.maxEnergy;
                if (i >= t2)
                  return H.ioore(t1, i);
                t5 = t3.energy;
                delta = t4 - t5;
                if (i >= t2)
                  return H.ioore(t1, i);
                t4 = t3.home;
                t6 = t4.energy;
                if (t6 >= delta) {
                  if (i >= t2)
                    return H.ioore(t1, i);
                  t3.energy = t5 + delta;
                  if (i >= t2)
                    return H.ioore(t1, i);
                  t4.energy = t6 - delta;
                } else {
                  if (i >= t2)
                    return H.ioore(t1, i);
                  if (i >= t2)
                    return H.ioore(t1, i);
                  t3.energy = t5 + t6;
                  if (i >= t2)
                    return H.ioore(t1, i);
                  t4.energy = 0;
                }
                if (i >= t2)
                  return H.ioore(t1, i);
                t3.targetPosition = position;
                if (i >= t2)
                  return H.ioore(t1, i);
                t4 = t3.targetSymbol;
                if (i >= t2)
                  return H.ioore(t1, i);
                t4.position = position;
                if (i >= t2)
                  return H.ioore(t1, i);
                t3.status = "RISING";
              }
            t1 = $.get$Ship_ships();
            t2 = t1.length;
            if (i >= t2)
              return H.ioore(t1, i);
            t3 = t1[i];
            t4 = t3.status;
            if (t4 !== "ATTACKING") {
              if (i >= t2)
                return H.ioore(t1, i);
              t4 = t4 === "RETURNING";
            } else
              t4 = true;
            if (t4) {
              if (i >= t2)
                return H.ioore(t1, i);
              if (position.$eq(position, t3.home.position)) {
                t1 = $.get$Ship_ships();
                t2 = t1.length;
                if (i >= t2)
                  return H.ioore(t1, i);
                t3 = t1[i];
                t3.targetPosition = position;
                if (i >= t2)
                  return H.ioore(t1, i);
                t3.status = "RETURNING";
              } else {
                t1 = $.get$Ship_ships();
                t2 = t1.length;
                if (i >= t2)
                  return H.ioore(t1, i);
                t3 = t1[i];
                t3.targetPosition = position;
                if (i >= t2)
                  return H.ioore(t1, i);
                t4 = t3.targetSymbol;
                if (i >= t2)
                  return H.ioore(t1, i);
                t4.position = position;
                if (i >= t2)
                  return H.ioore(t1, i);
                t3.status = "ATTACKING";
              }
            }
          }
        }
      }}
  },
  Smoke: {
    "": "Object;sprite",
    Smoke$1: function(position) {
      var t1 = $.engine.images;
      t1 = U.Sprite$(C.Layer_7, t1.$index(t1, "smoke"), position, 128, 128);
      this.sprite = t1;
      t1.animated = true;
      t1.anchor = new U.Vector(0.5, 0.5);
      t1.scale = new U.Vector(0.5, 0.5);
      t1 = $.engine.renderer;
      t1.$index(t1, "buffer").addDisplayObject$1(this.sprite);
    },
    static: {"": "Smoke_counter,Smoke_smokes", Smoke_add: function(position) {
        var smoke = new U.Smoke(null);
        smoke.Smoke$1(position);
        $.get$Smoke_smokes().push(smoke);
        return smoke;
      }, Smoke_update: function() {
        var t1, i, t2, t3, t4;
        t1 = $.Smoke_counter + 1;
        $.Smoke_counter = t1;
        if (t1 >= 3) {
          $.Smoke_counter = t1 - 3;
          for (i = $.get$Smoke_smokes().length - 1; i >= 0; --i) {
            t1 = $.get$Smoke_smokes();
            t2 = t1.length;
            if (i >= t2)
              return H.ioore(t1, i);
            t3 = t1[i].sprite;
            t4 = t3.frame;
            if (t4 === 36) {
              t1 = $.engine.renderer;
              t1 = t1.$index(t1, "buffer");
              t2 = $.get$Smoke_smokes();
              if (i >= t2.length)
                return H.ioore(t2, i);
              t1.removeDisplayObject$1(t2[i].sprite);
              J.removeAt$1$ax($.get$Smoke_smokes(), i);
            } else {
              if (i >= t2)
                return H.ioore(t1, i);
              t3.frame = t4 + 1;
            }
          }
        }
      }}
  },
  Spore: {
    "": "Object;targetPosition,speed,remove,health<,trailCounter,sprite",
    remove$0: function($receiver) {
      return this.remove.call$0();
    },
    move$0: function() {
      var delta, distance, t1, t2, targetPositionTiled, i, j, tilePosition, t3, tile;
      delta = J.$sub$n(this.targetPosition, this.sprite.position);
      distance = this.sprite.position.distanceTo$1(this.targetPosition);
      this.speed.x = J.$mul$n(J.$mul$n(J.$div$n(J.get$x$x(delta), distance), 1), $.game.speed);
      this.speed.y = J.$mul$n(J.$mul$n(J.$div$n(delta.y, distance), 1), $.game.speed);
      if (J.abs$0$n(this.speed.x) > J.abs$0$n(delta.x))
        this.speed.x = delta.x;
      if (J.abs$0$n(this.speed.y) > J.abs$0$n(delta.y))
        this.speed.y = delta.y;
      t1 = this.trailCounter + 1;
      this.trailCounter = t1;
      if (t1 === 10) {
        this.trailCounter = 0;
        t1 = this.sprite.position;
        U.Smoke_add(new U.Vector(J.get$x$x(t1), J.$sub$n(t1.y, 16)));
      }
      t1 = this.sprite;
      t2 = t1.rotation;
      if (typeof t2 !== "number")
        return t2.$add();
      t2 += 10;
      t1.rotation = t2;
      if (t2 > 359)
        t1.rotation = t2 - 359;
      t1.position = J.$add$ns(t1.position, this.speed);
      if (J.$eq(this.sprite.position, this.targetPosition)) {
        this.remove = true;
        targetPositionTiled = this.targetPosition.real2tiled$0();
        $.engine.playSound$2("explosion", this.targetPosition.real2tiled$0());
        for (i = -2; i <= 2; ++i)
          for (j = -2; j <= 2; ++j) {
            tilePosition = new U.Vector(J.$add$ns(targetPositionTiled.x, i), J.$add$ns(targetPositionTiled.y, j));
            t1 = $.game.world;
            if (t1.contains$1(t1, tilePosition)) {
              t1 = $.game.tileSize;
              t2 = J.$mul$n(tilePosition.x, t1);
              t1 = J.$mul$n(tilePosition.y, t1);
              t2 = J.$add$ns(t2, 8);
              t1 = J.$add$ns(t1, 8);
              t3 = this.targetPosition;
              t2 = J.$sub$n(t2, J.get$x$x(t3));
              if (typeof t2 !== "number")
                H.throwExpression(new P.ArgumentError(t2));
              t2 = Math.pow(t2, 2);
              t3 = J.$sub$n(t1, t3.y);
              if (typeof t3 !== "number")
                H.throwExpression(new P.ArgumentError(t3));
              t1 = Math.pow(t3, 2);
              t1 = Math.sqrt(t2 + t1);
              t2 = $.game;
              t3 = t2.tileSize;
              if (t1 <= t3 * 2) {
                t1 = t2.world;
                t2 = J.$mul$n(tilePosition.x, t3);
                t3 = J.$mul$n(tilePosition.y, t3);
                t1 = t1.tiles;
                if (typeof t2 !== "number")
                  return t2.$tdiv();
                t2 = C.JSNumber_methods._tdivFast$1(t2, 16);
                if (t2 >>> 0 !== t2 || t2 >= t1.length)
                  return H.ioore(t1, t2);
                t2 = t1[t2];
                if (typeof t3 !== "number")
                  return t3.$tdiv();
                tile = J.$index$asx(t2, C.JSNumber_methods._tdivFast$1(t3, 16));
                tile.creep = tile.get$creep() + 0.5;
              }
            }
          }
        $.World_creeperDirty = true;
      }
    },
    Spore$2: function(position, targetPosition) {
      var t1 = $.engine.images;
      t1 = U.Sprite$(C.Layer_8, t1.$index(t1, "spore"), position, 32, 32);
      this.sprite = t1;
      t1.anchor = new U.Vector(0.5, 0.5);
      t1 = $.engine.renderer;
      t1.$index(t1, "buffer").addDisplayObject$1(this.sprite);
    },
    static: {"": "Spore_baseSpeed,Spore_spores", Spore_update: function() {
        var i, t1, t2, t3;
        for (i = $.get$Spore_spores().length - 1; i >= 0; --i) {
          t1 = $.get$Spore_spores();
          t2 = t1.length;
          if (i >= t2)
            return H.ioore(t1, i);
          t3 = t1[i];
          if (t3.remove) {
            t1 = $.engine.renderer;
            t1 = t1.$index(t1, "buffer");
            t2 = $.get$Spore_spores();
            if (i >= t2.length)
              return H.ioore(t2, i);
            t1.removeDisplayObject$1(t2[i].sprite);
            J.removeAt$1$ax($.get$Spore_spores(), i);
          } else {
            if (i >= t2)
              return H.ioore(t1, i);
            t3.move$0();
          }
        }
      }, Spore_damage: function(building) {
        var center, t1, i, t2, sporeCenter, t3, t4, t5, explosion;
        center = building.sprite.position;
        for (t1 = J.getInterceptor$x(center), i = 0; t2 = $.get$Spore_spores(), i < t2.length; ++i) {
          sporeCenter = t2[i].sprite.position;
          t2 = J.$sub$n(J.get$x$x(sporeCenter), t1.get$x(center));
          if (typeof t2 !== "number")
            H.throwExpression(new P.ArgumentError(t2));
          t2 = Math.pow(t2, 2);
          t3 = J.$sub$n(sporeCenter.y, center.y);
          if (typeof t3 !== "number")
            H.throwExpression(new P.ArgumentError(t3));
          t3 = Math.pow(t3, 2);
          t4 = building.weaponRadius;
          t5 = $.game.tileSize;
          if (t2 + t3 <= Math.pow(t4 * t5, 2)) {
            building.weaponTargetPosition = sporeCenter;
            building.energy = building.energy - 0.05;
            building.operating = true;
            t2 = $.get$Spore_spores();
            t3 = t2.length;
            if (i >= t3)
              return H.ioore(t2, i);
            t4 = t2[i];
            t5 = t4.health - 2;
            t4.health = t5;
            if (i >= t3)
              return H.ioore(t2, i);
            if (t5 <= 0) {
              if (i >= t3)
                return H.ioore(t2, i);
              t4.remove = true;
              t5 = $.engine;
              if (i >= t3)
                return H.ioore(t2, i);
              t5.playSound$2("explosion", t4.sprite.position.real2tiled$0());
              explosion = new U.Explosion(null);
              explosion.Explosion$1(sporeCenter);
              $.get$Explosion_explosions().push(explosion);
            }
          }
        }
      }}
  },
  Sporetower: {
    "": "Object;sprite,sporeCounter",
    spawn$0: function() {
      var t1, t2, target, spore;
      do {
        t1 = $.get$Building_buildings();
        t2 = t1.length;
        $.engine.toString;
        t2 = C.C__JSRandom.nextInt$1(t2 - 1 - 0 + 1) + 0;
        if (t2 < 0 || t2 >= t1.length)
          return H.ioore(t1, t2);
        target = t1[t2];
      } while (!target.get$built());
      t1 = this.sprite.position;
      t2 = target.sprite.position;
      spore = new U.Spore(t2, new U.Vector(0, 0), false, 500, 0, null);
      spore.Spore$2(t1, t2);
      $.get$Spore_spores().push(spore);
    },
    Sporetower$1: function(position) {
      var t1 = $.engine.images;
      t1 = U.Sprite$(C.Layer_3, t1.$index(t1, "sporetower"), position, 48, 48);
      this.sprite = t1;
      t1.anchor = new U.Vector(0.5, 0.5);
      t1 = $.engine.renderer;
      t1.$index(t1, "buffer").addDisplayObject$1(this.sprite);
      this.sporeCounter = $.engine.randomInt$2(7500, 12500);
    },
    static: {"": "Sporetower_sporetowers", Sporetower_update: function() {
        var i, t1, t2, t3, t4;
        for (i = $.get$Sporetower_sporetowers().length - 1; i >= 0; --i) {
          t1 = $.get$Sporetower_sporetowers();
          t2 = t1.length;
          if (i >= t2)
            return H.ioore(t1, i);
          t3 = t1[i];
          t4 = t3.sporeCounter - 1;
          t3.sporeCounter = t4;
          if (i >= t2)
            return H.ioore(t1, i);
          if (t4 <= 0) {
            if (i >= t2)
              return H.ioore(t1, i);
            $.engine.toString;
            t3.sporeCounter = C.C__JSRandom.nextInt$1(5001) + 7500;
            t1 = $.get$Sporetower_sporetowers();
            if (i >= t1.length)
              return H.ioore(t1, i);
            t1[i].spawn$0();
          }
        }
      }, Sporetower_collision: function(rectangle) {
        var i, t1, t2, t3, sporetowerRect;
        for (i = 0; t1 = $.get$Sporetower_sporetowers(), i < t1.length; ++i) {
          t1 = J.$sub$n(J.get$x$x(t1[i].sprite.position), 3 * $.game.tileSize / 2);
          t2 = $.get$Sporetower_sporetowers();
          if (i >= t2.length)
            return H.ioore(t2, i);
          t3 = 3 * $.game.tileSize - 1;
          sporetowerRect = new P.Rectangle(t1, J.$sub$n(J.get$y$x(t2[i].sprite.position), 3 * $.game.tileSize / 2), t3, t3);
          sporetowerRect.$builtinTypeInfo = [null];
          if (rectangle.intersects$1(rectangle, sporetowerRect))
            return true;
        }
        return false;
      }}
  },
  Tile: {
    "": "Object;creep@,newcreep@,collector@,height*,index*,terraformTarget<,terraformProgress<,terraformNumber",
    flagTerraform$1: function(position) {
      var t1, t2;
      if (!J.$eq(this.height, $.game.terraformingHeight)) {
        t1 = $.game.terraformingHeight;
        this.terraformTarget = t1;
        this.terraformProgress = 0;
        t2 = this.terraformNumber;
        if (t2 == null) {
          t1 = $.engine.images;
          t1 = U.Sprite$(C.Layer_0, t1.$index(t1, "numbers"), position, 16, 16);
          this.terraformNumber = t1;
          t1.animated = true;
          t1.frame = this.terraformTarget;
          t1 = $.engine.renderer;
          t1.$index(t1, "buffer").addDisplayObject$1(this.terraformNumber);
        } else
          t2.frame = t1;
      }
    },
    unflagTerraform$0: function() {
      this.terraformProgress = 0;
      this.terraformTarget = -1;
      if (this.terraformNumber != null) {
        var t1 = $.engine.renderer;
        t1.$index(t1, "buffer").removeDisplayObject$1(this.terraformNumber);
        this.terraformNumber = null;
      }
    },
    Tile$0: function() {
      this.index = -1;
      this.creep = 0;
      this.newcreep = 0;
      this.collector = null;
      this.terraformTarget = -1;
      this.terraformProgress = 0;
      this.terraformNumber = null;
    }
  },
  UISymbol: {
    "": "Object;rectangle,keyCode>,active<,hovered@,building",
    draw$0: function() {
      var t1, context, t2, t3;
      t1 = $.engine.renderer;
      context = t1.$index(t1, "gui").get$context();
      if (this.active)
        J.set$fillStyle$x(context, "#696");
      else {
        t1 = J.getInterceptor$x(context);
        if (this.hovered)
          t1.set$fillStyle(context, "#232");
        else
          t1.set$fillStyle(context, "#454");
      }
      t1 = J.$add$ns(this.rectangle.left, 1);
      t2 = J.$add$ns(this.rectangle.top, 1);
      t3 = this.rectangle;
      J.getInterceptor$x(context).fillRect$4(context, t1, t2, t3.width, t3.height);
      t3 = $.engine.images;
      t2 = this.building;
      context.drawImage(t3.$index(t3, t2.type), J.$add$ns(this.rectangle.left, 24), J.$add$ns(this.rectangle.top, 20), 32, 32);
      if (t2.type === "cannon") {
        t1 = $.engine.images;
        context.drawImage(t1.$index(t1, "cannongun"), J.$add$ns(this.rectangle.left, 24), J.$add$ns(this.rectangle.top, 20), 32, 32);
      }
      if (t2.type === "bomber") {
        t1 = $.engine.images;
        context.drawImage(t1.$index(t1, "bombership"), J.$add$ns(this.rectangle.left, 24), J.$add$ns(this.rectangle.top, 20), 32, 32);
      }
      context.fillStyle = "#fff";
      context.font = "10px";
      context.textAlign = "center";
      t1 = J.substring$2$s(t2.type, 0, 1).toUpperCase() + J.substring$1$s(t2.type, 1);
      t3 = this.rectangle;
      C.CanvasRenderingContext2D_methods.fillText$3(context, t1, J.$add$ns(t3.left, J.$div$n(t3.width, 2)), J.$add$ns(this.rectangle.top, 15));
      context.textAlign = "left";
      C.CanvasRenderingContext2D_methods.fillText$3(context, "(" + P.String_String$fromCharCode(this.keyCode) + ")", J.$add$ns(this.rectangle.left, 5), J.$add$ns(this.rectangle.top, 50));
      context.textAlign = "right";
      t2 = C.JSInt_methods.toString$0(t2.maxHealth);
      t3 = this.rectangle;
      C.CanvasRenderingContext2D_methods.fillText$3(context, t2, J.$sub$n(J.$add$ns(t3.left, t3.width), 5), J.$add$ns(this.rectangle.top, 50));
    },
    static: {"": "UISymbol_activeSymbol,UISymbol_symbols", UISymbol_reset: function() {
        $.UISymbol_activeSymbol = null;
        U.UISymbol_deselect();
        var t1 = $.engine.renderer;
        J.set$cursor$x(J.get$style$x(J.get$view$x(t1.$index(t1, "main"))), "url('images/Normal.cur') 2 2, pointer");
      }, UISymbol_add: function(position, template, keyCode) {
        var symbol = new U.UISymbol(null, keyCode, false, false, template);
        symbol.rectangle = H.setRuntimeTypeInfo(new P.Rectangle(position.x, position.y, 80, 55), [null]);
        $.get$UISymbol_symbols().push(symbol);
        return symbol;
      }, UISymbol_checkHovered: function(evt) {
        var t1, t2, t3, mousePosition, i;
        t1 = J.getInterceptor$x(evt);
        t2 = t1.get$client(evt);
        t2 = t2.get$x(t2);
        t3 = $.engine.renderer;
        t3 = J.$sub$n(t2, J.get$left$x(J.getBoundingClientRect$0$x(J.get$view$x(t3.$index(t3, "gui")))));
        t1 = t1.get$client(evt);
        t1 = t1.get$y(t1);
        t2 = $.engine.renderer;
        mousePosition = H.setRuntimeTypeInfo(new P.Point(t3, J.$sub$n(t1, J.get$top$x(J.getBoundingClientRect$0$x(J.get$view$x(t2.$index(t2, "gui")))))), [null]);
        for (i = 0; t1 = $.get$UISymbol_symbols(), i < t1.length; ++i) {
          t1 = t1[i];
          t2 = t1.rectangle;
          t1.hovered = t2.containsPoint$1(t2, mousePosition);
        }
      }, UISymbol_select: function(evt) {
        var t1, i, t2;
        for (t1 = J.getInterceptor$x(evt), i = 0; t2 = $.get$UISymbol_symbols(), i < t2.length; ++i) {
          t2 = t2[i];
          t2.active = false;
          if (t1.get$keyCode(evt) === t2.keyCode) {
            $.UISymbol_activeSymbol = t2;
            t2.active = true;
            t2 = $.engine.renderer;
            J.set$cursor$x(J.get$style$x(J.get$view$x(t2.$index(t2, "main"))), "none");
          }
        }
      }, UISymbol_deselect: function() {
        var i, t1;
        for (i = 0; t1 = $.get$UISymbol_symbols(), i < t1.length; ++i)
          t1[i].active = false;
        $.UISymbol_activeSymbol = null;
      }, UISymbol_setActive: function() {
        var i, t1;
        for (i = 0; t1 = $.get$UISymbol_symbols(), i < t1.length; ++i) {
          t1 = t1[i];
          if (t1.hovered) {
            $.UISymbol_activeSymbol = t1;
            t1.active = true;
          } else
            t1.active = false;
        }
        if ($.UISymbol_activeSymbol != null) {
          t1 = $.engine.renderer;
          J.set$cursor$x(J.get$style$x(J.get$view$x(t1.$index(t1, "main"))), "none");
        }
      }}
  },
  Vector: {
    "": "Object;x>,y>",
    $add: function(_, other) {
      var t1 = J.getInterceptor$x(other);
      return new U.Vector(J.$add$ns(this.x, t1.get$x(other)), J.$add$ns(this.y, t1.get$y(other)));
    },
    $sub: function(_, other) {
      var t1 = J.getInterceptor$x(other);
      return new U.Vector(J.$sub$n(this.x, t1.get$x(other)), J.$sub$n(this.y, t1.get$y(other)));
    },
    $mul: function(_, other) {
      return new U.Vector(J.$mul$n(this.x, other), J.$mul$n(this.y, other));
    },
    $div: function(_, other) {
      return new U.Vector(J.$div$n(this.x, other), J.$div$n(this.y, other));
    },
    $eq: function(_, other) {
      var t1;
      if (other == null)
        return false;
      t1 = J.getInterceptor$x(other);
      return J.$eq(this.x, t1.get$x(other)) && J.$eq(this.y, t1.get$y(other));
    },
    toString$0: function(_) {
      return H.S(this.x) + "/" + H.S(this.y);
    },
    distanceTo$1: function(other) {
      var t1, t2;
      t1 = J.$sub$n(this.x, J.get$x$x(other));
      if (typeof t1 !== "number")
        H.throwExpression(new P.ArgumentError(t1));
      t1 = Math.pow(t1, 2);
      t2 = J.$sub$n(this.y, other.y);
      if (typeof t2 !== "number")
        H.throwExpression(new P.ArgumentError(t2));
      t2 = Math.pow(t2, 2);
      return Math.sqrt(t1 + t2);
    },
    tiled2screen$0: function() {
      var t1, t2, t3, t4;
      t1 = $.engine.halfWidth;
      t2 = J.$mul$n(J.$mul$n(J.$sub$n(this.x, $.game.scroll.x), $.game.tileSize), $.game.zoom);
      if (typeof t2 !== "number")
        return H.iae(t2);
      t3 = $.engine.halfHeight;
      t4 = J.$mul$n(J.$mul$n(J.$sub$n(this.y, $.game.scroll.y), $.game.tileSize), $.game.zoom);
      if (typeof t4 !== "number")
        return H.iae(t4);
      return new U.Vector(t1 + t2, t3 + t4);
    },
    real2screen$0: function() {
      var t1, t2, t3, t4, t5;
      t1 = $.engine.halfWidth;
      t2 = this.x;
      t3 = $.game;
      t3 = J.$mul$n(J.$sub$n(t2, J.$mul$n(t3.scroll.x, t3.tileSize)), $.game.zoom);
      if (typeof t3 !== "number")
        return H.iae(t3);
      t2 = $.engine.halfHeight;
      t4 = this.y;
      t5 = $.game;
      t5 = J.$mul$n(J.$sub$n(t4, J.$mul$n(t5.scroll.y, t5.tileSize)), $.game.zoom);
      if (typeof t5 !== "number")
        return H.iae(t5);
      return new U.Vector(t1 + t3, t2 + t5);
    },
    real2tiled$0: function() {
      var t1, t2, t3;
      t1 = this.x;
      t2 = $.game.tileSize;
      if (typeof t1 !== "number")
        return t1.$tdiv();
      t1 = C.JSNumber_methods.$tdiv(t1, t2);
      t3 = this.y;
      if (typeof t3 !== "number")
        return t3.$tdiv();
      return new U.Vector(t1, C.JSNumber_methods.$tdiv(t3, t2));
    }
  },
  Vector3: {
    "": "Object;x>,y>,z",
    $add: function(_, other) {
      return new U.Vector3(J.$add$ns(this.x, C.JSNumber_methods.get$x(other)), J.$add$ns(this.y, C.JSNumber_methods.get$y(other)), C.JSNumber_methods.$add(this.z, C.JSNumber_methods.get$z(other)));
    }
  },
  World: {
    "": "Object;tiles,size>",
    contains$1: function(_, position) {
      var t1, t2, t3;
      t1 = position.x;
      if (typeof t1 !== "number")
        return t1.$gt();
      if (t1 > -1) {
        t2 = this.size;
        t3 = t2.x;
        if (typeof t3 !== "number")
          return H.iae(t3);
        if (t1 < t3) {
          t1 = position.y;
          if (typeof t1 !== "number")
            return t1.$gt();
          if (t1 > -1) {
            t2 = t2.y;
            if (typeof t2 !== "number")
              return H.iae(t2);
            t2 = t1 < t2;
            t1 = t2;
          } else
            t1 = false;
        } else
          t1 = false;
      } else
        t1 = false;
      return t1;
    },
    getTile$1: function(position) {
      var t1, t2;
      t1 = this.tiles;
      t2 = J.get$x$x(position);
      if (typeof t2 !== "number")
        return t2.$tdiv();
      t2 = C.JSNumber_methods._tdivFast$1(t2, 16);
      if (t2 >>> 0 !== t2 || t2 >= t1.length)
        return H.ioore(t1, t2);
      t2 = t1[t2];
      t1 = position.y;
      if (typeof t1 !== "number")
        return t1.$tdiv();
      return J.$index$asx(t2, C.JSNumber_methods._tdivFast$1(t1, 16));
    },
    World$1: function(seed) {
      this.size = new U.Vector($.engine.randomInt$3(64, 127, seed), $.engine.randomInt$3(64, 127, seed));
      $.World_creeperCounter = 0;
    },
    static: {"": "World_creeperCounter,World_creeperDirty", World_update: function() {
        var t1, t2, t3, i, j, i0, t4, t5, t6, j0;
        t1 = $.World_creeperCounter;
        t2 = $.game;
        t3 = t2.speed;
        if (typeof t1 !== "number")
          return t1.$add();
        t3 = t1 + 1 * t3;
        $.World_creeperCounter = t3;
        if (t3 >= 25) {
          $.World_creeperCounter = t3 - 25;
          $.World_creeperDirty = true;
          t1 = t2;
          i = 0;
          while (true) {
            t2 = t1.world.size.x;
            if (typeof t2 !== "number")
              return H.iae(t2);
            if (!(i < t2))
              break;
            j = 0;
            while (true) {
              t1 = $.game;
              t2 = t1.world;
              t3 = t2.size.y;
              if (typeof t3 !== "number")
                return H.iae(t3);
              if (!(j < t3))
                break;
              t1 = t2.tiles;
              if (i >= t1.length)
                return H.ioore(t1, i);
              t1 = J.$index$asx(t1[i], j);
              t2 = $.game.world.tiles;
              if (i >= t2.length)
                return H.ioore(t2, i);
              t1.set$newcreep(J.$index$asx(t2[i], j).get$creep());
              ++j;
            }
            ++i;
          }
          i = 0;
          while (true) {
            t2 = t1.world.size.x;
            if (typeof t2 !== "number")
              return H.iae(t2);
            if (!(i < t2))
              break;
            t1 = i - 1;
            t2 = t1 > -1;
            i0 = i + 1;
            j = 0;
            while (true) {
              t3 = $.game;
              t4 = t3.world;
              t5 = t4.size;
              t6 = t5.y;
              if (typeof t6 !== "number")
                return H.iae(t6);
              if (!(j < t6))
                break;
              t3 = t5.x;
              if (typeof t3 !== "number")
                return H.iae(t3);
              if (i0 < t3) {
                t3 = t4.tiles;
                if (i >= t3.length)
                  return H.ioore(t3, i);
                t3 = J.$index$asx(t3[i], j);
                t4 = $.game.world.tiles;
                if (i0 >= t4.length)
                  return H.ioore(t4, i0);
                U.World_transferCreeper(t3, J.$index$asx(t4[i0], j));
              }
              if (t2) {
                t3 = $.game.world.tiles;
                if (i >= t3.length)
                  return H.ioore(t3, i);
                t3 = J.$index$asx(t3[i], j);
                t4 = $.game.world.tiles;
                if (t1 >= t4.length)
                  return H.ioore(t4, t1);
                U.World_transferCreeper(t3, J.$index$asx(t4[t1], j));
              }
              j0 = j + 1;
              t3 = $.game.world;
              t4 = t3.size.y;
              if (typeof t4 !== "number")
                return H.iae(t4);
              if (j0 < t4) {
                t3 = t3.tiles;
                if (i >= t3.length)
                  return H.ioore(t3, i);
                t3 = J.$index$asx(t3[i], j);
                t4 = $.game.world.tiles;
                if (i >= t4.length)
                  return H.ioore(t4, i);
                U.World_transferCreeper(t3, J.$index$asx(t4[i], j0));
              }
              t3 = j - 1;
              if (t3 > -1) {
                t4 = $.game.world.tiles;
                if (i >= t4.length)
                  return H.ioore(t4, i);
                t4 = J.$index$asx(t4[i], j);
                t5 = $.game.world.tiles;
                if (i >= t5.length)
                  return H.ioore(t5, i);
                U.World_transferCreeper(t4, J.$index$asx(t5[i], t3));
              }
              j = j0;
            }
            t1 = t3;
            i = i0;
          }
          i = 0;
          while (true) {
            t1 = t1.world.size.x;
            if (typeof t1 !== "number")
              return H.iae(t1);
            if (!(i < t1))
              break;
            j = 0;
            while (true) {
              t1 = $.game;
              t2 = t1.world;
              t3 = t2.size.y;
              if (typeof t3 !== "number")
                return H.iae(t3);
              if (!(j < t3))
                break;
              t1 = t2.tiles;
              if (i >= t1.length)
                return H.ioore(t1, i);
              if (J.$index$asx(t1[i], j).get$newcreep() > 10) {
                t1 = $.game.world.tiles;
                if (i >= t1.length)
                  return H.ioore(t1, i);
                J.$index$asx(t1[i], j).set$newcreep(10);
              } else {
                t1 = $.game.world.tiles;
                if (i >= t1.length)
                  return H.ioore(t1, i);
                if (J.$index$asx(t1[i], j).get$newcreep() < 0.01) {
                  t1 = $.game.world.tiles;
                  if (i >= t1.length)
                    return H.ioore(t1, i);
                  J.$index$asx(t1[i], j).set$newcreep(0);
                }
              }
              t1 = $.game.world.tiles;
              if (i >= t1.length)
                return H.ioore(t1, i);
              t1 = J.$index$asx(t1[i], j);
              t2 = $.game.world.tiles;
              if (i >= t2.length)
                return H.ioore(t2, i);
              t1.set$creep(J.$index$asx(t2[i], j).get$newcreep());
              ++j;
            }
            ++i;
          }
        }
      }, World_transferCreeper: function(source, target) {
        var t1, sourceCreeper, sourceTotal, targetTotal, delta, adjustedDelta;
        t1 = J.get$height$x(source);
        if (typeof t1 !== "number")
          return t1.$gt();
        if (t1 > -1) {
          t1 = J.get$height$x(target);
          if (typeof t1 !== "number")
            return t1.$gt();
          t1 = t1 > -1;
        } else
          t1 = false;
        if (t1) {
          sourceCreeper = source.get$creep();
          if (sourceCreeper > 0) {
            sourceTotal = J.$add$ns(source.height, source.creep);
            targetTotal = J.$add$ns(J.get$height$x(target), target.get$creep());
            if (typeof sourceTotal !== "number")
              return sourceTotal.$gt();
            if (typeof targetTotal !== "number")
              return H.iae(targetTotal);
            if (sourceTotal > targetTotal) {
              delta = sourceTotal - targetTotal;
              adjustedDelta = (delta > sourceCreeper ? sourceCreeper : delta) * 0.2;
              source.newcreep = source.newcreep - adjustedDelta;
              target.newcreep = target.newcreep + adjustedDelta;
            }
          }
        }
      }}
  }
},
1],
["dart._collection.dev", "dart:_collection-dev", , H, {
  "": "",
  IterableMixinWorkaround_forEach: function(iterable, f) {
    var t1;
    for (t1 = new H.ListIterator(iterable, iterable.length, 0, null); t1.moveNext$0();)
      f.call$1(t1._current);
  },
  IterableMixinWorkaround_any: function(iterable, f) {
    var t1;
    for (t1 = new H.ListIterator(iterable, iterable.length, 0, null); t1.moveNext$0();)
      if (f.call$1(t1._current) === true)
        return true;
    return false;
  },
  IterableMixinWorkaround_toStringIterable: function(iterable, leftDelimiter, rightDelimiter) {
    var result, i, t1;
    for (i = 0; t1 = $.get$IterableMixinWorkaround__toStringList(), i < t1.length; ++i)
      if (t1[i] === iterable)
        return H.S(leftDelimiter) + "..." + H.S(rightDelimiter);
    result = P.StringBuffer$("");
    try {
      $.get$IterableMixinWorkaround__toStringList().push(iterable);
      result.write$1(leftDelimiter);
      result.writeAll$2(iterable, ", ");
      result.write$1(rightDelimiter);
    } finally {
      t1 = $.get$IterableMixinWorkaround__toStringList();
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t1.pop();
    }
    return result.get$_contents();
  },
  IterableMixinWorkaround_shuffleList: function(list, random) {
    var $length, pos, t1, tmp;
    $length = list.length;
    for (; $length > 1;) {
      pos = C.C__JSRandom.nextInt$1($length);
      --$length;
      t1 = list.length;
      if ($length >= t1)
        return H.ioore(list, $length);
      tmp = list[$length];
      if (pos < 0 || pos >= t1)
        return H.ioore(list, pos);
      C.JSArray_methods.$indexSet(list, $length, list[pos]);
      C.JSArray_methods.$indexSet(list, pos, tmp);
    }
  },
  IterableMixinWorkaround_setRangeList: function(list, start, end, from, skipCount) {
    var $length;
    if (start < 0 || start > list.length)
      H.throwExpression(P.RangeError$range(start, 0, list.length));
    if (end < start || end > list.length)
      H.throwExpression(P.RangeError$range(end, start, list.length));
    $length = end - start;
    if ($length === 0)
      return;
    if (skipCount < 0)
      throw H.wrapException(new P.ArgumentError(skipCount));
    if (skipCount + $length > from.length)
      throw H.wrapException(P.StateError$("Not enough elements"));
    H.Lists_copy(from, skipCount, list, start, $length);
  },
  Lists_copy: function(src, srcStart, dst, dstStart, count) {
    var i, j, t1;
    if (srcStart < dstStart)
      for (i = srcStart + count - 1, j = dstStart + count - 1; i >= srcStart; --i, --j) {
        if (i < 0 || i >= src.length)
          return H.ioore(src, i);
        C.JSArray_methods.$indexSet(dst, j, src[i]);
      }
    else
      for (t1 = srcStart + count, j = dstStart, i = srcStart; i < t1; ++i, ++j) {
        if (i < 0 || i >= src.length)
          return H.ioore(src, i);
        C.JSArray_methods.$indexSet(dst, j, src[i]);
      }
  },
  Lists_indexOf: function(a, element, startIndex, endIndex) {
    var i;
    if (startIndex >= a.length)
      return -1;
    for (i = startIndex; i < endIndex; ++i) {
      if (i >= a.length)
        return H.ioore(a, i);
      if (J.$eq(a[i], element))
        return i;
    }
    return -1;
  },
  Sort__doSort: function(a, left, right, compare) {
    if (right - left <= 32)
      H.Sort__insertionSort(a, left, right, compare);
    else
      H.Sort__dualPivotQuicksort(a, left, right, compare);
  },
  Sort__insertionSort: function(a, left, right, compare) {
    var i, t1, el, j, j0;
    for (i = left + 1, t1 = J.getInterceptor$asx(a); i <= right; ++i) {
      el = t1.$index(a, i);
      j = i;
      while (true) {
        if (!(j > left && J.$gt$n(compare.call$2(t1.$index(a, j - 1), el), 0)))
          break;
        j0 = j - 1;
        t1.$indexSet(a, j, t1.$index(a, j0));
        j = j0;
      }
      t1.$indexSet(a, j, el);
    }
  },
  Sort__dualPivotQuicksort: function(a, left, right, compare) {
    var sixth, index1, index5, index3, index2, index4, t1, el1, el2, el3, el4, el5, t0, less, great, k, ak, comp, t2, great0, less0, pivots_are_equal;
    sixth = C.JSInt_methods._tdivFast$1(right - left + 1, 6);
    index1 = left + sixth;
    index5 = right - sixth;
    index3 = C.JSInt_methods._tdivFast$1(left + right, 2);
    index2 = index3 - sixth;
    index4 = index3 + sixth;
    t1 = J.getInterceptor$asx(a);
    el1 = t1.$index(a, index1);
    el2 = t1.$index(a, index2);
    el3 = t1.$index(a, index3);
    el4 = t1.$index(a, index4);
    el5 = t1.$index(a, index5);
    if (J.$gt$n(compare.call$2(el1, el2), 0)) {
      t0 = el2;
      el2 = el1;
      el1 = t0;
    }
    if (J.$gt$n(compare.call$2(el4, el5), 0)) {
      t0 = el5;
      el5 = el4;
      el4 = t0;
    }
    if (J.$gt$n(compare.call$2(el1, el3), 0)) {
      t0 = el3;
      el3 = el1;
      el1 = t0;
    }
    if (J.$gt$n(compare.call$2(el2, el3), 0)) {
      t0 = el3;
      el3 = el2;
      el2 = t0;
    }
    if (J.$gt$n(compare.call$2(el1, el4), 0)) {
      t0 = el4;
      el4 = el1;
      el1 = t0;
    }
    if (J.$gt$n(compare.call$2(el3, el4), 0)) {
      t0 = el4;
      el4 = el3;
      el3 = t0;
    }
    if (J.$gt$n(compare.call$2(el2, el5), 0)) {
      t0 = el5;
      el5 = el2;
      el2 = t0;
    }
    if (J.$gt$n(compare.call$2(el2, el3), 0)) {
      t0 = el3;
      el3 = el2;
      el2 = t0;
    }
    if (J.$gt$n(compare.call$2(el4, el5), 0)) {
      t0 = el5;
      el5 = el4;
      el4 = t0;
    }
    t1.$indexSet(a, index1, el1);
    t1.$indexSet(a, index3, el3);
    t1.$indexSet(a, index5, el5);
    t1.$indexSet(a, index2, t1.$index(a, left));
    t1.$indexSet(a, index4, t1.$index(a, right));
    less = left + 1;
    great = right - 1;
    if (J.$eq(compare.call$2(el2, el4), 0)) {
      for (k = less; k <= great; ++k) {
        ak = t1.$index(a, k);
        comp = compare.call$2(ak, el2);
        t2 = J.getInterceptor(comp);
        if (t2.$eq(comp, 0))
          continue;
        if (t2.$lt(comp, 0)) {
          if (k !== less) {
            t1.$indexSet(a, k, t1.$index(a, less));
            t1.$indexSet(a, less, ak);
          }
          ++less;
        } else
          for (; true;) {
            comp = compare.call$2(t1.$index(a, great), el2);
            t2 = J.getInterceptor$n(comp);
            if (t2.$gt(comp, 0)) {
              --great;
              continue;
            } else {
              great0 = great - 1;
              if (t2.$lt(comp, 0)) {
                t1.$indexSet(a, k, t1.$index(a, less));
                less0 = less + 1;
                t1.$indexSet(a, less, t1.$index(a, great));
                t1.$indexSet(a, great, ak);
                great = great0;
                less = less0;
                break;
              } else {
                t1.$indexSet(a, k, t1.$index(a, great));
                t1.$indexSet(a, great, ak);
                great = great0;
                break;
              }
            }
          }
      }
      pivots_are_equal = true;
    } else {
      for (k = less; k <= great; ++k) {
        ak = t1.$index(a, k);
        if (J.$lt$n(compare.call$2(ak, el2), 0)) {
          if (k !== less) {
            t1.$indexSet(a, k, t1.$index(a, less));
            t1.$indexSet(a, less, ak);
          }
          ++less;
        } else if (J.$gt$n(compare.call$2(ak, el4), 0))
          for (; true;)
            if (J.$gt$n(compare.call$2(t1.$index(a, great), el4), 0)) {
              --great;
              if (great < k)
                break;
              continue;
            } else {
              great0 = great - 1;
              if (J.$lt$n(compare.call$2(t1.$index(a, great), el2), 0)) {
                t1.$indexSet(a, k, t1.$index(a, less));
                less0 = less + 1;
                t1.$indexSet(a, less, t1.$index(a, great));
                t1.$indexSet(a, great, ak);
                great = great0;
                less = less0;
              } else {
                t1.$indexSet(a, k, t1.$index(a, great));
                t1.$indexSet(a, great, ak);
                great = great0;
              }
              break;
            }
      }
      pivots_are_equal = false;
    }
    t2 = less - 1;
    t1.$indexSet(a, left, t1.$index(a, t2));
    t1.$indexSet(a, t2, el2);
    t2 = great + 1;
    t1.$indexSet(a, right, t1.$index(a, t2));
    t1.$indexSet(a, t2, el4);
    H.Sort__doSort(a, left, less - 2, compare);
    H.Sort__doSort(a, great + 2, right, compare);
    if (pivots_are_equal)
      return;
    if (less < index1 && great > index5) {
      for (; J.$eq(compare.call$2(t1.$index(a, less), el2), 0);)
        ++less;
      for (; J.$eq(compare.call$2(t1.$index(a, great), el4), 0);)
        --great;
      for (k = less; k <= great; ++k) {
        ak = t1.$index(a, k);
        if (J.$eq(compare.call$2(ak, el2), 0)) {
          if (k !== less) {
            t1.$indexSet(a, k, t1.$index(a, less));
            t1.$indexSet(a, less, ak);
          }
          ++less;
        } else if (J.$eq(compare.call$2(ak, el4), 0))
          for (; true;)
            if (J.$eq(compare.call$2(t1.$index(a, great), el4), 0)) {
              --great;
              if (great < k)
                break;
              continue;
            } else {
              great0 = great - 1;
              if (J.$lt$n(compare.call$2(t1.$index(a, great), el2), 0)) {
                t1.$indexSet(a, k, t1.$index(a, less));
                less0 = less + 1;
                t1.$indexSet(a, less, t1.$index(a, great));
                t1.$indexSet(a, great, ak);
                great = great0;
                less = less0;
              } else {
                t1.$indexSet(a, k, t1.$index(a, great));
                t1.$indexSet(a, great, ak);
                great = great0;
              }
              break;
            }
      }
      H.Sort__doSort(a, less, great, compare);
    } else
      H.Sort__doSort(a, less, great, compare);
  },
  Symbol_getName: function(symbol) {
    return symbol.get$_name();
  },
  ListIterable: {
    "": "IterableBase;",
    get$iterator: function(_) {
      return new H.ListIterator(this, this.get$length(this), 0, null);
    },
    forEach$1: function(_, action) {
      var $length, i;
      $length = this.get$length(this);
      for (i = 0; i < $length; ++i) {
        action.call$1(this.elementAt$1(this, i));
        if ($length !== this.get$length(this))
          throw H.wrapException(P.ConcurrentModificationError$(this));
      }
    },
    $asIterableBase: null,
    $isEfficientLength: true
  },
  ListIterator: {
    "": "Object;_iterable,_length,_index,_current",
    get$current: function() {
      return this._current;
    },
    moveNext$0: function() {
      var t1, t2, $length, t3;
      t1 = this._iterable;
      t2 = J.getInterceptor$asx(t1);
      $length = t2.get$length(t1);
      if (this._length !== $length)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      t3 = this._index;
      if (t3 >= $length) {
        this._current = null;
        return false;
      }
      this._current = t2.elementAt$1(t1, t3);
      this._index = this._index + 1;
      return true;
    }
  },
  MappedIterable: {
    "": "IterableBase;_iterable,_f",
    get$iterator: function(_) {
      var t1 = this._iterable;
      t1 = new H.MappedIterator(null, t1.get$iterator(t1), this._f);
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      return t1;
    },
    get$length: function(_) {
      var t1 = this._iterable;
      return t1.get$length(t1);
    },
    $asIterableBase: function($S, $T) {
      return [$T];
    },
    static: {MappedIterable_MappedIterable: function(iterable, $function, $S, $T) {
        if (!!iterable.$isEfficientLength)
          return H.setRuntimeTypeInfo(new H.EfficientLengthMappedIterable(iterable, $function), [$S, $T]);
        return H.setRuntimeTypeInfo(new H.MappedIterable(iterable, $function), [$S, $T]);
      }}
  },
  EfficientLengthMappedIterable: {
    "": "MappedIterable;_iterable,_f",
    $asMappedIterable: null,
    $isEfficientLength: true
  },
  MappedIterator: {
    "": "Iterator;_current,_iterator,_f",
    _f$1: function(arg0) {
      return this._f.call$1(arg0);
    },
    moveNext$0: function() {
      var t1 = this._iterator;
      if (t1.moveNext$0()) {
        this._current = this._f$1(t1.get$current());
        return true;
      }
      this._current = null;
      return false;
    },
    get$current: function() {
      return this._current;
    },
    $asIterator: function($S, $T) {
      return [$T];
    }
  },
  MappedListIterable: {
    "": "ListIterable;_source,_f",
    _f$1: function(arg0) {
      return this._f.call$1(arg0);
    },
    get$length: function(_) {
      return J.get$length$asx(this._source);
    },
    elementAt$1: function(_, index) {
      return this._f$1(J.elementAt$1$ax(this._source, index));
    },
    $asListIterable: function($S, $T) {
      return [$T];
    },
    $isEfficientLength: true
  },
  WhereIterable: {
    "": "IterableBase;_iterable,_f",
    get$iterator: function(_) {
      var t1 = new H.WhereIterator(J.get$iterator$ax(this._iterable), this._f);
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      return t1;
    },
    $asIterableBase: null
  },
  WhereIterator: {
    "": "Iterator;_iterator,_f",
    _f$1: function(arg0) {
      return this._f.call$1(arg0);
    },
    moveNext$0: function() {
      for (var t1 = this._iterator; t1.moveNext$0();)
        if (this._f$1(t1.get$current()) === true)
          return true;
      return false;
    },
    get$current: function() {
      return this._iterator.get$current();
    },
    $asIterator: null
  },
  FixedLengthListMixin: {
    "": "Object;",
    set$length: function(receiver, newLength) {
      throw H.wrapException(P.UnsupportedError$("Cannot change the length of a fixed-length list"));
    },
    add$1: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot add to a fixed-length list"));
    },
    clear$0: function(receiver) {
      throw H.wrapException(P.UnsupportedError$("Cannot clear a fixed-length list"));
    }
  }
}],
["dart._js_names", "dart:_js_names", , H, {
  "": "",
  extractKeys: function(victim) {
    var t1 = H.setRuntimeTypeInfo((function(victim, hasOwnProperty) {
  var result = [];
  for (var key in victim) {
    if (hasOwnProperty.call(victim, key)) result.push(key);
  }
  return result;
})(victim, Object.prototype.hasOwnProperty), [null]);
    t1.fixed$length = init;
    return t1;
  }
}],
["dart.async", "dart:async", , P, {
  "": "",
  _invokeErrorHandler: function(errorHandler, error, stackTrace) {
    var t1 = H.getDynamicRuntimeType();
    t1 = H.buildFunctionType(t1, [t1, t1])._isTest$1(errorHandler);
    if (t1)
      return errorHandler.call$2(error, stackTrace);
    else
      return errorHandler.call$1(error);
  },
  _registerErrorHandler: function(errorHandler, zone) {
    var t1 = H.getDynamicRuntimeType();
    t1 = H.buildFunctionType(t1, [t1, t1])._isTest$1(errorHandler);
    zone.toString;
    if (t1)
      return errorHandler;
    else
      return errorHandler;
  },
  _asyncRunCallback: [function() {
    var callback, t1, exception, milliseconds;
    for (; t1 = $.get$_asyncCallbacks(), t1._head !== t1._tail;) {
      callback = t1.removeFirst$0();
      try {
        callback.call$0();
      } catch (exception) {
        H.unwrapException(exception);
        milliseconds = C.JSInt_methods._tdivFast$1(C.Duration_0._duration, 1000);
        H.TimerImpl$(milliseconds < 0 ? 0 : milliseconds, P._asyncRunCallback$closure());
        throw exception;
      }

    }
    $._callbacksAreEnqueued = false;
  }, "call$0", "_asyncRunCallback$closure", 0, 0, 1],
  _scheduleAsyncCallback: function(callback) {
    $.get$_asyncCallbacks()._add$1(callback);
    if (!$._callbacksAreEnqueued) {
      P._createTimer(C.Duration_0, P._asyncRunCallback$closure());
      $._callbacksAreEnqueued = true;
    }
  },
  scheduleMicrotask: function(callback) {
    var t1 = $.Zone__current;
    if (t1 === C.C__RootZone) {
      t1.toString;
      P._rootScheduleMicrotask(t1, null, t1, callback);
      return;
    }
    P._rootScheduleMicrotask(t1, null, t1, t1.bindCallback$2$runGuarded(callback, true));
  },
  StreamController_StreamController: function(onCancel, onListen, onPause, onResume, sync, $T) {
    return sync ? H.setRuntimeTypeInfo(new P._SyncStreamController(onListen, onPause, onResume, onCancel, null, 0, null), [$T]) : H.setRuntimeTypeInfo(new P._AsyncStreamController(onListen, onPause, onResume, onCancel, null, 0, null), [$T]);
  },
  _runGuarded: function(notificationHandler) {
    var result, e, s, t1, t2, exception;
    if (notificationHandler == null)
      return;
    try {
      result = notificationHandler.call$0();
      t1 = result;
      t2 = J.getInterceptor(t1);
      if (typeof t1 === "object" && t1 !== null && !!t2.$isFuture)
        return result;
      return;
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      s = new H._StackTrace(exception, null);
      t1 = $.Zone__current;
      t1.toString;
      P._rootHandleUncaughtError(t1, null, t1, e, s);
    }

  },
  _nullDataHandler: [function(value) {
  }, "call$1", "_nullDataHandler$closure", 2, 0, 2],
  _nullErrorHandler: [function(error, stackTrace) {
    var t1 = $.Zone__current;
    t1.toString;
    P._rootHandleUncaughtError(t1, null, t1, error, stackTrace);
  }, function(error) {
    return P._nullErrorHandler(error, null);
  }, null, "call$2", "call$1", "_nullErrorHandler$closure", 2, 2, 3, 4],
  _nullDoneHandler: [function() {
    return;
  }, "call$0", "_nullDoneHandler$closure", 0, 0, 1],
  _runUserCode: function(userCode, onSuccess, onError) {
    var e, s, exception, t1;
    try {
      onSuccess.call$1(userCode.call$0());
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      s = new H._StackTrace(exception, null);
      onError.call$2(e, s);
    }

  },
  _cancelAndError: function(subscription, future, error, stackTrace) {
    var cancelFuture, t1;
    cancelFuture = subscription.cancel$0();
    t1 = J.getInterceptor(cancelFuture);
    if (typeof cancelFuture === "object" && cancelFuture !== null && !!t1.$isFuture)
      cancelFuture.whenComplete$1(new P._cancelAndError_closure(future, error, stackTrace));
    else
      future._completeError$2(error, stackTrace);
  },
  _cancelAndErrorClosure: function(subscription, future) {
    return new P._cancelAndErrorClosure_closure(subscription, future);
  },
  Timer_Timer: function(duration, callback) {
    var t1 = $.Zone__current;
    if (t1 === C.C__RootZone) {
      t1.toString;
      return P._rootCreateTimer(t1, null, t1, duration, callback);
    }
    return P._rootCreateTimer(t1, null, t1, duration, t1.bindCallback$2$runGuarded(callback, true));
  },
  Timer_Timer$periodic: function(duration, callback) {
    var t1 = $.Zone__current;
    if (t1 === C.C__RootZone) {
      t1.toString;
      return P._rootCreatePeriodicTimer(t1, null, t1, duration, callback);
    }
    return P._rootCreatePeriodicTimer(t1, null, t1, duration, t1.bindUnaryCallback$2$runGuarded(callback, true));
  },
  _createTimer: function(duration, callback) {
    var milliseconds = C.JSInt_methods._tdivFast$1(duration._duration, 1000);
    return H.TimerImpl$(milliseconds < 0 ? 0 : milliseconds, callback);
  },
  _rootHandleUncaughtError: function($self, $parent, zone, error, stackTrace) {
    P._rootRun($self, null, $self, new P._rootHandleUncaughtError_closure(error, stackTrace));
  },
  _rootRun: function($self, $parent, zone, f) {
    var old, t1, t2;
    t1 = $.Zone__current;
    t2 = zone;
    if (t1 == null ? t2 == null : t1 === t2)
      return f.call$0();
    old = t1;
    try {
      $.Zone__current = zone;
      t1 = f.call$0();
      return t1;
    } finally {
      $.Zone__current = old;
    }
  },
  _rootRunUnary: function($self, $parent, zone, f, arg) {
    var old, t1, t2;
    t1 = $.Zone__current;
    t2 = zone;
    if (t1 == null ? t2 == null : t1 === t2)
      return f.call$1(arg);
    old = t1;
    try {
      $.Zone__current = zone;
      t1 = f.call$1(arg);
      return t1;
    } finally {
      $.Zone__current = old;
    }
  },
  _rootScheduleMicrotask: function($self, $parent, zone, f) {
    P._scheduleAsyncCallback(C.C__RootZone !== zone ? zone.bindCallback$1(f) : f);
  },
  _rootCreateTimer: function($self, $parent, zone, duration, callback) {
    return P._createTimer(duration, C.C__RootZone !== zone ? zone.bindCallback$1(callback) : callback);
  },
  _rootCreatePeriodicTimer: function($self, $parent, zone, duration, callback) {
    var milliseconds;
    if (C.C__RootZone !== zone)
      callback = zone.bindUnaryCallback$1(callback);
    milliseconds = C.JSInt_methods._tdivFast$1(duration._duration, 1000);
    return H.TimerImpl$periodic(milliseconds < 0 ? 0 : milliseconds, callback);
  },
  _AsyncError: {
    "": "Object;error>,stackTrace<",
    $isError: true
  },
  Future: {
    "": "Object;",
    $isFuture: true
  },
  _Completer: {
    "": "Object;"
  },
  _AsyncCompleter: {
    "": "_Completer;future",
    $as_Completer: null
  },
  _Future: {
    "": "Object;_state,_zone<,_resultOrListeners,_nextListener<,_onValueCallback,_errorTestCallback,_onErrorCallback,_whenCompleteActionCallback",
    get$_isComplete: function() {
      return this._state >= 4;
    },
    get$_hasError: function() {
      return this._state === 8;
    },
    set$_isChained: function(value) {
      if (value)
        this._state = 2;
      else
        this._state = 0;
    },
    get$_onValue: function() {
      return this._state === 2 ? null : this._onValueCallback;
    },
    _onValue$1: function(arg0) {
      return this.get$_onValue().call$1(arg0);
    },
    get$_whenCompleteAction: function() {
      return this._state === 2 ? null : this._whenCompleteActionCallback;
    },
    _whenCompleteAction$0: function() {
      return this.get$_whenCompleteAction().call$0();
    },
    then$2$onError: function(f, onError) {
      var t1, result;
      t1 = $.Zone__current;
      t1.toString;
      result = H.setRuntimeTypeInfo(new P._Future(0, t1, null, null, f, null, P._registerErrorHandler(onError, t1), null), [null]);
      this._addListener$1(result);
      return result;
    },
    then$1: function(f) {
      return this.then$2$onError(f, null);
    },
    whenComplete$1: function(action) {
      var t1, result;
      t1 = $.Zone__current;
      t1.toString;
      result = new P._Future(0, t1, null, null, null, null, null, action);
      result.$builtinTypeInfo = this.$builtinTypeInfo;
      this._addListener$1(result);
      return result;
    },
    get$_value: function() {
      return this._resultOrListeners;
    },
    get$_error: function() {
      return this._resultOrListeners;
    },
    _setValue$1: function(value) {
      this._state = 4;
      this._resultOrListeners = value;
    },
    _setError$2: function(error, stackTrace) {
      this._state = 8;
      this._resultOrListeners = new P._AsyncError(error, stackTrace);
    },
    _addListener$1: function(listener) {
      var t1;
      if (this._state >= 4) {
        t1 = this._zone;
        t1.toString;
        P._rootScheduleMicrotask(t1, null, t1, new P._Future__addListener_closure(this, listener));
      } else {
        listener._nextListener = this._resultOrListeners;
        this._resultOrListeners = listener;
      }
    },
    _removeListeners$0: function() {
      var current, prev, next;
      current = this._resultOrListeners;
      this._resultOrListeners = null;
      for (prev = null; current != null; prev = current, current = next) {
        next = current.get$_nextListener();
        current._nextListener = prev;
      }
      return prev;
    },
    _complete$1: function(value) {
      var t1, listeners;
      t1 = J.getInterceptor(value);
      if (typeof value === "object" && value !== null && !!t1.$isFuture) {
        P._Future__chainFutures(value, this);
        return;
      }
      listeners = this._removeListeners$0();
      this._setValue$1(value);
      P._Future__propagateToListeners(this, listeners);
    },
    _completeError$2: [function(error, stackTrace) {
      var listeners = this._removeListeners$0();
      this._setError$2(error, stackTrace);
      P._Future__propagateToListeners(this, listeners);
    }, function(error) {
      return this._completeError$2(error, null);
    }, "_completeError$1", "call$2", "call$1", "get$_completeError", 2, 2, 3, 4],
    _asyncComplete$1: function(value) {
      var t1;
      if (this._state !== 0)
        H.throwExpression(P.StateError$("Future already completed"));
      this._state = 1;
      t1 = this._zone;
      t1.toString;
      P._rootScheduleMicrotask(t1, null, t1, new P._Future__asyncComplete_closure(this, value));
    },
    $is_Future: true,
    $isFuture: true,
    static: {"": "_Future__INCOMPLETE,_Future__PENDING_COMPLETE,_Future__CHAINED,_Future__VALUE,_Future__ERROR", _Future$: function($T) {
        return H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null, null, null, null, null, null), [$T]);
      }, _Future__chainFutures: function(source, target) {
        var t1;
        target._state = 2;
        t1 = J.getInterceptor(source);
        if (typeof source === "object" && source !== null && !!t1.$is_Future)
          if (source._state >= 4)
            P._Future__propagateToListeners(source, target);
          else
            source._addListener$1(target);
        else
          source.then$2$onError(new P._Future__chainFutures_closure(target), new P._Future__chainFutures_closure0(target));
      }, _Future__propagateMultipleListeners: function(source, listeners) {
        var listeners0;
        do {
          listeners0 = listeners.get$_nextListener();
          listeners._nextListener = null;
          P._Future__propagateToListeners(source, listeners);
          if (listeners0 != null) {
            listeners = listeners0;
            continue;
          } else
            break;
        } while (true);
      }, _Future__propagateToListeners: function(source, listeners) {
        var t1, t2, t3, hasError, asyncError, t4, t5, chainSource, listeners0;
        t1 = {};
        t1.source_4 = source;
        for (t2 = source; true;) {
          t3 = {};
          if (!t2.get$_isComplete())
            return;
          hasError = t1.source_4.get$_hasError();
          if (hasError && listeners == null) {
            t2 = t1.source_4;
            asyncError = t2.get$_error();
            t2 = t2._zone;
            t3 = J.get$error$x(asyncError);
            t4 = asyncError.get$stackTrace();
            t2.toString;
            P._rootHandleUncaughtError(t2, null, t2, t3, t4);
            return;
          }
          if (listeners == null)
            return;
          if (listeners._nextListener != null) {
            P._Future__propagateMultipleListeners(t1.source_4, listeners);
            return;
          }
          if (hasError) {
            t2 = t1.source_4.get$_zone();
            t4 = listeners._zone;
            t2.toString;
            t4.toString;
            t2 = t4 == null ? t2 != null : t4 !== t2;
          } else
            t2 = false;
          if (t2) {
            t2 = t1.source_4;
            asyncError = t2.get$_error();
            t2 = t2._zone;
            t3 = J.get$error$x(asyncError);
            t4 = asyncError.get$stackTrace();
            t2.toString;
            P._rootHandleUncaughtError(t2, null, t2, t3, t4);
            return;
          }
          t2 = $.Zone__current;
          t4 = listeners._zone;
          if (t2 == null ? t4 != null : t2 !== t4) {
            t4.toString;
            P._rootRun(t4, null, t4, new P._Future__propagateToListeners_closure(t1, listeners));
            return;
          }
          t3.listenerHasValue_1 = null;
          t3.listenerValueOrError_2 = null;
          t3.isPropagationAborted_3 = false;
          t4.toString;
          P._rootRun(t4, null, t4, new P._Future__propagateToListeners_closure0(t1, t3, hasError, listeners));
          if (t3.isPropagationAborted_3)
            return;
          t2 = t3.listenerHasValue_1 === true;
          if (t2) {
            t4 = t3.listenerValueOrError_2;
            t5 = J.getInterceptor(t4);
            t5 = typeof t4 === "object" && t4 !== null && !!t5.$isFuture;
            t4 = t5;
          } else
            t4 = false;
          if (t4) {
            chainSource = t3.listenerValueOrError_2;
            t2 = J.getInterceptor(chainSource);
            if (typeof chainSource === "object" && chainSource !== null && !!t2.$is_Future && chainSource._state >= 4) {
              listeners._state = 2;
              t1.source_4 = chainSource;
              t2 = chainSource;
              continue;
            }
            P._Future__chainFutures(chainSource, listeners);
            return;
          }
          if (t2) {
            listeners0 = listeners._removeListeners$0();
            t2 = t3.listenerValueOrError_2;
            listeners._state = 4;
            listeners._resultOrListeners = t2;
          } else {
            listeners0 = listeners._removeListeners$0();
            asyncError = t3.listenerValueOrError_2;
            t2 = J.get$error$x(asyncError);
            t3 = asyncError.get$stackTrace();
            listeners._state = 8;
            listeners._resultOrListeners = new P._AsyncError(t2, t3);
          }
          t1.source_4 = listeners;
          t2 = listeners;
          listeners = listeners0;
        }
      }}
  },
  _Future__addListener_closure: {
    "": "Closure:12;this_0,listener_1",
    call$0: function() {
      P._Future__propagateToListeners(this.this_0, this.listener_1);
    }
  },
  _Future__chainFutures_closure: {
    "": "Closure:14;target_0",
    call$1: function(value) {
      this.target_0._complete$1(value);
    }
  },
  _Future__chainFutures_closure0: {
    "": "Closure:20;target_1",
    call$2: function(error, stackTrace) {
      this.target_1._completeError$2(error, stackTrace);
    },
    call$1: function(error) {
      return this.call$2(error, null);
    }
  },
  _Future__asyncComplete_closure: {
    "": "Closure:12;this_0,value_1",
    call$0: function() {
      this.this_0._complete$1(this.value_1);
    }
  },
  _Future__propagateToListeners_closure: {
    "": "Closure:12;box_2,listener_3",
    call$0: function() {
      P._Future__propagateToListeners(this.box_2.source_4, this.listener_3);
    }
  },
  _Future__propagateToListeners_closure0: {
    "": "Closure:12;box_2,box_1,hasError_4,listener_5",
    call$0: function() {
      var t1, value, asyncError, test, matchesTest, errorCallback, e, s, t2, t3, t4, t5, completeResult, exception;
      t1 = {};
      try {
        t2 = this.box_2;
        if (!this.hasError_4) {
          value = t2.source_4.get$_value();
          t3 = this.listener_5;
          t4 = t3._state === 2 ? null : t3._onValueCallback;
          t5 = this.box_1;
          if (t4 != null) {
            t5.listenerValueOrError_2 = t3._onValue$1(value);
            t5.listenerHasValue_1 = true;
          } else {
            t5.listenerValueOrError_2 = value;
            t5.listenerHasValue_1 = true;
          }
          t4 = t5;
        } else {
          asyncError = t2.source_4.get$_error();
          t3 = this.listener_5;
          test = t3._state === 2 ? null : t3._errorTestCallback;
          matchesTest = true;
          if (test != null)
            matchesTest = test.call$1(J.get$error$x(asyncError));
          if (matchesTest === true)
            t4 = (t3._state === 2 ? null : t3._onErrorCallback) != null;
          else
            t4 = false;
          if (t4) {
            errorCallback = t3._state === 2 ? null : t3._onErrorCallback;
            t4 = this.box_1;
            t4.listenerValueOrError_2 = P._invokeErrorHandler(errorCallback, J.get$error$x(asyncError), asyncError.get$stackTrace());
            t4.listenerHasValue_1 = true;
          } else {
            t4 = this.box_1;
            t4.listenerValueOrError_2 = asyncError;
            t4.listenerHasValue_1 = false;
          }
        }
        if ((t3._state === 2 ? null : t3._whenCompleteActionCallback) != null) {
          completeResult = t3._whenCompleteAction$0();
          t1.completeResult_0 = completeResult;
          t5 = J.getInterceptor(completeResult);
          if (typeof completeResult === "object" && completeResult !== null && !!t5.$isFuture) {
            t3.set$_isChained(true);
            t1.completeResult_0.then$2$onError(new P._Future__propagateToListeners__closure(t2, t3), new P._Future__propagateToListeners__closure0(t1, t3));
            t4.isPropagationAborted_3 = true;
          }
        }
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        if (this.hasError_4) {
          t1 = J.get$error$x(this.box_2.source_4.get$_error());
          t2 = e;
          t2 = t1 == null ? t2 == null : t1 === t2;
          t1 = t2;
        } else
          t1 = false;
        t2 = this.box_1;
        if (t1)
          t2.listenerValueOrError_2 = this.box_2.source_4.get$_error();
        else
          t2.listenerValueOrError_2 = new P._AsyncError(e, s);
        t2.listenerHasValue_1 = false;
      }

    }
  },
  _Future__propagateToListeners__closure: {
    "": "Closure:14;box_2,listener_6",
    call$1: function(ignored) {
      P._Future__propagateToListeners(this.box_2.source_4, this.listener_6);
    }
  },
  _Future__propagateToListeners__closure0: {
    "": "Closure:20;box_0,listener_7",
    call$2: function(error, stackTrace) {
      var t1, t2, t3, completeResult;
      t1 = this.box_0;
      t2 = t1.completeResult_0;
      t3 = J.getInterceptor(t2);
      if (typeof t2 !== "object" || t2 === null || !t3.$is_Future) {
        completeResult = P._Future$(null);
        t1.completeResult_0 = completeResult;
        completeResult._setError$2(error, stackTrace);
      }
      P._Future__propagateToListeners(t1.completeResult_0, this.listener_7);
    },
    call$1: function(error) {
      return this.call$2(error, null);
    }
  },
  Stream: {
    "": "Object;",
    forEach$1: function(_, action) {
      var t1, future;
      t1 = {};
      future = P._Future$(null);
      t1.subscription_0 = null;
      t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_forEach_closure(t1, this, action, future), true, new P.Stream_forEach_closure0(future), future.get$_completeError());
      return future;
    },
    get$length: function(_) {
      var t1, future;
      t1 = {};
      future = P._Future$(J.JSInt);
      t1.count_0 = 0;
      this.listen$4$cancelOnError$onDone$onError(new P.Stream_length_closure(t1), true, new P.Stream_length_closure0(t1, future), future.get$_completeError());
      return future;
    }
  },
  Stream_forEach_closure: {
    "": "Closure;box_0,this_1,action_2,future_3",
    call$1: function(element) {
      P._runUserCode(new P.Stream_forEach__closure(this.action_2, element), new P.Stream_forEach__closure0(), P._cancelAndErrorClosure(this.box_0.subscription_0, this.future_3));
    },
    $signature: function() {
      return H.computeSignature(function(T) {
        return {func: "dynamic__T", args: [T]};
      }, this.this_1, "Stream");
    }
  },
  Stream_forEach__closure: {
    "": "Closure:12;action_4,element_5",
    call$0: function() {
      return this.action_4.call$1(this.element_5);
    }
  },
  Stream_forEach__closure0: {
    "": "Closure:14;",
    call$1: function(_) {
    }
  },
  Stream_forEach_closure0: {
    "": "Closure:12;future_6",
    call$0: function() {
      this.future_6._complete$1(null);
    }
  },
  Stream_length_closure: {
    "": "Closure:14;box_0",
    call$1: function(_) {
      var t1 = this.box_0;
      t1.count_0 = t1.count_0 + 1;
    }
  },
  Stream_length_closure0: {
    "": "Closure:12;box_0,future_1",
    call$0: function() {
      this.future_1._complete$1(this.box_0.count_0);
    }
  },
  StreamSubscription: {
    "": "Object;"
  },
  _StreamController: {
    "": "Object;",
    get$_pendingEvents: function() {
      if ((this._state & 8) === 0)
        return this._varData;
      return this._varData.get$varData();
    },
    _ensurePendingEvents$0: function() {
      if ((this._state & 8) === 0) {
        var t1 = this._varData;
        if (t1 == null) {
          t1 = new P._StreamImplEvents(null, null, 0);
          this._varData = t1;
        }
        return t1;
      }
      t1 = this._varData.get$varData();
      return t1;
    },
    get$_subscription: function() {
      if ((this._state & 8) !== 0)
        return this._varData.get$varData();
      return this._varData;
    },
    _badEventState$0: function() {
      if ((this._state & 4) !== 0)
        return new P.StateError("Cannot add event after closing");
      return new P.StateError("Cannot add event while adding a stream");
    },
    add$1: [function(_, value) {
      var t1 = this._state;
      if (t1 >= 4)
        throw H.wrapException(this._badEventState$0());
      if ((t1 & 1) !== 0)
        this._sendData$1(value);
      else if ((t1 & 3) === 0) {
        t1 = this._ensurePendingEvents$0();
        t1.add$1(t1, new P._DelayedData(value, null));
      }
    }, "call$1", "get$add", 2, 0, function() {
      return H.computeSignature(function(T) {
        return {func: "void__T", void: true, args: [T]};
      }, this.$receiver, "_StreamController");
    }],
    close$0: function(_) {
      var t1, t2;
      t1 = this._state;
      if ((t1 & 4) !== 0)
        return this._doneFuture;
      if (t1 >= 4)
        throw H.wrapException(this._badEventState$0());
      t1 |= 4;
      this._state = t1;
      if (this._doneFuture == null) {
        t2 = P._Future$(null);
        this._doneFuture = t2;
        if ((t1 & 2) !== 0)
          t2._complete$1(null);
      }
      t1 = this._state;
      if ((t1 & 1) !== 0)
        this._sendDone$0();
      else if ((t1 & 3) === 0) {
        t1 = this._ensurePendingEvents$0();
        t1.add$1(t1, C.C__DelayedDone);
      }
      return this._doneFuture;
    },
    _subscribe$1: function(cancelOnError) {
      var t1, t2, subscription, pendingEvents, addState;
      if ((this._state & 3) !== 0)
        throw H.wrapException(new P.StateError("Stream has already been listened to."));
      t1 = $.Zone__current;
      t2 = cancelOnError ? 1 : 0;
      subscription = H.setRuntimeTypeInfo(new P._ControllerSubscription(this, null, null, null, t1, t2, null, null), [null]);
      pendingEvents = this.get$_pendingEvents();
      t2 = this._state | 1;
      this._state = t2;
      if ((t2 & 8) !== 0) {
        addState = this._varData;
        addState.set$varData(subscription);
        addState.resume$0();
      } else
        this._varData = subscription;
      subscription._setPendingEvents$1(pendingEvents);
      subscription._guardCallback$1(new P._StreamController__subscribe_closure(this));
      return subscription;
    },
    _recordCancel$1: function(subscription) {
      var t1, future;
      if ((this._state & 8) !== 0)
        this._varData.cancel$0();
      this._varData = null;
      this._state = this._state & 4294967286 | 2;
      t1 = new P._StreamController__recordCancel_complete(this);
      future = P._runGuarded(this.get$_onCancel());
      if (future != null)
        future = future.whenComplete$1(t1);
      else
        t1.call$0();
      return future;
    }
  },
  _StreamController__subscribe_closure: {
    "": "Closure:12;this_0",
    call$0: function() {
      P._runGuarded(this.this_0.get$_onListen());
    }
  },
  _StreamController__recordCancel_complete: {
    "": "Closure:1;this_0",
    call$0: function() {
      var t1 = this.this_0._doneFuture;
      if (t1 != null && t1._state === 0)
        t1._asyncComplete$1(null);
    }
  },
  _SyncStreamControllerDispatch: {
    "": "Object;",
    _sendData$1: function(data) {
      this.get$_subscription()._async$_add$1(data);
    },
    _sendDone$0: function() {
      this.get$_subscription()._close$0();
    }
  },
  _AsyncStreamControllerDispatch: {
    "": "Object;",
    _sendData$1: function(data) {
      this.get$_subscription()._addPending$1(new P._DelayedData(data, null));
    },
    _sendDone$0: function() {
      this.get$_subscription()._addPending$1(C.C__DelayedDone);
    }
  },
  _AsyncStreamController: {
    "": "_StreamController__AsyncStreamControllerDispatch;_onListen<,_onPause<,_onResume<,_onCancel<,_varData,_state,_doneFuture",
    $as_StreamController__AsyncStreamControllerDispatch: null
  },
  _StreamController__AsyncStreamControllerDispatch: {
    "": "_StreamController+_AsyncStreamControllerDispatch;",
    $as_StreamController: null
  },
  _SyncStreamController: {
    "": "_StreamController__SyncStreamControllerDispatch;_onListen<,_onPause<,_onResume<,_onCancel<,_varData,_state,_doneFuture",
    $as_StreamController__SyncStreamControllerDispatch: null
  },
  _StreamController__SyncStreamControllerDispatch: {
    "": "_StreamController+_SyncStreamControllerDispatch;",
    $as_StreamController: null
  },
  _ControllerStream: {
    "": "_StreamImpl;_async$_controller",
    _createSubscription$1: function(cancelOnError) {
      return this._async$_controller._subscribe$1(cancelOnError);
    },
    get$hashCode: function(_) {
      return (H.Primitives_objectHashCode(this._async$_controller) ^ 892482866) >>> 0;
    },
    $eq: function(_, other) {
      var t1;
      if (other == null)
        return false;
      if (this === other)
        return true;
      t1 = J.getInterceptor(other);
      if (typeof other !== "object" || other === null || !t1.$is_ControllerStream)
        return false;
      return other._async$_controller === this._async$_controller;
    },
    $is_ControllerStream: true,
    $as_StreamImpl: null
  },
  _ControllerSubscription: {
    "": "_BufferingStreamSubscription;_async$_controller,_async$_onData,_onError,_onDone,_zone,_state,_cancelFuture,_pending",
    _onCancel$0: function() {
      return this._async$_controller._recordCancel$1(this);
    },
    _onPause$0: [function() {
      var t1, addState;
      t1 = this._async$_controller;
      if ((t1._state & 8) !== 0) {
        addState = t1._varData;
        addState.pause$0(addState);
      }
      P._runGuarded(t1.get$_onPause());
    }, "call$0", "get$_onPause", 0, 0, 1],
    _onResume$0: [function() {
      var t1 = this._async$_controller;
      if ((t1._state & 8) !== 0)
        t1._varData.resume$0();
      P._runGuarded(t1.get$_onResume());
    }, "call$0", "get$_onResume", 0, 0, 1],
    $as_BufferingStreamSubscription: null
  },
  _EventSink: {
    "": "Object;"
  },
  _BufferingStreamSubscription: {
    "": "Object;_async$_onData,_onError,_onDone,_zone<,_state,_cancelFuture,_pending",
    _setPendingEvents$1: function(pendingEvents) {
      if (pendingEvents == null)
        return;
      this._pending = pendingEvents;
      if (!pendingEvents.get$isEmpty(pendingEvents)) {
        this._state = (this._state | 64) >>> 0;
        pendingEvents.schedule$1(this);
      }
    },
    onData$1: function(handleData) {
      this._zone.toString;
      this._async$_onData = handleData;
    },
    onError$1: function(_, handleError) {
      this._onError = P._registerErrorHandler(handleError, this._zone);
    },
    onDone$1: function(handleDone) {
      this._zone.toString;
      this._onDone = handleDone;
    },
    pause$1: function(_, resumeSignal) {
      var t1 = this._state;
      if ((t1 & 8) !== 0)
        return;
      this._state = (t1 + 128 | 4) >>> 0;
      if (t1 < 128 && this._pending != null)
        this._pending.cancelSchedule$0();
      if ((t1 & 4) === 0 && (this._state & 32) === 0)
        this._guardCallback$1(this.get$_onPause());
    },
    pause$0: function($receiver) {
      return this.pause$1($receiver, null);
    },
    resume$0: function() {
      var t1, t2;
      t1 = this._state;
      if ((t1 & 8) !== 0)
        return;
      if (t1 >= 128) {
        t1 -= 128;
        this._state = t1;
        if (t1 < 128) {
          if ((t1 & 64) !== 0) {
            t2 = this._pending;
            t2 = !t2.get$isEmpty(t2);
          } else
            t2 = false;
          if (t2)
            this._pending.schedule$1(this);
          else {
            t1 = (t1 & 4294967291) >>> 0;
            this._state = t1;
            if ((t1 & 32) === 0)
              this._guardCallback$1(this.get$_onResume());
          }
        }
      }
    },
    cancel$0: function() {
      var t1 = (this._state & 4294967279) >>> 0;
      this._state = t1;
      if ((t1 & 8) !== 0)
        return this._cancelFuture;
      this._cancel$0();
      return this._cancelFuture;
    },
    _cancel$0: function() {
      var t1 = (this._state | 8) >>> 0;
      this._state = t1;
      if ((t1 & 64) !== 0)
        this._pending.cancelSchedule$0();
      if ((this._state & 32) === 0)
        this._pending = null;
      this._cancelFuture = this._onCancel$0();
    },
    _async$_add$1: function(data) {
      var t1 = this._state;
      if ((t1 & 8) !== 0)
        return;
      if (t1 < 32)
        this._sendData$1(data);
      else
        this._addPending$1(new P._DelayedData(data, null));
    },
    _close$0: function() {
      var t1 = this._state;
      if ((t1 & 8) !== 0)
        return;
      t1 = (t1 | 2) >>> 0;
      this._state = t1;
      if (t1 < 32)
        this._sendDone$0();
      else
        this._addPending$1(C.C__DelayedDone);
    },
    _onPause$0: [function() {
    }, "call$0", "get$_onPause", 0, 0, 1],
    _onResume$0: [function() {
    }, "call$0", "get$_onResume", 0, 0, 1],
    _onCancel$0: function() {
    },
    _addPending$1: function($event) {
      var pending, t1;
      pending = this._pending;
      if (pending == null) {
        pending = new P._StreamImplEvents(null, null, 0);
        this._pending = pending;
      }
      pending.add$1(pending, $event);
      t1 = this._state;
      if ((t1 & 64) === 0) {
        t1 = (t1 | 64) >>> 0;
        this._state = t1;
        if (t1 < 128)
          this._pending.schedule$1(this);
      }
    },
    _sendData$1: function(data) {
      var t1 = this._state;
      this._state = (t1 | 32) >>> 0;
      this._zone.runUnaryGuarded$2(this._async$_onData, data);
      this._state = (this._state & 4294967263) >>> 0;
      this._checkState$1((t1 & 4) !== 0);
    },
    _sendDone$0: function() {
      var t1, t2, t3;
      t1 = new P._BufferingStreamSubscription__sendDone_sendDone(this);
      this._cancel$0();
      this._state = (this._state | 16) >>> 0;
      t2 = this._cancelFuture;
      t3 = J.getInterceptor(t2);
      if (typeof t2 === "object" && t2 !== null && !!t3.$isFuture)
        t2.whenComplete$1(t1);
      else
        t1.call$0();
    },
    _guardCallback$1: function(callback) {
      var t1 = this._state;
      this._state = (t1 | 32) >>> 0;
      callback.call$0();
      this._state = (this._state & 4294967263) >>> 0;
      this._checkState$1((t1 & 4) !== 0);
    },
    _checkState$1: function(wasInputPaused) {
      var t1, t2, isInputPaused;
      t1 = this._state;
      if ((t1 & 64) !== 0) {
        t2 = this._pending;
        t2 = t2.get$isEmpty(t2);
      } else
        t2 = false;
      if (t2) {
        t1 = (t1 & 4294967231) >>> 0;
        this._state = t1;
        if ((t1 & 4) !== 0)
          if (t1 < 128) {
            t2 = this._pending;
            t2 = t2 == null || t2.get$isEmpty(t2);
          } else
            t2 = false;
        else
          t2 = false;
        if (t2) {
          t1 = (t1 & 4294967291) >>> 0;
          this._state = t1;
        }
      }
      for (; true; wasInputPaused = isInputPaused) {
        if ((t1 & 8) !== 0) {
          this._pending = null;
          return;
        }
        isInputPaused = (t1 & 4) !== 0;
        if (wasInputPaused === isInputPaused)
          break;
        this._state = (t1 ^ 32) >>> 0;
        if (isInputPaused)
          this._onPause$0();
        else
          this._onResume$0();
        t1 = (this._state & 4294967263) >>> 0;
        this._state = t1;
      }
      if ((t1 & 64) !== 0 && t1 < 128)
        this._pending.schedule$1(this);
    },
    static: {"": "_BufferingStreamSubscription__STATE_CANCEL_ON_ERROR,_BufferingStreamSubscription__STATE_CLOSED,_BufferingStreamSubscription__STATE_INPUT_PAUSED,_BufferingStreamSubscription__STATE_CANCELED,_BufferingStreamSubscription__STATE_WAIT_FOR_CANCEL,_BufferingStreamSubscription__STATE_IN_CALLBACK,_BufferingStreamSubscription__STATE_HAS_PENDING,_BufferingStreamSubscription__STATE_PAUSE_COUNT,_BufferingStreamSubscription__STATE_PAUSE_COUNT_SHIFT"}
  },
  _BufferingStreamSubscription__sendDone_sendDone: {
    "": "Closure:1;this_0",
    call$0: function() {
      var t1, t2;
      t1 = this.this_0;
      t2 = t1._state;
      if ((t2 & 16) === 0)
        return;
      t1._state = (t2 | 42) >>> 0;
      t1._zone.runGuarded$1(t1._onDone);
      t1._state = (t1._state & 4294967263) >>> 0;
    }
  },
  _StreamImpl: {
    "": "Stream;",
    listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
      var subscription = this._createSubscription$1(true === cancelOnError);
      subscription.onData$1(onData);
      subscription.onError$1(subscription, onError);
      subscription.onDone$1(onDone);
      return subscription;
    },
    _createSubscription$1: function(cancelOnError) {
      var t1, t2;
      t1 = $.Zone__current;
      t2 = cancelOnError ? 1 : 0;
      return new P._BufferingStreamSubscription(null, null, null, t1, t2, null, null);
    },
    $asStream: null
  },
  _DelayedEvent: {
    "": "Object;next@"
  },
  _DelayedData: {
    "": "_DelayedEvent;value,next",
    perform$1: function(dispatch) {
      dispatch._sendData$1(this.value);
    }
  },
  _DelayedDone: {
    "": "Object;",
    perform$1: function(dispatch) {
      dispatch._sendDone$0();
    },
    get$next: function() {
      return;
    },
    set$next: function(_) {
      throw H.wrapException(P.StateError$("No events after a done."));
    }
  },
  _PendingEvents: {
    "": "Object;",
    schedule$1: function(dispatch) {
      var t1 = this._state;
      if (t1 === 1)
        return;
      if (t1 >= 1) {
        this._state = 1;
        return;
      }
      P.scheduleMicrotask(new P._PendingEvents_schedule_closure(this, dispatch));
      this._state = 1;
    },
    cancelSchedule$0: function() {
      if (this._state === 1)
        this._state = 3;
    }
  },
  _PendingEvents_schedule_closure: {
    "": "Closure:12;this_0,dispatch_1",
    call$0: function() {
      var t1, oldState;
      t1 = this.this_0;
      oldState = t1._state;
      t1._state = 0;
      if (oldState === 3)
        return;
      t1.handleNext$1(this.dispatch_1);
    }
  },
  _StreamImplEvents: {
    "": "_PendingEvents;firstPendingEvent,lastPendingEvent,_state",
    get$isEmpty: function(_) {
      return this.lastPendingEvent == null;
    },
    add$1: function(_, $event) {
      var t1 = this.lastPendingEvent;
      if (t1 == null) {
        this.lastPendingEvent = $event;
        this.firstPendingEvent = $event;
      } else {
        t1.set$next($event);
        this.lastPendingEvent = $event;
      }
    },
    handleNext$1: function(dispatch) {
      var $event, t1;
      $event = this.firstPendingEvent;
      t1 = $event.get$next();
      this.firstPendingEvent = t1;
      if (t1 == null)
        this.lastPendingEvent = null;
      $event.perform$1(dispatch);
    },
    clear$0: function(_) {
      if (this._state === 1)
        this._state = 3;
      this.lastPendingEvent = null;
      this.firstPendingEvent = null;
    }
  },
  _cancelAndError_closure: {
    "": "Closure:12;future_0,error_1,stackTrace_2",
    call$0: function() {
      return this.future_0._completeError$2(this.error_1, this.stackTrace_2);
    }
  },
  _cancelAndErrorClosure_closure: {
    "": "Closure:21;subscription_0,future_1",
    call$2: function(error, stackTrace) {
      return P._cancelAndError(this.subscription_0, this.future_1, error, stackTrace);
    }
  },
  Timer: {
    "": "Object;"
  },
  _BaseZone: {
    "": "Object;",
    runGuarded$1: function(f) {
      var e, s, t1, exception;
      try {
        t1 = this.run$1(f);
        return t1;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        return this.handleUncaughtError$2(e, s);
      }

    },
    runUnaryGuarded$2: function(f, arg) {
      var e, s, t1, exception;
      try {
        t1 = this.runUnary$2(f, arg);
        return t1;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        return this.handleUncaughtError$2(e, s);
      }

    },
    bindCallback$2$runGuarded: function(f, runGuarded) {
      var registered = this.registerCallback$1(f);
      if (runGuarded)
        return new P._BaseZone_bindCallback_closure(this, registered);
      else
        return new P._BaseZone_bindCallback_closure0(this, registered);
    },
    bindCallback$1: function(f) {
      return this.bindCallback$2$runGuarded(f, true);
    },
    bindUnaryCallback$2$runGuarded: function(f, runGuarded) {
      var registered = this.registerUnaryCallback$1(f);
      if (runGuarded)
        return new P._BaseZone_bindUnaryCallback_closure(this, registered);
      else
        return new P._BaseZone_bindUnaryCallback_closure0(this, registered);
    },
    bindUnaryCallback$1: function(f) {
      return this.bindUnaryCallback$2$runGuarded(f, true);
    }
  },
  _BaseZone_bindCallback_closure: {
    "": "Closure:12;this_0,registered_1",
    call$0: function() {
      return this.this_0.runGuarded$1(this.registered_1);
    }
  },
  _BaseZone_bindCallback_closure0: {
    "": "Closure:12;this_2,registered_3",
    call$0: function() {
      return this.this_2.run$1(this.registered_3);
    }
  },
  _BaseZone_bindUnaryCallback_closure: {
    "": "Closure:14;this_0,registered_1",
    call$1: function(arg) {
      return this.this_0.runUnaryGuarded$2(this.registered_1, arg);
    }
  },
  _BaseZone_bindUnaryCallback_closure0: {
    "": "Closure:14;this_2,registered_3",
    call$1: function(arg) {
      return this.this_2.runUnary$2(this.registered_3, arg);
    }
  },
  _rootHandleUncaughtError_closure: {
    "": "Closure:12;error_0,stackTrace_1",
    call$0: function() {
      P._scheduleAsyncCallback(new P._rootHandleUncaughtError__closure(this.error_0, this.stackTrace_1));
    }
  },
  _rootHandleUncaughtError__closure: {
    "": "Closure:12;error_2,stackTrace_3",
    call$0: function() {
      var t1, trace, t2;
      t1 = this.error_2;
      P.print("Uncaught Error: " + H.S(t1));
      trace = this.stackTrace_3;
      if (trace == null) {
        t2 = J.getInterceptor(t1);
        t2 = typeof t1 === "object" && t1 !== null && !!t2.$isError;
      } else
        t2 = false;
      if (t2)
        trace = t1.get$stackTrace();
      if (trace != null)
        P.print("Stack Trace: \n" + H.S(trace) + "\n");
      throw H.wrapException(t1);
    }
  },
  _RootZone: {
    "": "_BaseZone;",
    $index: function(_, key) {
      return;
    },
    handleUncaughtError$2: function(error, stackTrace) {
      return P._rootHandleUncaughtError(this, null, this, error, stackTrace);
    },
    run$1: function(f) {
      return P._rootRun(this, null, this, f);
    },
    runUnary$2: function(f, arg) {
      return P._rootRunUnary(this, null, this, f, arg);
    },
    registerCallback$1: function(f) {
      return f;
    },
    registerUnaryCallback$1: function(f) {
      return f;
    }
  }
}],
["dart.collection", "dart:collection", , P, {
  "": "",
  _defaultEquals: [function(a, b) {
    return J.$eq(a, b);
  }, "call$2", "_defaultEquals$closure", 4, 0, 5],
  _defaultHashCode: [function(a) {
    return J.get$hashCode$(a);
  }, "call$1", "_defaultHashCode$closure", 2, 0, 6],
  HashMap_HashMap: function(equals, hashCode, isValidKey, $K, $V) {
    return H.setRuntimeTypeInfo(new P._HashMap(0, null, null, null, null), [$K, $V]);
  },
  HashSet_HashSet$identity: function($E) {
    return H.setRuntimeTypeInfo(new P._IdentityHashSet(0, null, null, null, null), [$E]);
  },
  _iterableToString: function(iterable) {
    var parts, t1;
    t1 = $.get$_toStringVisiting();
    if (t1.contains$1(t1, iterable))
      return "(...)";
    t1 = $.get$_toStringVisiting();
    t1.add$1(t1, iterable);
    parts = [];
    try {
      P._iterablePartsToStrings(iterable, parts);
    } finally {
      t1 = $.get$_toStringVisiting();
      t1.remove$1(t1, iterable);
    }
    t1 = P.StringBuffer$("(");
    t1.writeAll$2(parts, ", ");
    t1.write$1(")");
    return t1._contents;
  },
  _iterablePartsToStrings: function(iterable, parts) {
    var it, $length, count, next, ultimateString, penultimateString, penultimate, ultimate, ultimate0, elision;
    it = iterable.get$iterator(iterable);
    $length = 0;
    count = 0;
    while (true) {
      if (!($length < 80 || count < 3))
        break;
      if (!it.moveNext$0())
        return;
      next = H.S(it.get$current());
      parts.push(next);
      $length += next.length + 2;
      ++count;
    }
    if (!it.moveNext$0()) {
      if (count <= 5)
        return;
      if (0 >= parts.length)
        return H.ioore(parts, 0);
      ultimateString = parts.pop();
      if (0 >= parts.length)
        return H.ioore(parts, 0);
      penultimateString = parts.pop();
    } else {
      penultimate = it.get$current();
      ++count;
      if (!it.moveNext$0()) {
        if (count <= 4) {
          parts.push(H.S(penultimate));
          return;
        }
        ultimateString = H.S(penultimate);
        if (0 >= parts.length)
          return H.ioore(parts, 0);
        penultimateString = parts.pop();
        $length += ultimateString.length + 2;
      } else {
        ultimate = it.get$current();
        ++count;
        for (; it.moveNext$0(); penultimate = ultimate, ultimate = ultimate0) {
          ultimate0 = it.get$current();
          ++count;
          if (count > 100) {
            while (true) {
              if (!($length > 75 && count > 3))
                break;
              if (0 >= parts.length)
                return H.ioore(parts, 0);
              $length -= parts.pop().length + 2;
              --count;
            }
            parts.push("...");
            return;
          }
        }
        penultimateString = H.S(penultimate);
        ultimateString = H.S(ultimate);
        $length += ultimateString.length + penultimateString.length + 4;
      }
    }
    if (count > parts.length + 2) {
      $length += 5;
      elision = "...";
    } else
      elision = null;
    while (true) {
      if (!($length > 80 && parts.length > 3))
        break;
      if (0 >= parts.length)
        return H.ioore(parts, 0);
      $length -= parts.pop().length + 2;
      if (elision == null) {
        $length += 5;
        elision = "...";
      }
    }
    if (elision != null)
      parts.push(elision);
    parts.push(penultimateString);
    parts.push(ultimateString);
  },
  LinkedHashMap_LinkedHashMap: function(equals, hashCode, isValidKey, $K, $V) {
    return H.setRuntimeTypeInfo(new P._LinkedHashMap(0, null, null, null, null, null, 0), [$K, $V]);
  },
  LinkedHashSet_LinkedHashSet: function(equals, hashCode, isValidKey, $E) {
    return H.setRuntimeTypeInfo(new P._LinkedHashSet(0, null, null, null, null, null, 0), [$E]);
  },
  Maps_mapToString: function(m) {
    var t1, result, i, t2;
    t1 = {};
    for (i = 0; t2 = $.get$Maps__toStringList(), i < t2.length; ++i)
      if (t2[i] === m)
        return "{...}";
    result = P.StringBuffer$("");
    try {
      $.get$Maps__toStringList().push(m);
      result.write$1("{");
      t1.first_0 = true;
      J.forEach$1$ax(m, new P.Maps_mapToString_closure(t1, result));
      result.write$1("}");
    } finally {
      t1 = $.get$Maps__toStringList();
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t1.pop();
    }
    return result.get$_contents();
  },
  _HashMap: {
    "": "Object;_collection$_length,_strings,_nums,_rest,_keys",
    get$length: function(_) {
      return this._collection$_length;
    },
    get$keys: function() {
      return H.setRuntimeTypeInfo(new P.HashMapKeyIterable(this), [H.getTypeArgumentByIndex(this, 0)]);
    },
    get$values: function(_) {
      return H.MappedIterable_MappedIterable(H.setRuntimeTypeInfo(new P.HashMapKeyIterable(this), [H.getTypeArgumentByIndex(this, 0)]), new P._HashMap_values_closure(this), H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1));
    },
    $index: function(_, key) {
      var strings, t1, entry, nums, rest, bucket, index;
      if (typeof key === "string" && key !== "__proto__") {
        strings = this._strings;
        if (strings == null)
          t1 = null;
        else {
          entry = strings[key];
          t1 = entry === strings ? null : entry;
        }
        return t1;
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this._nums;
        if (nums == null)
          t1 = null;
        else {
          entry = nums[key];
          t1 = entry === nums ? null : entry;
        }
        return t1;
      } else {
        rest = this._rest;
        if (rest == null)
          return;
        bucket = rest[this._computeHashCode$1(key)];
        index = this._findBucketIndex$2(bucket, key);
        return index < 0 ? null : bucket[index + 1];
      }
    },
    $indexSet: function(_, key, value) {
      var strings, nums, rest, hash, bucket, index;
      if (typeof key === "string" && key !== "__proto__") {
        strings = this._strings;
        if (strings == null) {
          strings = P._HashMap__newHashTable();
          this._strings = strings;
        }
        this._addHashTableEntry$3(strings, key, value);
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this._nums;
        if (nums == null) {
          nums = P._HashMap__newHashTable();
          this._nums = nums;
        }
        this._addHashTableEntry$3(nums, key, value);
      } else {
        rest = this._rest;
        if (rest == null) {
          rest = P._HashMap__newHashTable();
          this._rest = rest;
        }
        hash = this._computeHashCode$1(key);
        bucket = rest[hash];
        if (bucket == null) {
          P._HashMap__setTableEntry(rest, hash, [key, value]);
          this._collection$_length = this._collection$_length + 1;
          this._keys = null;
        } else {
          index = this._findBucketIndex$2(bucket, key);
          if (index >= 0)
            bucket[index + 1] = value;
          else {
            bucket.push(key, value);
            this._collection$_length = this._collection$_length + 1;
            this._keys = null;
          }
        }
      }
    },
    clear$0: function(_) {
      if (this._collection$_length > 0) {
        this._keys = null;
        this._rest = null;
        this._nums = null;
        this._strings = null;
        this._collection$_length = 0;
      }
    },
    forEach$1: function(_, action) {
      var keys, $length, i, key;
      keys = this._computeKeys$0();
      for ($length = keys.length, i = 0; i < $length; ++i) {
        key = keys[i];
        action.call$2(key, this.$index(this, key));
        if (keys !== this._keys)
          throw H.wrapException(P.ConcurrentModificationError$(this));
      }
    },
    _computeKeys$0: function() {
      var t1, result, strings, names, entries, index, i, nums, rest, bucket, $length, i0;
      t1 = this._keys;
      if (t1 != null)
        return t1;
      result = Array(this._collection$_length);
      result.fixed$length = init;
      strings = this._strings;
      if (strings != null) {
        names = Object.getOwnPropertyNames(strings);
        entries = names.length;
        for (index = 0, i = 0; i < entries; ++i) {
          result[index] = names[i];
          ++index;
        }
      } else
        index = 0;
      nums = this._nums;
      if (nums != null) {
        names = Object.getOwnPropertyNames(nums);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          result[index] = +names[i];
          ++index;
        }
      }
      rest = this._rest;
      if (rest != null) {
        names = Object.getOwnPropertyNames(rest);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          bucket = rest[names[i]];
          $length = bucket.length;
          for (i0 = 0; i0 < $length; i0 += 2) {
            result[index] = bucket[i0];
            ++index;
          }
        }
      }
      this._keys = result;
      return result;
    },
    _addHashTableEntry$3: function(table, key, value) {
      if (table[key] == null) {
        this._collection$_length = this._collection$_length + 1;
        this._keys = null;
      }
      P._HashMap__setTableEntry(table, key, value);
    },
    _computeHashCode$1: function(key) {
      return J.get$hashCode$(key) & 0x3ffffff;
    },
    _findBucketIndex$2: function(bucket, key) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; i += 2)
        if (J.$eq(bucket[i], key))
          return i;
      return -1;
    },
    $isMap: true,
    static: {_HashMap__setTableEntry: function(table, key, value) {
        if (value == null)
          table[key] = table;
        else
          table[key] = value;
      }, _HashMap__newHashTable: function() {
        var table = Object.create(null);
        P._HashMap__setTableEntry(table, "<non-identifier-key>", table);
        delete table["<non-identifier-key>"];
        return table;
      }}
  },
  _HashMap_values_closure: {
    "": "Closure:14;this_0",
    call$1: function(each) {
      var t1 = this.this_0;
      return t1.$index(t1, each);
    }
  },
  HashMapKeyIterable: {
    "": "IterableBase;_map",
    get$length: function(_) {
      return this._map._collection$_length;
    },
    get$iterator: function(_) {
      var t1 = this._map;
      return new P.HashMapKeyIterator(t1, t1._computeKeys$0(), 0, null);
    },
    forEach$1: function(_, f) {
      var t1, keys, $length, i;
      t1 = this._map;
      keys = t1._computeKeys$0();
      for ($length = keys.length, i = 0; i < $length; ++i) {
        f.call$1(keys[i]);
        if (keys !== t1._keys)
          throw H.wrapException(P.ConcurrentModificationError$(t1));
      }
    },
    $asIterableBase: null,
    $isEfficientLength: true
  },
  HashMapKeyIterator: {
    "": "Object;_map,_keys,_offset,_collection$_current",
    get$current: function() {
      return this._collection$_current;
    },
    moveNext$0: function() {
      var keys, offset, t1;
      keys = this._keys;
      offset = this._offset;
      t1 = this._map;
      if (keys !== t1._keys)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else if (offset >= keys.length) {
        this._collection$_current = null;
        return false;
      } else {
        this._collection$_current = keys[offset];
        this._offset = offset + 1;
        return true;
      }
    }
  },
  _LinkedHashMap: {
    "": "Object;_collection$_length,_strings,_nums,_rest,_first,_last,_modifications",
    get$length: function(_) {
      return this._collection$_length;
    },
    get$isEmpty: function(_) {
      return this._collection$_length === 0;
    },
    get$keys: function() {
      return H.setRuntimeTypeInfo(new P.LinkedHashMapKeyIterable(this), [H.getTypeArgumentByIndex(this, 0)]);
    },
    get$values: function(_) {
      return H.MappedIterable_MappedIterable(H.setRuntimeTypeInfo(new P.LinkedHashMapKeyIterable(this), [H.getTypeArgumentByIndex(this, 0)]), new P._LinkedHashMap_values_closure(this), H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1));
    },
    containsKey$1: function(key) {
      var nums, rest;
      if ((key & 0x3ffffff) === key) {
        nums = this._nums;
        if (nums == null)
          return false;
        return nums[key] != null;
      } else {
        rest = this._rest;
        if (rest == null)
          return false;
        return this._findBucketIndex$2(rest[this._computeHashCode$1(key)], key) >= 0;
      }
    },
    $index: function(_, key) {
      var strings, cell, nums, rest, bucket, index;
      if (typeof key === "string" && key !== "__proto__") {
        strings = this._strings;
        if (strings == null)
          return;
        cell = strings[key];
        return cell == null ? null : cell.get$_collection$_value();
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this._nums;
        if (nums == null)
          return;
        cell = nums[key];
        return cell == null ? null : cell.get$_collection$_value();
      } else {
        rest = this._rest;
        if (rest == null)
          return;
        bucket = rest[this._computeHashCode$1(key)];
        index = this._findBucketIndex$2(bucket, key);
        if (index < 0)
          return;
        return bucket[index].get$_collection$_value();
      }
    },
    $indexSet: function(_, key, value) {
      var strings, nums, rest, hash, bucket, index;
      if (typeof key === "string" && key !== "__proto__") {
        strings = this._strings;
        if (strings == null) {
          strings = P._LinkedHashMap__newHashTable();
          this._strings = strings;
        }
        this._addHashTableEntry$3(strings, key, value);
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this._nums;
        if (nums == null) {
          nums = P._LinkedHashMap__newHashTable();
          this._nums = nums;
        }
        this._addHashTableEntry$3(nums, key, value);
      } else {
        rest = this._rest;
        if (rest == null) {
          rest = P._LinkedHashMap__newHashTable();
          this._rest = rest;
        }
        hash = this._computeHashCode$1(key);
        bucket = rest[hash];
        if (bucket == null)
          rest[hash] = [this._newLinkedCell$2(key, value)];
        else {
          index = this._findBucketIndex$2(bucket, key);
          if (index >= 0)
            bucket[index].set$_collection$_value(value);
          else
            bucket.push(this._newLinkedCell$2(key, value));
        }
      }
    },
    remove$1: function(_, key) {
      var rest, bucket, index, cell;
      if (typeof key === "string" && key !== "__proto__")
        return this._removeHashTableEntry$2(this._strings, key);
      else if (typeof key === "number" && (key & 0x3ffffff) === key)
        return this._removeHashTableEntry$2(this._nums, key);
      else {
        rest = this._rest;
        if (rest == null)
          return;
        bucket = rest[this._computeHashCode$1(key)];
        index = this._findBucketIndex$2(bucket, key);
        if (index < 0)
          return;
        cell = bucket.splice(index, 1)[0];
        this._unlinkCell$1(cell);
        return cell.get$_collection$_value();
      }
    },
    clear$0: function(_) {
      if (this._collection$_length > 0) {
        this._last = null;
        this._first = null;
        this._rest = null;
        this._nums = null;
        this._strings = null;
        this._collection$_length = 0;
        this._modifications = this._modifications + 1 & 67108863;
      }
    },
    forEach$1: function(_, action) {
      var cell, modifications;
      cell = this._first;
      modifications = this._modifications;
      for (; cell != null;) {
        action.call$2(cell.get$_key(), cell._collection$_value);
        if (modifications !== this._modifications)
          throw H.wrapException(P.ConcurrentModificationError$(this));
        cell = cell._next;
      }
    },
    _addHashTableEntry$3: function(table, key, value) {
      var cell = table[key];
      if (cell == null)
        table[key] = this._newLinkedCell$2(key, value);
      else
        cell.set$_collection$_value(value);
    },
    _removeHashTableEntry$2: function(table, key) {
      var cell;
      if (table == null)
        return;
      cell = table[key];
      if (cell == null)
        return;
      this._unlinkCell$1(cell);
      delete table[key];
      return cell.get$_collection$_value();
    },
    _newLinkedCell$2: function(key, value) {
      var cell, last;
      cell = new P.LinkedHashMapCell(key, value, null, null);
      if (this._first == null) {
        this._last = cell;
        this._first = cell;
      } else {
        last = this._last;
        cell._previous = last;
        last.set$_next(cell);
        this._last = cell;
      }
      this._collection$_length = this._collection$_length + 1;
      this._modifications = this._modifications + 1 & 67108863;
      return cell;
    },
    _unlinkCell$1: function(cell) {
      var previous, next;
      previous = cell.get$_previous();
      next = cell.get$_next();
      if (previous == null)
        this._first = next;
      else
        previous.set$_next(next);
      if (next == null)
        this._last = previous;
      else
        next.set$_previous(previous);
      this._collection$_length = this._collection$_length - 1;
      this._modifications = this._modifications + 1 & 67108863;
    },
    _computeHashCode$1: function(key) {
      return J.get$hashCode$(key) & 0x3ffffff;
    },
    _findBucketIndex$2: function(bucket, key) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq(bucket[i].get$_key(), key))
          return i;
      return -1;
    },
    toString$0: function(_) {
      return P.Maps_mapToString(this);
    },
    $isMap: true,
    static: {_LinkedHashMap__newHashTable: function() {
        var table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        return table;
      }}
  },
  _LinkedHashMap_values_closure: {
    "": "Closure:14;this_0",
    call$1: function(each) {
      var t1 = this.this_0;
      return t1.$index(t1, each);
    }
  },
  LinkedHashMapCell: {
    "": "Object;_key<,_collection$_value@,_next@,_previous@"
  },
  LinkedHashMapKeyIterable: {
    "": "IterableBase;_map",
    get$length: function(_) {
      return this._map._collection$_length;
    },
    get$iterator: function(_) {
      var t1, t2;
      t1 = this._map;
      t2 = new P.LinkedHashMapKeyIterator(t1, t1._modifications, null, null);
      t2._cell = t1._first;
      return t2;
    },
    forEach$1: function(_, f) {
      var t1, cell, modifications;
      t1 = this._map;
      cell = t1._first;
      modifications = t1._modifications;
      for (; cell != null;) {
        f.call$1(cell.get$_key());
        if (modifications !== t1._modifications)
          throw H.wrapException(P.ConcurrentModificationError$(t1));
        cell = cell._next;
      }
    },
    $asIterableBase: null,
    $isEfficientLength: true
  },
  LinkedHashMapKeyIterator: {
    "": "Object;_map,_modifications,_cell,_collection$_current",
    get$current: function() {
      return this._collection$_current;
    },
    moveNext$0: function() {
      var t1 = this._map;
      if (this._modifications !== t1._modifications)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else {
        t1 = this._cell;
        if (t1 == null) {
          this._collection$_current = null;
          return false;
        } else {
          this._collection$_current = t1.get$_key();
          this._cell = t1._next;
          return true;
        }
      }
    }
  },
  _HashSet: {
    "": "_HashSetBase;",
    get$iterator: function(_) {
      return new P.HashSetIterator(this, this._computeElements$0(), 0, null);
    },
    get$length: function(_) {
      return this._collection$_length;
    },
    contains$1: function(_, object) {
      var strings, nums, rest;
      if (typeof object === "string" && object !== "__proto__") {
        strings = this._strings;
        return strings == null ? false : strings[object] != null;
      } else if (typeof object === "number" && (object & 0x3ffffff) === object) {
        nums = this._nums;
        return nums == null ? false : nums[object] != null;
      } else {
        rest = this._rest;
        if (rest == null)
          return false;
        return this._findBucketIndex$2(rest[this._computeHashCode$1(object)], object) >= 0;
      }
    },
    lookup$1: function(object) {
      var t1, rest, bucket, index;
      if (!(typeof object === "string" && object !== "__proto__"))
        t1 = typeof object === "number" && (object & 0x3ffffff) === object;
      else
        t1 = true;
      if (t1)
        return this.contains$1(this, object) ? object : null;
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(object)];
      index = this._findBucketIndex$2(bucket, object);
      if (index < 0)
        return;
      return J.$index$asx(bucket, index);
    },
    add$1: function(_, element) {
      var rest, table, hash, bucket;
      rest = this._rest;
      if (rest == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._rest = table;
        rest = table;
      }
      hash = this._computeHashCode$1(element);
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [element];
      else {
        if (this._findBucketIndex$2(bucket, element) >= 0)
          return false;
        bucket.push(element);
      }
      this._collection$_length = this._collection$_length + 1;
      this._elements = null;
      return true;
    },
    remove$1: function(_, object) {
      var rest, bucket, index;
      if (typeof object === "string" && object !== "__proto__")
        return this._removeHashTableEntry$2(this._strings, object);
      else if (typeof object === "number" && (object & 0x3ffffff) === object)
        return this._removeHashTableEntry$2(this._nums, object);
      else {
        rest = this._rest;
        if (rest == null)
          return false;
        bucket = rest[this._computeHashCode$1(object)];
        index = this._findBucketIndex$2(bucket, object);
        if (index < 0)
          return false;
        this._collection$_length = this._collection$_length - 1;
        this._elements = null;
        bucket.splice(index, 1);
        return true;
      }
    },
    clear$0: function(_) {
      if (this._collection$_length > 0) {
        this._elements = null;
        this._rest = null;
        this._nums = null;
        this._strings = null;
        this._collection$_length = 0;
      }
    },
    _computeElements$0: function() {
      var t1, result, strings, names, entries, index, i, nums, rest, bucket, $length, i0;
      t1 = this._elements;
      if (t1 != null)
        return t1;
      result = Array(this._collection$_length);
      result.fixed$length = init;
      strings = this._strings;
      if (strings != null) {
        names = Object.getOwnPropertyNames(strings);
        entries = names.length;
        for (index = 0, i = 0; i < entries; ++i) {
          result[index] = names[i];
          ++index;
        }
      } else
        index = 0;
      nums = this._nums;
      if (nums != null) {
        names = Object.getOwnPropertyNames(nums);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          result[index] = +names[i];
          ++index;
        }
      }
      rest = this._rest;
      if (rest != null) {
        names = Object.getOwnPropertyNames(rest);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          bucket = rest[names[i]];
          $length = bucket.length;
          for (i0 = 0; i0 < $length; ++i0) {
            result[index] = bucket[i0];
            ++index;
          }
        }
      }
      this._elements = result;
      return result;
    },
    _removeHashTableEntry$2: function(table, element) {
      if (table != null && table[element] != null) {
        delete table[element];
        this._collection$_length = this._collection$_length - 1;
        this._elements = null;
        return true;
      } else
        return false;
    },
    _computeHashCode$1: function(element) {
      return J.get$hashCode$(element) & 0x3ffffff;
    },
    _findBucketIndex$2: function(bucket, element) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq(bucket[i], element))
          return i;
      return -1;
    },
    $as_HashSetBase: null,
    $isEfficientLength: true
  },
  _IdentityHashSet: {
    "": "_HashSet;_collection$_length,_strings,_nums,_rest,_elements",
    _computeHashCode$1: function(key) {
      return H.objectHashCode(key) & 0x3ffffff;
    },
    _findBucketIndex$2: function(bucket, element) {
      var $length, i, t1;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i) {
        t1 = bucket[i];
        if (t1 == null ? element == null : t1 === element)
          return i;
      }
      return -1;
    },
    $as_HashSet: null
  },
  HashSetIterator: {
    "": "Object;_set,_elements,_offset,_collection$_current",
    get$current: function() {
      return this._collection$_current;
    },
    moveNext$0: function() {
      var elements, offset, t1;
      elements = this._elements;
      offset = this._offset;
      t1 = this._set;
      if (elements !== t1._elements)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else if (offset >= elements.length) {
        this._collection$_current = null;
        return false;
      } else {
        this._collection$_current = elements[offset];
        this._offset = offset + 1;
        return true;
      }
    }
  },
  _LinkedHashSet: {
    "": "_HashSetBase;_collection$_length,_strings,_nums,_rest,_first,_last,_modifications",
    get$iterator: function(_) {
      var t1 = new P.LinkedHashSetIterator(this, this._modifications, null, null);
      t1._cell = this._first;
      return t1;
    },
    get$length: function(_) {
      return this._collection$_length;
    },
    contains$1: function(_, object) {
      var strings, nums, rest;
      if (typeof object === "string" && object !== "__proto__") {
        strings = this._strings;
        if (strings == null)
          return false;
        return strings[object] != null;
      } else if (typeof object === "number" && (object & 0x3ffffff) === object) {
        nums = this._nums;
        if (nums == null)
          return false;
        return nums[object] != null;
      } else {
        rest = this._rest;
        if (rest == null)
          return false;
        return this._findBucketIndex$2(rest[this._computeHashCode$1(object)], object) >= 0;
      }
    },
    lookup$1: function(object) {
      var t1, rest, bucket, index;
      if (!(typeof object === "string" && object !== "__proto__"))
        t1 = typeof object === "number" && (object & 0x3ffffff) === object;
      else
        t1 = true;
      if (t1)
        return this.contains$1(this, object) ? object : null;
      else {
        rest = this._rest;
        if (rest == null)
          return;
        bucket = rest[this._computeHashCode$1(object)];
        index = this._findBucketIndex$2(bucket, object);
        if (index < 0)
          return;
        return J.$index$asx(bucket, index).get$_collection$_element();
      }
    },
    forEach$1: function(_, action) {
      var cell, modifications;
      cell = this._first;
      modifications = this._modifications;
      for (; cell != null;) {
        action.call$1(cell.get$_collection$_element());
        if (modifications !== this._modifications)
          throw H.wrapException(P.ConcurrentModificationError$(this));
        cell = cell._next;
      }
    },
    add$1: function(_, element) {
      var strings, table, nums, rest, hash, bucket;
      if (typeof element === "string" && element !== "__proto__") {
        strings = this._strings;
        if (strings == null) {
          table = Object.create(null);
          table["<non-identifier-key>"] = table;
          delete table["<non-identifier-key>"];
          this._strings = table;
          strings = table;
        }
        return this._addHashTableEntry$2(strings, element);
      } else if (typeof element === "number" && (element & 0x3ffffff) === element) {
        nums = this._nums;
        if (nums == null) {
          table = Object.create(null);
          table["<non-identifier-key>"] = table;
          delete table["<non-identifier-key>"];
          this._nums = table;
          nums = table;
        }
        return this._addHashTableEntry$2(nums, element);
      } else {
        rest = this._rest;
        if (rest == null) {
          table = Object.create(null);
          table["<non-identifier-key>"] = table;
          delete table["<non-identifier-key>"];
          this._rest = table;
          rest = table;
        }
        hash = this._computeHashCode$1(element);
        bucket = rest[hash];
        if (bucket == null)
          rest[hash] = [this._newLinkedCell$1(element)];
        else {
          if (this._findBucketIndex$2(bucket, element) >= 0)
            return false;
          bucket.push(this._newLinkedCell$1(element));
        }
        return true;
      }
    },
    addAll$1: function(_, objects) {
      var t1;
      for (t1 = J.get$iterator$ax(objects); t1.moveNext$0();)
        this.add$1(this, t1._current);
    },
    clear$0: function(_) {
      if (this._collection$_length > 0) {
        this._last = null;
        this._first = null;
        this._rest = null;
        this._nums = null;
        this._strings = null;
        this._collection$_length = 0;
        this._modifications = this._modifications + 1 & 67108863;
      }
    },
    _addHashTableEntry$2: function(table, element) {
      if (table[element] != null)
        return false;
      table[element] = this._newLinkedCell$1(element);
      return true;
    },
    _newLinkedCell$1: function(element) {
      var cell, last;
      cell = new P.LinkedHashSetCell(element, null, null);
      if (this._first == null) {
        this._last = cell;
        this._first = cell;
      } else {
        last = this._last;
        cell._previous = last;
        last.set$_next(cell);
        this._last = cell;
      }
      this._collection$_length = this._collection$_length + 1;
      this._modifications = this._modifications + 1 & 67108863;
      return cell;
    },
    _computeHashCode$1: function(element) {
      return J.get$hashCode$(element) & 0x3ffffff;
    },
    _findBucketIndex$2: function(bucket, element) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq(bucket[i].get$_collection$_element(), element))
          return i;
      return -1;
    },
    $as_HashSetBase: null,
    $isEfficientLength: true
  },
  LinkedHashSetCell: {
    "": "Object;_collection$_element<,_next@,_previous@"
  },
  LinkedHashSetIterator: {
    "": "Object;_set,_modifications,_cell,_collection$_current",
    get$current: function() {
      return this._collection$_current;
    },
    moveNext$0: function() {
      var t1 = this._set;
      if (this._modifications !== t1._modifications)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else {
        t1 = this._cell;
        if (t1 == null) {
          this._collection$_current = null;
          return false;
        } else {
          this._collection$_current = t1.get$_collection$_element();
          this._cell = t1._next;
          return true;
        }
      }
    }
  },
  _HashSetBase: {
    "": "IterableBase;",
    toString$0: function(_) {
      return H.IterableMixinWorkaround_toStringIterable(this, "{", "}");
    },
    $asIterableBase: null,
    $isEfficientLength: true
  },
  IterableBase: {
    "": "Object;",
    forEach$1: function(_, f) {
      var t1;
      for (t1 = this.get$iterator(this); t1.moveNext$0();)
        f.call$1(t1.get$current());
    },
    toList$1$growable: function(_, growable) {
      return P.List_List$from(this, growable, H.getRuntimeTypeArgument(this, "IterableBase", 0));
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    get$length: function(_) {
      var it, count;
      it = this.get$iterator(this);
      for (count = 0; it.moveNext$0();)
        ++count;
      return count;
    },
    get$single: function(_) {
      var it, result;
      it = this.get$iterator(this);
      if (!it.moveNext$0())
        throw H.wrapException(P.StateError$("No elements"));
      result = it.get$current();
      if (it.moveNext$0())
        throw H.wrapException(P.StateError$("More than one element"));
      return result;
    },
    elementAt$1: function(_, index) {
      var t1, remaining, element;
      if (index < 0)
        throw H.wrapException(P.RangeError$value(index));
      for (t1 = this.get$iterator(this), remaining = index; t1.moveNext$0();) {
        element = t1.get$current();
        if (remaining === 0)
          return element;
        --remaining;
      }
      throw H.wrapException(P.RangeError$value(index));
    },
    toString$0: function(_) {
      return P._iterableToString(this);
    }
  },
  ListBase: {
    "": "Object+ListMixin;",
    $isList: true,
    $asList: null,
    $isEfficientLength: true
  },
  ListMixin: {
    "": "Object;",
    get$iterator: function(receiver) {
      return new H.ListIterator(receiver, this.get$length(receiver), 0, null);
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    forEach$1: function(receiver, action) {
      var $length, i;
      $length = this.get$length(receiver);
      for (i = 0; i < $length; ++i) {
        action.call$1(this.$index(receiver, i));
        if ($length !== this.get$length(receiver))
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
    },
    where$1: function(receiver, test) {
      return H.setRuntimeTypeInfo(new H.WhereIterable(receiver, test), [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
    },
    toList$1$growable: function(receiver, growable) {
      var result, i, t1;
      if (growable) {
        result = H.setRuntimeTypeInfo([], [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
        C.JSArray_methods.set$length(result, this.get$length(receiver));
      } else
        result = H.setRuntimeTypeInfo(Array(this.get$length(receiver)), [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
      for (i = 0; i < this.get$length(receiver); ++i) {
        t1 = this.$index(receiver, i);
        if (i >= result.length)
          return H.ioore(result, i);
        result[i] = t1;
      }
      return result;
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    add$1: function(receiver, element) {
      var t1 = this.get$length(receiver);
      this.set$length(receiver, t1 + 1);
      this.$indexSet(receiver, t1, element);
    },
    clear$0: function(receiver) {
      this.set$length(receiver, 0);
    },
    toString$0: function(receiver) {
      var result, t1;
      t1 = $.get$_toStringVisiting();
      if (t1.contains$1(t1, receiver))
        return "[...]";
      result = P.StringBuffer$("");
      try {
        t1 = $.get$_toStringVisiting();
        t1.add$1(t1, receiver);
        result.write$1("[");
        result.writeAll$2(receiver, ", ");
        result.write$1("]");
      } finally {
        t1 = $.get$_toStringVisiting();
        t1.remove$1(t1, receiver);
      }
      return result.get$_contents();
    },
    $isList: true,
    $asList: null,
    $isEfficientLength: true
  },
  Maps_mapToString_closure: {
    "": "Closure:13;box_0,result_1",
    call$2: function(k, v) {
      var t1 = this.box_0;
      if (!t1.first_0)
        this.result_1.write$1(", ");
      t1.first_0 = false;
      t1 = this.result_1;
      t1.write$1(k);
      t1.write$1(": ");
      t1.write$1(v);
    }
  },
  ListQueue: {
    "": "IterableBase;_table,_head,_tail,_modificationCount",
    get$iterator: function(_) {
      return new P._ListQueueIterator(this, this._tail, this._modificationCount, this._head, null);
    },
    forEach$1: function(_, action) {
      var modificationCount, i, t1;
      modificationCount = this._modificationCount;
      for (i = this._head; i !== this._tail; i = (i + 1 & this._table.length - 1) >>> 0) {
        t1 = this._table;
        if (i < 0 || i >= t1.length)
          return H.ioore(t1, i);
        action.call$1(t1[i]);
        if (modificationCount !== this._modificationCount)
          H.throwExpression(P.ConcurrentModificationError$(this));
      }
    },
    get$length: function(_) {
      return (this._tail - this._head & this._table.length - 1) >>> 0;
    },
    add$1: function(_, element) {
      this._add$1(element);
    },
    clear$0: function(_) {
      var i, t1, t2, t3, t4;
      i = this._head;
      t1 = this._tail;
      if (i !== t1) {
        for (t2 = this._table, t3 = t2.length, t4 = t3 - 1; i !== t1; i = (i + 1 & t4) >>> 0) {
          if (i < 0 || i >= t3)
            return H.ioore(t2, i);
          t2[i] = null;
        }
        this._tail = 0;
        this._head = 0;
        this._modificationCount = this._modificationCount + 1;
      }
    },
    toString$0: function(_) {
      return H.IterableMixinWorkaround_toStringIterable(this, "{", "}");
    },
    removeFirst$0: function() {
      var t1, t2, t3, result;
      t1 = this._head;
      if (t1 === this._tail)
        throw H.wrapException(P.StateError$("No elements"));
      this._modificationCount = this._modificationCount + 1;
      t2 = this._table;
      t3 = t2.length;
      if (t1 >= t3)
        return H.ioore(t2, t1);
      result = t2[t1];
      this._head = (t1 + 1 & t3 - 1) >>> 0;
      return result;
    },
    _add$1: function(element) {
      var t1, t2, t3, newTable, split;
      t1 = this._table;
      t2 = this._tail;
      t3 = t1.length;
      if (t2 < 0 || t2 >= t3)
        return H.ioore(t1, t2);
      t1[t2] = element;
      t2 = (t2 + 1 & t3 - 1) >>> 0;
      this._tail = t2;
      if (this._head === t2) {
        newTable = Array(t3 * 2);
        newTable.fixed$length = init;
        newTable.$builtinTypeInfo = [H.getTypeArgumentByIndex(this, 0)];
        t1 = this._table;
        t2 = this._head;
        split = t1.length - t2;
        H.IterableMixinWorkaround_setRangeList(newTable, 0, split, t1, t2);
        t1 = this._head;
        t2 = this._table;
        H.IterableMixinWorkaround_setRangeList(newTable, split, split + t1, t2, 0);
        this._head = 0;
        this._tail = this._table.length;
        this._table = newTable;
      }
      this._modificationCount = this._modificationCount + 1;
    },
    ListQueue$1: function(initialCapacity, $E) {
      var t1 = Array(8);
      t1.fixed$length = init;
      this._table = H.setRuntimeTypeInfo(t1, [$E]);
    },
    $asIterableBase: null,
    $isEfficientLength: true,
    static: {"": "ListQueue__INITIAL_CAPACITY"}
  },
  _ListQueueIterator: {
    "": "Object;_queue,_end,_modificationCount,_collection$_position,_collection$_current",
    get$current: function() {
      return this._collection$_current;
    },
    moveNext$0: function() {
      var t1, t2, t3;
      t1 = this._queue;
      if (this._modificationCount !== t1._modificationCount)
        H.throwExpression(P.ConcurrentModificationError$(t1));
      t2 = this._collection$_position;
      if (t2 === this._end) {
        this._collection$_current = null;
        return false;
      }
      t1 = t1._table;
      t3 = t1.length;
      if (t2 >= t3)
        return H.ioore(t1, t2);
      this._collection$_current = t1[t2];
      this._collection$_position = (t2 + 1 & t3 - 1) >>> 0;
      return true;
    }
  }
}],
["dart.core", "dart:core", , P, {
  "": "",
  _symbolToString: function(symbol) {
    return H.Symbol_getName(symbol);
  },
  Comparable_compare: [function(a, b) {
    return J.compareTo$1$ns(a, b);
  }, "call$2", "Comparable_compare$closure", 4, 0, 7],
  Error_safeToString: function(object) {
    var buffer, t1, i, t2, codeUnit, charCodes;
    if (typeof object === "number" || typeof object === "boolean" || null == object)
      return J.toString$0(object);
    if (typeof object === "string") {
      buffer = new P.StringBuffer("");
      buffer._contents = "\"";
      for (t1 = object.length, i = 0, t2 = "\""; i < t1; ++i) {
        codeUnit = C.JSString_methods.codeUnitAt$1(object, i);
        if (codeUnit <= 31)
          if (codeUnit === 10) {
            t2 = buffer._contents + "\\n";
            buffer._contents = t2;
          } else if (codeUnit === 13) {
            t2 = buffer._contents + "\\r";
            buffer._contents = t2;
          } else if (codeUnit === 9) {
            t2 = buffer._contents + "\\t";
            buffer._contents = t2;
          } else {
            t2 = buffer._contents + "\\x";
            buffer._contents = t2;
            if (codeUnit < 16)
              buffer._contents = t2 + "0";
            else {
              buffer._contents = t2 + "1";
              codeUnit -= 16;
            }
            t2 = codeUnit < 10 ? 48 + codeUnit : 87 + codeUnit;
            charCodes = P.List_List$filled(1, t2, J.JSInt);
            t2 = H.Primitives_stringFromCharCodes(charCodes);
            t2 = buffer._contents + t2;
            buffer._contents = t2;
          }
        else if (codeUnit === 92) {
          t2 = buffer._contents + "\\\\";
          buffer._contents = t2;
        } else if (codeUnit === 34) {
          t2 = buffer._contents + "\\\"";
          buffer._contents = t2;
        } else {
          charCodes = P.List_List$filled(1, codeUnit, J.JSInt);
          t2 = H.Primitives_stringFromCharCodes(charCodes);
          t2 = buffer._contents + t2;
          buffer._contents = t2;
        }
      }
      t1 = t2 + "\"";
      buffer._contents = t1;
      return t1;
    }
    return "Instance of '" + H.Primitives_objectTypeName(object) + "'";
  },
  Exception_Exception: function(message) {
    return new P._ExceptionImplementation(message);
  },
  identical: [function(a, b) {
    return a == null ? b == null : a === b;
  }, "call$2", "identical$closure", 4, 0, 8],
  identityHashCode: [function(object) {
    return H.objectHashCode(object);
  }, "call$1", "identityHashCode$closure", 2, 0, 9],
  List_List$filled: function($length, fill, $E) {
    var result, t1, i;
    result = J.JSArray_JSArray$fixed($length, $E);
    if ($length !== 0 && true)
      for (t1 = result.length, i = 0; i < t1; ++i)
        result[i] = fill;
    return result;
  },
  List_List$from: function(other, growable, $E) {
    var list, t1, $length, fixedList, t2, i, t3;
    list = H.setRuntimeTypeInfo([], [$E]);
    for (t1 = J.get$iterator$ax(other); t1.moveNext$0();)
      list.push(t1.get$current());
    if (growable)
      return list;
    $length = list.length;
    t1 = Array($length);
    t1.fixed$length = init;
    fixedList = H.setRuntimeTypeInfo(t1, [$E]);
    for (t1 = list.length, t2 = fixedList.length, i = 0; i < $length; ++i) {
      if (i >= t1)
        return H.ioore(list, i);
      t3 = list[i];
      if (i >= t2)
        return H.ioore(fixedList, i);
      fixedList[i] = t3;
    }
    return fixedList;
  },
  print: function(object) {
    var line = H.S(object);
    H.printString(line);
  },
  String_String$fromCharCode: function(charCode) {
    var charCodes = P.List_List$filled(1, charCode, J.JSInt);
    return H.Primitives_stringFromCharCodes(charCodes);
  },
  NoSuchMethodError_toString_closure: {
    "": "Closure:22;box_0",
    call$2: function(key, value) {
      var t1 = this.box_0;
      if (t1.i_1 > 0)
        t1.sb_0.write$1(", ");
      t1.sb_0.write$1(P._symbolToString(key));
    }
  },
  Comparable: {
    "": "Object;"
  },
  DateTime: {
    "": "Object;"
  },
  Duration: {
    "": "Object;_duration<",
    $add: function(_, other) {
      return P.Duration$(0, 0, C.JSInt_methods.$add(this._duration, other.get$_duration()), 0, 0, 0);
    },
    $sub: function(_, other) {
      return P.Duration$(0, 0, C.JSInt_methods.$sub(this._duration, other.get$_duration()), 0, 0, 0);
    },
    $lt: function(_, other) {
      return C.JSInt_methods.$lt(this._duration, other.get$_duration());
    },
    $gt: function(_, other) {
      return C.JSInt_methods.$gt(this._duration, other.get$_duration());
    },
    $ge: function(_, other) {
      return C.JSInt_methods.$ge(this._duration, other.get$_duration());
    },
    $eq: function(_, other) {
      var t1;
      if (other == null)
        return false;
      t1 = J.getInterceptor(other);
      if (typeof other !== "object" || other === null || !t1.$isDuration)
        return false;
      return this._duration === other._duration;
    },
    get$hashCode: function(_) {
      return this._duration & 0x1FFFFFFF;
    },
    compareTo$1: function(_, other) {
      return C.JSInt_methods.compareTo$1(this._duration, other.get$_duration());
    },
    toString$0: function(_) {
      var t1, t2, twoDigitMinutes, twoDigitSeconds, sixDigitUs;
      t1 = new P.Duration_toString_twoDigits();
      t2 = this._duration;
      if (t2 < 0)
        return "-" + H.S(P.Duration$(0, 0, -t2, 0, 0, 0));
      twoDigitMinutes = t1.call$1(C.JSInt_methods.remainder$1(C.JSInt_methods._tdivFast$1(t2, 60000000), 60));
      twoDigitSeconds = t1.call$1(C.JSInt_methods.remainder$1(C.JSInt_methods._tdivFast$1(t2, 1000000), 60));
      sixDigitUs = new P.Duration_toString_sixDigits().call$1(C.JSInt_methods.remainder$1(t2, 1000000));
      return "" + C.JSInt_methods._tdivFast$1(t2, 3600000000) + ":" + H.S(twoDigitMinutes) + ":" + H.S(twoDigitSeconds) + "." + H.S(sixDigitUs);
    },
    $isDuration: true,
    static: {"": "Duration_MICROSECONDS_PER_MILLISECOND,Duration_MILLISECONDS_PER_SECOND,Duration_SECONDS_PER_MINUTE,Duration_MINUTES_PER_HOUR,Duration_HOURS_PER_DAY,Duration_MICROSECONDS_PER_SECOND,Duration_MICROSECONDS_PER_MINUTE,Duration_MICROSECONDS_PER_HOUR,Duration_MICROSECONDS_PER_DAY,Duration_MILLISECONDS_PER_MINUTE,Duration_MILLISECONDS_PER_HOUR,Duration_MILLISECONDS_PER_DAY,Duration_SECONDS_PER_HOUR,Duration_SECONDS_PER_DAY,Duration_MINUTES_PER_DAY,Duration_ZERO", Duration$: function(days, hours, microseconds, milliseconds, minutes, seconds) {
        return new P.Duration(days * 86400000000 + hours * 3600000000 + minutes * 60000000 + seconds * 1000000 + milliseconds * 1000 + microseconds);
      }}
  },
  Duration_toString_sixDigits: {
    "": "Closure:23;",
    call$1: function(n) {
      if (n >= 100000)
        return "" + n;
      if (n >= 10000)
        return "0" + n;
      if (n >= 1000)
        return "00" + n;
      if (n >= 100)
        return "000" + n;
      if (n > 10)
        return "0000" + n;
      return "00000" + n;
    }
  },
  Duration_toString_twoDigits: {
    "": "Closure:23;",
    call$1: function(n) {
      if (n >= 10)
        return "" + n;
      return "0" + n;
    }
  },
  Error: {
    "": "Object;",
    get$stackTrace: function() {
      return new H._StackTrace(this.$thrownJsError, null);
    },
    $isError: true
  },
  NullThrownError: {
    "": "Error;",
    toString$0: function(_) {
      return "Throw of null.";
    }
  },
  ArgumentError: {
    "": "Error;message",
    toString$0: function(_) {
      var t1 = this.message;
      if (t1 != null)
        return "Illegal argument(s): " + H.S(t1);
      return "Illegal argument(s)";
    },
    static: {ArgumentError$: function(message) {
        return new P.ArgumentError(message);
      }}
  },
  RangeError: {
    "": "ArgumentError;message",
    toString$0: function(_) {
      return "RangeError: " + H.S(this.message);
    },
    static: {RangeError$: function(message) {
        return new P.RangeError(message);
      }, RangeError$value: function(value) {
        return new P.RangeError("value " + H.S(value));
      }, RangeError$range: function(value, start, end) {
        return new P.RangeError("value " + H.S(value) + " not in range " + start + ".." + H.S(end));
      }}
  },
  UnsupportedError: {
    "": "Error;message",
    toString$0: function(_) {
      return "Unsupported operation: " + this.message;
    },
    static: {UnsupportedError$: function(message) {
        return new P.UnsupportedError(message);
      }}
  },
  UnimplementedError: {
    "": "Error;message",
    toString$0: function(_) {
      var t1 = this.message;
      return t1 != null ? "UnimplementedError: " + H.S(t1) : "UnimplementedError";
    },
    $isError: true,
    static: {UnimplementedError$: function(message) {
        return new P.UnimplementedError(message);
      }}
  },
  StateError: {
    "": "Error;message",
    toString$0: function(_) {
      return "Bad state: " + this.message;
    },
    static: {StateError$: function(message) {
        return new P.StateError(message);
      }}
  },
  ConcurrentModificationError: {
    "": "Error;modifiedObject",
    toString$0: function(_) {
      var t1 = this.modifiedObject;
      if (t1 == null)
        return "Concurrent modification during iteration.";
      return "Concurrent modification during iteration: " + H.S(P.Error_safeToString(t1)) + ".";
    },
    static: {ConcurrentModificationError$: function(modifiedObject) {
        return new P.ConcurrentModificationError(modifiedObject);
      }}
  },
  StackOverflowError: {
    "": "Object;",
    toString$0: function(_) {
      return "Stack Overflow";
    },
    get$stackTrace: function() {
      return;
    },
    $isError: true
  },
  CyclicInitializationError: {
    "": "Error;variableName",
    toString$0: function(_) {
      return "Reading static variable '" + this.variableName + "' during its initialization";
    },
    static: {CyclicInitializationError$: function(variableName) {
        return new P.CyclicInitializationError(variableName);
      }}
  },
  _ExceptionImplementation: {
    "": "Object;message",
    toString$0: function(_) {
      var t1 = this.message;
      if (t1 == null)
        return "Exception";
      return "Exception: " + H.S(t1);
    }
  },
  FormatException: {
    "": "Object;message",
    toString$0: function(_) {
      return "FormatException: " + H.S(this.message);
    },
    static: {FormatException$: function(message) {
        return new P.FormatException(message);
      }}
  },
  Expando: {
    "": "Object;name",
    toString$0: function(_) {
      return "Expando:" + H.S(this.name);
    },
    $index: function(_, object) {
      var values = H.Primitives_getProperty(object, "expando$values");
      return values == null ? null : H.Primitives_getProperty(values, this._getKey$0());
    },
    $indexSet: function(_, object, value) {
      var values = H.Primitives_getProperty(object, "expando$values");
      if (values == null) {
        values = new P.Object();
        H.Primitives_setProperty(object, "expando$values", values);
      }
      H.Primitives_setProperty(values, this._getKey$0(), value);
    },
    _getKey$0: function() {
      var key, t1;
      key = H.Primitives_getProperty(this, "expando$key");
      if (key == null) {
        t1 = $.Expando__keyCount;
        $.Expando__keyCount = t1 + 1;
        key = "expando$key$" + t1;
        H.Primitives_setProperty(this, "expando$key", key);
      }
      return key;
    },
    static: {"": "Expando__KEY_PROPERTY_NAME,Expando__EXPANDO_PROPERTY_NAME,Expando__keyCount"}
  },
  Iterable: {
    "": "Object;"
  },
  Iterator: {
    "": "Object;"
  },
  Null: {
    "": "Object;",
    toString$0: function(_) {
      return "null";
    }
  },
  Object: {
    "": ";",
    $eq: function(_, other) {
      return this === other;
    },
    get$hashCode: function(_) {
      return H.Primitives_objectHashCode(this);
    },
    toString$0: function(_) {
      return H.Primitives_objectToString(this);
    }
  },
  StackTrace: {
    "": "Object;"
  },
  Stopwatch: {
    "": "Object;_start,_stop",
    start$0: function(_) {
      var t1, t2, t3;
      t1 = this._start == null;
      if (!t1 && this._stop == null)
        return;
      if (t1)
        this._start = H.Primitives_numMicroseconds();
      else {
        t1 = H.Primitives_numMicroseconds();
        t2 = this._stop;
        t3 = this._start;
        if (typeof t2 !== "number")
          return t2.$sub();
        if (typeof t3 !== "number")
          return H.iae(t3);
        this._start = t1 - (t2 - t3);
        this._stop = null;
      }
    },
    stop$0: function(_) {
      if (!(this._start != null && this._stop == null))
        return;
      this._stop = H.Primitives_numMicroseconds();
    },
    reset$0: function(_) {
      var t1;
      if (this._start == null)
        return;
      t1 = H.Primitives_numMicroseconds();
      this._start = t1;
      if (this._stop != null)
        this._stop = t1;
    },
    get$elapsedTicks: function() {
      var t1, t2;
      t1 = this._start;
      if (t1 == null)
        return 0;
      t2 = this._stop;
      if (t2 == null) {
        t1 = H.Primitives_numMicroseconds();
        t2 = this._start;
        if (typeof t2 !== "number")
          return H.iae(t2);
        t2 = t1 - t2;
        t1 = t2;
      } else {
        if (typeof t2 !== "number")
          return t2.$sub();
        if (typeof t1 !== "number")
          return H.iae(t1);
        t1 = t2 - t1;
      }
      return t1;
    }
  },
  StringBuffer: {
    "": "Object;_contents<",
    get$length: function(_) {
      return this._contents.length;
    },
    write$1: function(obj) {
      var str = typeof obj === "string" ? obj : H.S(obj);
      this._contents = this._contents + str;
    },
    writeAll$2: function(objects, separator) {
      var iterator, str;
      iterator = J.get$iterator$ax(objects);
      if (!iterator.moveNext$0())
        return;
      if (separator.length === 0)
        do {
          str = iterator.get$current();
          str = typeof str === "string" ? str : H.S(str);
          this._contents = this._contents + str;
        } while (iterator.moveNext$0());
      else {
        this.write$1(iterator.get$current());
        for (; iterator.moveNext$0();) {
          this._contents = this._contents + separator;
          str = iterator.get$current();
          str = typeof str === "string" ? str : H.S(str);
          this._contents = this._contents + str;
        }
      }
    },
    clear$0: function(_) {
      this._contents = "";
    },
    toString$0: function(_) {
      return this._contents;
    },
    StringBuffer$1: function($content) {
      this._contents = $content;
    },
    static: {StringBuffer$: function($content) {
        var t1 = new P.StringBuffer("");
        t1.StringBuffer$1($content);
        return t1;
      }}
  },
  Symbol: {
    "": "Object;"
  }
}],
["dart.dom.html", "dart:html", , W, {
  "": "",
  AudioElement_AudioElement: function(src) {
    return new Audio(src);
  },
  CanvasElement_CanvasElement: function(height, width) {
    var e = document.createElement("canvas", null);
    return e;
  },
  Element_Element$html: function(html, treeSanitizer, validator) {
    var fragment, t1;
    fragment = J.createFragment$3$treeSanitizer$validator$x(document.body, html, treeSanitizer, validator);
    fragment.toString;
    t1 = new W._ChildNodeListLazy(fragment);
    t1 = t1.where$1(t1, new W.Element_Element$html_closure());
    return t1.get$single(t1);
  },
  Element__determineMouseWheelEventType: [function(e) {
    if (e.onwheel !== undefined)
      return "wheel";
    else if (e.onmousewheel !== undefined)
      return "mousewheel";
    else
      return "DOMMouseScroll";
  }, "call$1", "Element__determineMouseWheelEventType$closure", 2, 0, 10],
  Window__isDartLocation: function(thing) {
    var t1, t2, exception;
    try {
      t1 = thing;
      t2 = J.getInterceptor(t1);
      return typeof t1 === "object" && t1 !== null && !!t2.$isLocation;
    } catch (exception) {
      H.unwrapException(exception);
      return false;
    }

  },
  _JenkinsSmiHash_combine: function(hash, value) {
    hash = 536870911 & hash + value;
    hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
    return hash ^ hash >>> 6;
  },
  _convertNativeToDart_Window: function(win) {
    if (win == null)
      return;
    return W._DOMWindowCrossFrame__createSafe(win);
  },
  _convertNativeToDart_EventTarget: function(e) {
    var $window, t1;
    if (e == null)
      return;
    if ("setInterval" in e) {
      $window = W._DOMWindowCrossFrame__createSafe(e);
      t1 = J.getInterceptor($window);
      if (typeof $window === "object" && $window !== null && !!t1.$isEventTarget)
        return $window;
      return;
    } else
      return e;
  },
  _wrapZone: function(callback) {
    var t1 = $.Zone__current;
    if (t1 === C.C__RootZone)
      return callback;
    return t1.bindUnaryCallback$2$runGuarded(callback, true);
  },
  HtmlElement: {
    "": "Element;",
    "%": "HTMLAppletElement|HTMLBRElement|HTMLBaseFontElement|HTMLContentElement|HTMLDListElement|HTMLDataListElement|HTMLDetailsElement|HTMLDialogElement|HTMLDirectoryElement|HTMLDivElement|HTMLFontElement|HTMLFrameElement|HTMLFrameSetElement|HTMLHRElement|HTMLHeadElement|HTMLHeadingElement|HTMLHtmlElement|HTMLLabelElement|HTMLLegendElement|HTMLMarqueeElement|HTMLMenuElement|HTMLModElement|HTMLOptGroupElement|HTMLParagraphElement|HTMLPreElement|HTMLQuoteElement|HTMLShadowElement|HTMLSpanElement|HTMLTableCaptionElement|HTMLTableCellElement|HTMLTableColElement|HTMLTableDataCellElement|HTMLTableHeaderCellElement|HTMLTitleElement|HTMLUListElement|HTMLUnknownElement;HTMLElement"
  },
  AnchorElement: {
    "": "HtmlElement;hostname=,href},port=,protocol=,type=",
    toString$0: function(receiver) {
      return receiver.toString();
    },
    "%": "HTMLAnchorElement"
  },
  AreaElement: {
    "": "HtmlElement;hostname=,href},port=,protocol=",
    "%": "HTMLAreaElement"
  },
  BaseElement: {
    "": "HtmlElement;href}",
    "%": "HTMLBaseElement"
  },
  BodyElement: {
    "": "HtmlElement;",
    get$onLoad: function(receiver) {
      return C.EventStreamProvider_load.forElement$1(receiver);
    },
    $isBodyElement: true,
    "%": "HTMLBodyElement"
  },
  ButtonElement: {
    "": "HtmlElement;name=,type=,value=",
    "%": "HTMLButtonElement"
  },
  CanvasElement: {
    "": "HtmlElement;height%,width%",
    getContext$2: function(receiver, contextId, attrs) {
      return receiver.getContext(contextId);
    },
    getContext$1: function($receiver, contextId) {
      return this.getContext$2($receiver, contextId, null);
    },
    "%": "HTMLCanvasElement"
  },
  CanvasRenderingContext: {
    "": "Interceptor;",
    "%": "WebGLRenderingContext;CanvasRenderingContext"
  },
  CanvasRenderingContext2D: {
    "": "CanvasRenderingContext;fillStyle},globalAlpha},globalCompositeOperation},lineWidth},strokeStyle}",
    beginPath$0: function(receiver) {
      return receiver.beginPath();
    },
    clearRect$4: function(receiver, x, y, width, height) {
      return receiver.clearRect(x, y, width, height);
    },
    closePath$0: function(receiver) {
      return receiver.closePath();
    },
    createPatternFromImage$2: function(receiver, image, repetitionType) {
      return receiver.createPattern(image, repetitionType);
    },
    fillRect$4: function(receiver, x, y, width, height) {
      return receiver.fillRect(x, y, width, height);
    },
    lineTo$2: function(receiver, x, y) {
      return receiver.lineTo(x, y);
    },
    moveTo$2: function(receiver, x, y) {
      return receiver.moveTo(x, y);
    },
    restore$0: function(receiver) {
      return receiver.restore();
    },
    rotate$1: function(receiver, angle) {
      return receiver.rotate(angle);
    },
    save$0: function(receiver) {
      return receiver.save();
    },
    stroke$0: function(receiver) {
      return receiver.stroke();
    },
    translate$2: function(receiver, tx, ty) {
      return receiver.translate(tx, ty);
    },
    arc$6: function(receiver, x, y, radius, startAngle, endAngle, anticlockwise) {
      receiver.arc(x, y, radius, startAngle, endAngle, anticlockwise);
    },
    drawImage$3: function(receiver, source, destX, destY) {
      return receiver.drawImage(source, destX, destY);
    },
    drawImageScaled$5: function(receiver, source, destX, destY, destWidth, destHeight) {
      return receiver.drawImage(source, destX, destY, destWidth, destHeight);
    },
    drawImageScaledFromSource$9: function(receiver, source, sourceX, sourceY, sourceWidth, sourceHeight, destX, destY, destWidth, destHeight) {
      return receiver.drawImage(source, sourceX, sourceY, sourceWidth, sourceHeight, destX, destY, destWidth, destHeight);
    },
    fillText$4: function(receiver, text, x, y, maxWidth) {
      receiver.fillText(text, x, y);
    },
    fillText$3: function($receiver, text, x, y) {
      return this.fillText$4($receiver, text, x, y, null);
    },
    "%": "CanvasRenderingContext2D"
  },
  CharacterData: {
    "": "Node;length=",
    "%": "CDATASection|CharacterData|Comment|ProcessingInstruction|Text"
  },
  CssStyleDeclaration: {
    "": "Interceptor_CssStyleDeclarationBase;length=",
    getPropertyValue$1: function(receiver, propertyName) {
      var propValue = receiver.getPropertyValue(propertyName);
      return propValue != null ? propValue : "";
    },
    setProperty$3: function(receiver, propertyName, value, priority) {
      var exception;
      try {
        if (priority == null)
          priority = "";
        receiver.setProperty(propertyName, value, priority);
        if (!!receiver.setAttribute)
          receiver.setAttribute(propertyName, value);
      } catch (exception) {
        H.unwrapException(exception);
      }

    },
    "%": "CSS2Properties|CSSStyleDeclaration|MSStyleCSSProperties"
  },
  Document: {
    "": "Node;",
    get$onClick: function(receiver) {
      return C.EventStreamProvider_click.forTarget$1(receiver);
    },
    get$onDoubleClick: function(receiver) {
      return C.EventStreamProvider_dblclick.forTarget$1(receiver);
    },
    get$onLoad: function(receiver) {
      return C.EventStreamProvider_load.forTarget$1(receiver);
    },
    get$onMouseDown: function(receiver) {
      return C.EventStreamProvider_mousedown.forTarget$1(receiver);
    },
    get$onMouseMove: function(receiver) {
      return C.EventStreamProvider_mousemove.forTarget$1(receiver);
    },
    get$onMouseUp: function(receiver) {
      return C.EventStreamProvider_mouseup.forTarget$1(receiver);
    },
    get$onMouseWheel: function(receiver) {
      return C._CustomEventStreamProvider__determineMouseWheelEventType.forTarget$1(receiver);
    },
    "%": "Document|HTMLDocument|SVGDocument"
  },
  DomException: {
    "": "Interceptor;",
    toString$0: function(receiver) {
      return receiver.toString();
    },
    "%": "DOMException"
  },
  Element: {
    "": "Node;offsetLeft=,offsetTop=,style=",
    get$attributes: function(receiver) {
      return new W._ElementAttributeMap(receiver);
    },
    get$children: function(receiver) {
      return new W._ChildrenElementList(receiver, receiver.children);
    },
    get$client: function(receiver) {
      return H.setRuntimeTypeInfo(new P.Rectangle(receiver.clientLeft, receiver.clientTop, receiver.clientWidth, receiver.clientHeight), [null]);
    },
    get$offset: function(receiver) {
      return H.setRuntimeTypeInfo(new P.Rectangle(receiver.offsetLeft, receiver.offsetTop, receiver.offsetWidth, receiver.offsetHeight), [null]);
    },
    toString$0: function(receiver) {
      return receiver.localName;
    },
    createFragment$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
      var t1, t2, base, contextElement, fragment;
      if (treeSanitizer == null) {
        t1 = $.Element__defaultValidator;
        if (t1 == null) {
          t1 = H.setRuntimeTypeInfo([], [W.NodeValidator]);
          t2 = new W.NodeValidatorBuilder(t1);
          t1.push(W._Html5NodeValidator$(null));
          t1.push(W._TemplatingNodeValidator$());
          $.Element__defaultValidator = t2;
          validator = t2;
        } else
          validator = t1;
        t1 = $.Element__defaultSanitizer;
        if (t1 == null) {
          t1 = new W._ValidatingTreeSanitizer(validator);
          $.Element__defaultSanitizer = t1;
          treeSanitizer = t1;
        } else {
          t1.validator = validator;
          treeSanitizer = t1;
        }
      }
      if ($.Element__parseDocument == null) {
        t1 = document.implementation.createHTMLDocument("");
        $.Element__parseDocument = t1;
        $.Element__parseRange = t1.createRange();
        base = $.Element__parseDocument.createElement("base", null);
        J.set$href$x(base, document.baseURI);
        $.Element__parseDocument.head.appendChild(base);
      }
      t1 = $.Element__parseDocument;
      if (!!this.$isBodyElement)
        contextElement = t1.body;
      else {
        contextElement = t1.createElement(receiver.tagName, null);
        $.Element__parseDocument.body.appendChild(contextElement);
      }
      if ("createContextualFragment" in window.Range.prototype) {
        $.Element__parseRange.selectNodeContents(contextElement);
        fragment = $.Element__parseRange.createContextualFragment(html);
      } else {
        contextElement.innerHTML = html;
        fragment = $.Element__parseDocument.createDocumentFragment();
        for (; t1 = contextElement.firstChild, t1 != null;)
          fragment.appendChild(t1);
      }
      t1 = $.Element__parseDocument.body;
      if (contextElement == null ? t1 != null : contextElement !== t1)
        J.remove$0$ax(contextElement);
      treeSanitizer.sanitizeTree$1(fragment);
      document.adoptNode(fragment);
      return fragment;
    },
    createFragment$2$treeSanitizer: function($receiver, html, treeSanitizer) {
      return this.createFragment$3$treeSanitizer$validator($receiver, html, treeSanitizer, null);
    },
    set$innerHtml: function(receiver, html) {
      this.setInnerHtml$1(receiver, html);
    },
    setInnerHtml$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
      receiver.textContent = null;
      receiver.appendChild(this.createFragment$3$treeSanitizer$validator(receiver, html, treeSanitizer, validator));
    },
    setInnerHtml$1: function($receiver, html) {
      return this.setInnerHtml$3$treeSanitizer$validator($receiver, html, null, null);
    },
    getBoundingClientRect$0: function(receiver) {
      return receiver.getBoundingClientRect();
    },
    get$onClick: function(receiver) {
      return C.EventStreamProvider_click.forElement$1(receiver);
    },
    get$onDoubleClick: function(receiver) {
      return C.EventStreamProvider_dblclick.forElement$1(receiver);
    },
    get$onLoad: function(receiver) {
      return C.EventStreamProvider_load.forElement$1(receiver);
    },
    get$onMouseDown: function(receiver) {
      return C.EventStreamProvider_mousedown.forElement$1(receiver);
    },
    get$onMouseMove: function(receiver) {
      return C.EventStreamProvider_mousemove.forElement$1(receiver);
    },
    get$onMouseUp: function(receiver) {
      return C.EventStreamProvider_mouseup.forElement$1(receiver);
    },
    get$onMouseWheel: function(receiver) {
      return C._CustomEventStreamProvider__determineMouseWheelEventType.forElement$1(receiver);
    },
    $isElement: true,
    "%": ";Element"
  },
  EmbedElement: {
    "": "HtmlElement;height%,name=,src},type=,width%",
    "%": "HTMLEmbedElement"
  },
  ErrorEvent: {
    "": "Event;error=",
    "%": "ErrorEvent"
  },
  Event: {
    "": "Interceptor;type=",
    preventDefault$0: function(receiver) {
      return receiver.preventDefault();
    },
    "%": "AudioProcessingEvent|AutocompleteErrorEvent|BeforeLoadEvent|BeforeUnloadEvent|CSSFontFaceLoadEvent|CloseEvent|CustomEvent|DeviceMotionEvent|DeviceOrientationEvent|HashChangeEvent|IDBVersionChangeEvent|MIDIConnectionEvent|MIDIMessageEvent|MediaKeyEvent|MediaKeyMessageEvent|MediaKeyNeededEvent|MediaStreamEvent|MediaStreamTrackEvent|MessageEvent|MutationEvent|OfflineAudioCompletionEvent|OverflowEvent|PageTransitionEvent|PopStateEvent|ProgressEvent|RTCDTMFToneChangeEvent|RTCDataChannelEvent|RTCIceCandidateEvent|ResourceProgressEvent|SecurityPolicyViolationEvent|SpeechInputEvent|SpeechRecognitionEvent|SpeechSynthesisEvent|StorageEvent|TrackEvent|TransitionEvent|WebGLContextEvent|WebKitAnimationEvent|WebKitTransitionEvent|XMLHttpRequestProgressEvent;Event"
  },
  EventTarget: {
    "": "Interceptor;",
    addEventListener$3: function(receiver, type, listener, useCapture) {
      return receiver.addEventListener(type, H.convertDartClosureToJS(listener, 1), useCapture);
    },
    removeEventListener$3: function(receiver, type, listener, useCapture) {
      return receiver.removeEventListener(type, H.convertDartClosureToJS(listener, 1), useCapture);
    },
    $isEventTarget: true,
    "%": ";EventTarget"
  },
  FieldSetElement: {
    "": "HtmlElement;name=,type=",
    "%": "HTMLFieldSetElement"
  },
  FormElement: {
    "": "HtmlElement;length=,name=",
    "%": "HTMLFormElement"
  },
  HtmlCollection: {
    "": "Interceptor_ListMixin_ImmutableListMixin;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        throw H.wrapException(P.RangeError$range(index, 0, t1));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isList: true,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: true,
    $isJavaScriptIndexingBehavior: true,
    "%": "HTMLCollection|HTMLFormControlsCollection|HTMLOptionsCollection"
  },
  IFrameElement: {
    "": "HtmlElement;height%,name=,src},width%",
    "%": "HTMLIFrameElement"
  },
  ImageElement: {
    "": "HtmlElement;height%,src},width%",
    "%": "HTMLImageElement"
  },
  InputElement: {
    "": "HtmlElement;height%,name=,size=,src},type=,value=,width%",
    $isElement: true,
    $isEventTarget: true,
    "%": "HTMLInputElement"
  },
  KeyboardEvent: {
    "": "UIEvent;",
    get$keyCode: function(receiver) {
      return receiver.keyCode;
    },
    "%": "KeyboardEvent"
  },
  KeygenElement: {
    "": "HtmlElement;name=,type=",
    "%": "HTMLKeygenElement"
  },
  LIElement: {
    "": "HtmlElement;value=",
    "%": "HTMLLIElement"
  },
  LinkElement: {
    "": "HtmlElement;href},type=",
    "%": "HTMLLinkElement"
  },
  Location: {
    "": "Interceptor;hostname=,port=,protocol=",
    toString$0: function(receiver) {
      return receiver.toString();
    },
    $isLocation: true,
    "%": "Location"
  },
  MapElement: {
    "": "HtmlElement;name=",
    "%": "HTMLMapElement"
  },
  MediaElement: {
    "": "HtmlElement;currentTime=,ended=,error=,src},volume}",
    play$0: function(receiver) {
      return receiver.play();
    },
    "%": "HTMLAudioElement;HTMLMediaElement"
  },
  MediaStream: {
    "": "EventTarget;ended=",
    "%": "MediaStream"
  },
  MetaElement: {
    "": "HtmlElement;name=",
    "%": "HTMLMetaElement"
  },
  MeterElement: {
    "": "HtmlElement;value=",
    "%": "HTMLMeterElement"
  },
  MidiOutput: {
    "": "MidiPort;",
    send$2: function(receiver, data, timestamp) {
      return receiver.send(data, timestamp);
    },
    send$1: function($receiver, data) {
      return $receiver.send(data);
    },
    "%": "MIDIOutput"
  },
  MidiPort: {
    "": "EventTarget;type=",
    "%": "MIDIInput;MIDIPort"
  },
  MouseEvent: {
    "": "UIEvent;",
    get$client: function(receiver) {
      return H.setRuntimeTypeInfo(new P.Point(receiver.clientX, receiver.clientY), [null]);
    },
    get$offset: function(receiver) {
      var t1, t2, target, point;
      if (!!receiver.offsetX)
        return H.setRuntimeTypeInfo(new P.Point(receiver.offsetX, receiver.offsetY), [null]);
      else {
        t1 = W._convertNativeToDart_EventTarget(receiver.target);
        t2 = J.getInterceptor(t1);
        if (typeof t1 !== "object" || t1 === null || !t2.$isElement)
          throw H.wrapException(P.UnsupportedError$("offsetX is only supported on elements"));
        target = W._convertNativeToDart_EventTarget(receiver.target);
        t1 = H.setRuntimeTypeInfo(new P.Point(receiver.clientX, receiver.clientY), [null]);
        point = t1.$sub(t1, J.get$topLeft$x(J.getBoundingClientRect$0$x(target)));
        return H.setRuntimeTypeInfo(new P.Point(J.toInt$0$n(point.x), J.toInt$0$n(point.y)), [null]);
      }
    },
    "%": ";DragEvent|MSPointerEvent|MouseEvent|PointerEvent"
  },
  Node: {
    "": "EventTarget;",
    get$nodes: function(receiver) {
      return new W._ChildNodeListLazy(receiver);
    },
    remove$0: function(receiver) {
      var t1 = receiver.parentNode;
      if (t1 != null)
        t1.removeChild(receiver);
    },
    replaceWith$1: function(receiver, otherNode) {
      var $parent, exception;
      try {
        $parent = receiver.parentNode;
        J._replaceChild$2$x($parent, otherNode, receiver);
      } catch (exception) {
        H.unwrapException(exception);
      }

      return receiver;
    },
    toString$0: function(receiver) {
      var t1 = receiver.nodeValue;
      return t1 == null ? J.Interceptor.prototype.toString$0.call(this, receiver) : t1;
    },
    _replaceChild$2: function(receiver, newChild, oldChild) {
      return receiver.replaceChild(newChild, oldChild);
    },
    "%": "DocumentFragment|DocumentType|Entity|Notation|ShadowRoot;Node"
  },
  NodeList: {
    "": "Interceptor_ListMixin_ImmutableListMixin0;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        throw H.wrapException(P.RangeError$range(index, 0, t1));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isList: true,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: true,
    $isJavaScriptIndexingBehavior: true,
    "%": "NodeList|RadioNodeList"
  },
  OListElement: {
    "": "HtmlElement;type=",
    "%": "HTMLOListElement"
  },
  ObjectElement: {
    "": "HtmlElement;height%,name=,type=,width%",
    "%": "HTMLObjectElement"
  },
  OptionElement: {
    "": "HtmlElement;index=,selected%,value=",
    "%": "HTMLOptionElement"
  },
  OutputElement: {
    "": "HtmlElement;name=,type=,value=",
    "%": "HTMLOutputElement"
  },
  ParamElement: {
    "": "HtmlElement;name=,value=",
    "%": "HTMLParamElement"
  },
  ProgressElement: {
    "": "HtmlElement;position=,value=",
    "%": "HTMLProgressElement"
  },
  Range: {
    "": "Interceptor;",
    getBoundingClientRect$0: function(receiver) {
      return receiver.getBoundingClientRect();
    },
    toString$0: function(receiver) {
      return receiver.toString();
    },
    "%": "Range"
  },
  ScriptElement0: {
    "": "HtmlElement;src},type=",
    "%": "HTMLScriptElement"
  },
  SelectElement: {
    "": "HtmlElement;length=,name=,size=,type=,value=",
    "%": "HTMLSelectElement"
  },
  SourceElement: {
    "": "HtmlElement;src},type=",
    "%": "HTMLSourceElement"
  },
  SpeechRecognitionError: {
    "": "Event;error=",
    "%": "SpeechRecognitionError"
  },
  StyleElement: {
    "": "HtmlElement;type=",
    "%": "HTMLStyleElement"
  },
  TableElement: {
    "": "HtmlElement;",
    createFragment$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
      var table, fragment, t1;
      if ("createContextualFragment" in window.Range.prototype)
        return W.Element.prototype.createFragment$3$treeSanitizer$validator.call(this, receiver, html, treeSanitizer, validator);
      table = W.Element_Element$html("<table>" + html + "</table>", treeSanitizer, validator);
      fragment = document.createDocumentFragment();
      fragment.toString;
      t1 = new W._ChildNodeListLazy(fragment);
      t1.addAll$1(t1, J.get$nodes$x(table));
      return fragment;
    },
    "%": "HTMLTableElement"
  },
  TableRowElement: {
    "": "HtmlElement;",
    createFragment$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
      var fragment, t1, section, row;
      if ("createContextualFragment" in window.Range.prototype)
        return W.Element.prototype.createFragment$3$treeSanitizer$validator.call(this, receiver, html, treeSanitizer, validator);
      fragment = document.createDocumentFragment();
      t1 = J.createFragment$3$treeSanitizer$validator$x(document.createElement("table", null), html, treeSanitizer, validator);
      t1.toString;
      t1 = new W._ChildNodeListLazy(t1);
      section = t1.get$single(t1);
      section.toString;
      t1 = new W._ChildNodeListLazy(section);
      row = t1.get$single(t1);
      fragment.toString;
      t1 = new W._ChildNodeListLazy(fragment);
      row.toString;
      t1.addAll$1(t1, new W._ChildNodeListLazy(row));
      return fragment;
    },
    "%": "HTMLTableRowElement"
  },
  TableSectionElement: {
    "": "HtmlElement;",
    createFragment$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
      var fragment, t1, section;
      if ("createContextualFragment" in window.Range.prototype)
        return W.Element.prototype.createFragment$3$treeSanitizer$validator.call(this, receiver, html, treeSanitizer, validator);
      fragment = document.createDocumentFragment();
      t1 = J.createFragment$3$treeSanitizer$validator$x(document.createElement("table", null), html, treeSanitizer, validator);
      t1.toString;
      t1 = new W._ChildNodeListLazy(t1);
      section = t1.get$single(t1);
      fragment.toString;
      t1 = new W._ChildNodeListLazy(fragment);
      section.toString;
      t1.addAll$1(t1, new W._ChildNodeListLazy(section));
      return fragment;
    },
    "%": "HTMLTableSectionElement"
  },
  TemplateElement: {
    "": "HtmlElement;",
    setInnerHtml$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
      var fragment;
      receiver.textContent = null;
      fragment = this.createFragment$3$treeSanitizer$validator(receiver, html, treeSanitizer, validator);
      receiver.content.appendChild(fragment);
    },
    setInnerHtml$1: function($receiver, html) {
      return this.setInnerHtml$3$treeSanitizer$validator($receiver, html, null, null);
    },
    $isTemplateElement: true,
    "%": "HTMLTemplateElement"
  },
  TextAreaElement: {
    "": "HtmlElement;name=,type=,value=",
    "%": "HTMLTextAreaElement"
  },
  TrackElement: {
    "": "HtmlElement;src}",
    "%": "HTMLTrackElement"
  },
  UIEvent: {
    "": "Event;which=",
    get$view: function(receiver) {
      return W._convertNativeToDart_Window(receiver.view);
    },
    "%": "CompositionEvent|FocusEvent|SVGZoomEvent|TextEvent|TouchEvent;UIEvent"
  },
  VideoElement: {
    "": "MediaElement;height%,width%",
    "%": "HTMLVideoElement"
  },
  WheelEvent: {
    "": "MouseEvent;",
    get$deltaY: function(receiver) {
      var detail;
      if (receiver.deltaY !== undefined)
        return receiver.deltaY;
      else if (receiver.wheelDelta !== undefined)
        return -receiver.wheelDelta;
      else if (receiver.detail !== undefined) {
        if (receiver.axis == MouseScrollEvent.VERTICAL_AXIS) {
          detail = receiver.detail;
          if (Math.abs(detail) < 100)
            return -detail * 40;
          return -detail;
        }
        return 0;
      }
      throw H.wrapException(P.UnsupportedError$("deltaY is not supported"));
    },
    "%": "MouseScrollEvent|MouseWheelEvent|WheelEvent"
  },
  Window: {
    "": "EventTarget;status%",
    get$location: function(receiver) {
      var result = receiver.location;
      if (W.Window__isDartLocation(result) === true)
        return result;
      if (null == receiver._location_wrapper)
        receiver._location_wrapper = new W._LocationWrapper(result);
      return receiver._location_wrapper;
    },
    _requestAnimationFrame$1: function(receiver, callback) {
      return receiver.requestAnimationFrame(H.convertDartClosureToJS(callback, 1));
    },
    _ensureRequestAnimationFrame$0: function(receiver) {
      if (!!(receiver.requestAnimationFrame && receiver.cancelAnimationFrame))
        return;
        (function($this) {
   var vendors = ['ms', 'moz', 'webkit', 'o'];
   for (var i = 0; i < vendors.length && !$this.requestAnimationFrame; ++i) {
     $this.requestAnimationFrame = $this[vendors[i] + 'RequestAnimationFrame'];
     $this.cancelAnimationFrame =
         $this[vendors[i]+'CancelAnimationFrame'] ||
         $this[vendors[i]+'CancelRequestAnimationFrame'];
   }
   if ($this.requestAnimationFrame && $this.cancelAnimationFrame) return;
   $this.requestAnimationFrame = function(callback) {
      return window.setTimeout(function() {
        callback(Date.now());
      }, 16 /* 16ms ~= 60fps */);
   };
   $this.cancelAnimationFrame = function(id) { clearTimeout(id); }
  })(receiver);
    },
    toString$0: function(receiver) {
      return receiver.toString();
    },
    get$onClick: function(receiver) {
      return C.EventStreamProvider_click.forTarget$1(receiver);
    },
    get$onDoubleClick: function(receiver) {
      return C.EventStreamProvider_dblclick.forTarget$1(receiver);
    },
    get$onLoad: function(receiver) {
      return C.EventStreamProvider_load.forTarget$1(receiver);
    },
    get$onMouseDown: function(receiver) {
      return C.EventStreamProvider_mousedown.forTarget$1(receiver);
    },
    get$onMouseMove: function(receiver) {
      return C.EventStreamProvider_mousemove.forTarget$1(receiver);
    },
    get$onMouseUp: function(receiver) {
      return C.EventStreamProvider_mouseup.forTarget$1(receiver);
    },
    get$onMouseWheel: function(receiver) {
      return C._CustomEventStreamProvider__determineMouseWheelEventType.forTarget$1(receiver);
    },
    $isEventTarget: true,
    "%": "DOMWindow|Window"
  },
  _Attr: {
    "": "Node;name=,value=",
    "%": "Attr"
  },
  _ClientRect: {
    "": "Interceptor;height=,left=,top=,width=",
    toString$0: function(receiver) {
      return "Rectangle (" + H.S(receiver.left) + ", " + H.S(receiver.top) + ") " + H.S(receiver.width) + " x " + H.S(receiver.height);
    },
    $eq: function(receiver, other) {
      var t1, t2, t3;
      if (other == null)
        return false;
      t1 = J.getInterceptor$x(other);
      if (typeof other !== "object" || other === null || !t1.$isRectangle)
        return false;
      t2 = receiver.left;
      t3 = t1.get$left(other);
      if (t2 == null ? t3 == null : t2 === t3) {
        t2 = receiver.top;
        t3 = t1.get$top(other);
        if (t2 == null ? t3 == null : t2 === t3) {
          t2 = receiver.width;
          t3 = t1.get$width(other);
          if (t2 == null ? t3 == null : t2 === t3) {
            t2 = receiver.height;
            t1 = t1.get$height(other);
            t1 = t2 == null ? t1 == null : t2 === t1;
          } else
            t1 = false;
        } else
          t1 = false;
      } else
        t1 = false;
      return t1;
    },
    get$hashCode: function(receiver) {
      var t1, t2, t3, t4, hash;
      t1 = J.get$hashCode$(receiver.left);
      t2 = J.get$hashCode$(receiver.top);
      t3 = J.get$hashCode$(receiver.width);
      t4 = J.get$hashCode$(receiver.height);
      t4 = W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(0, t1), t2), t3), t4);
      hash = 536870911 & t4 + ((67108863 & t4) << 3 >>> 0);
      hash ^= hash >>> 11;
      return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
    },
    get$topLeft: function(receiver) {
      return H.setRuntimeTypeInfo(new P.Point(receiver.left, receiver.top), [null]);
    },
    $isRectangle: true,
    $asRectangle: function() {
      return [null];
    },
    "%": "ClientRect|DOMRect"
  },
  _NamedNodeMap: {
    "": "Interceptor_ListMixin_ImmutableListMixin1;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        throw H.wrapException(P.RangeError$range(index, 0, t1));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isList: true,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: true,
    $isJavaScriptIndexingBehavior: true,
    "%": "MozNamedAttrMap|NamedNodeMap"
  },
  Console: {
    "": "Object;",
    error$1: [function(_, arg) {
      return typeof console != "undefined" ? console.error(arg) : null;
    }, "call$1", "get$error", 2, 0, 24],
    static: {"": "Console__safeConsole"}
  },
  Interceptor_CssStyleDeclarationBase: {
    "": "Interceptor+CssStyleDeclarationBase;"
  },
  CssStyleDeclarationBase: {
    "": "Object;",
    set$bottom: function(receiver, value) {
      this.setProperty$3(receiver, "bottom", value, "");
    },
    get$clear: function(receiver) {
      return this.getPropertyValue$1(receiver, "clear");
    },
    clear$0: function($receiver) {
      return this.get$clear($receiver).call$0();
    },
    set$cursor: function(receiver, value) {
      this.setProperty$3(receiver, "cursor", value, "");
    },
    set$display: function(receiver, value) {
      this.setProperty$3(receiver, "display", value, "");
    },
    get$height: function(receiver) {
      return this.getPropertyValue$1(receiver, "height");
    },
    set$height: function(receiver, value) {
      this.setProperty$3(receiver, "height", value, "");
    },
    set$left: function(receiver, value) {
      this.setProperty$3(receiver, "left", value, "");
    },
    get$position: function(receiver) {
      return this.getPropertyValue$1(receiver, "position");
    },
    set$position: function(receiver, value) {
      this.setProperty$3(receiver, "position", value, "");
    },
    set$right: function(receiver, value) {
      this.setProperty$3(receiver, "right", value, "");
    },
    get$size: function(receiver) {
      return this.getPropertyValue$1(receiver, "size");
    },
    set$top: function(receiver, value) {
      this.setProperty$3(receiver, "top", value, "");
    },
    get$width: function(receiver) {
      return this.getPropertyValue$1(receiver, "width");
    },
    set$zIndex: function(receiver, value) {
      this.setProperty$3(receiver, "z-index", value, "");
    }
  },
  _ChildrenElementList: {
    "": "ListBase;_element,_childElements",
    get$length: function(_) {
      return this._childElements.length;
    },
    $index: function(_, index) {
      var t1 = this._childElements;
      if (index >>> 0 !== index || index >= t1.length)
        return H.ioore(t1, index);
      return t1[index];
    },
    $indexSet: function(_, index, value) {
      var t1 = this._childElements;
      if (index >>> 0 !== index || index >= t1.length)
        return H.ioore(t1, index);
      this._element.replaceChild(value, t1[index]);
    },
    set$length: function(_, newLength) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize element lists"));
    },
    add$1: function(_, value) {
      this._element.appendChild(value);
      return value;
    },
    get$iterator: function(_) {
      var t1 = this.toList$0(this);
      return new H.ListIterator(t1, t1.length, 0, null);
    },
    clear$0: function(_) {
      this._element.textContent = "";
    },
    $asList: function() {
      return [W.Element];
    }
  },
  Element_Element$html_closure: {
    "": "Closure:14;",
    call$1: function(e) {
      var t1 = J.getInterceptor(e);
      return typeof e === "object" && e !== null && !!t1.$isElement;
    }
  },
  Interceptor_ListMixin: {
    "": "Interceptor+ListMixin;",
    $isList: true,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: true
  },
  Interceptor_ListMixin_ImmutableListMixin: {
    "": "Interceptor_ListMixin+ImmutableListMixin;",
    $isList: true,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: true
  },
  _ChildNodeListLazy: {
    "": "ListBase;_this",
    get$single: function(_) {
      var t1, l;
      t1 = this._this;
      l = t1.childNodes.length;
      if (l === 0)
        throw H.wrapException(P.StateError$("No elements"));
      if (l > 1)
        throw H.wrapException(P.StateError$("More than one element"));
      return t1.firstChild;
    },
    add$1: function(_, value) {
      this._this.appendChild(value);
    },
    addAll$1: function(_, iterable) {
      var t1, t2, len, i;
      t1 = J.getInterceptor$ax(iterable);
      if (!!t1.$is_ChildNodeListLazy) {
        t1 = iterable._this;
        t2 = this._this;
        if (t1 !== t2)
          for (len = t1.childNodes.length, i = 0; i < len; ++i)
            t2.appendChild(t1.firstChild);
        return;
      }
      for (t1 = t1.get$iterator(iterable), t2 = this._this; t1.moveNext$0();)
        t2.appendChild(t1.get$current());
    },
    clear$0: function(_) {
      this._this.textContent = "";
    },
    $indexSet: function(_, index, value) {
      var t1, t2;
      t1 = this._this;
      t2 = t1.childNodes;
      if (index >>> 0 !== index || index >= t2.length)
        return H.ioore(t2, index);
      t1.replaceChild(value, t2[index]);
    },
    get$iterator: function(_) {
      return C.NodeList_methods.get$iterator(this._this.childNodes);
    },
    get$length: function(_) {
      return this._this.childNodes.length;
    },
    set$length: function(_, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot set length on immutable List."));
    },
    $index: function(_, index) {
      var t1 = this._this.childNodes;
      if (index >>> 0 !== index || index >= t1.length)
        return H.ioore(t1, index);
      return t1[index];
    },
    $is_ChildNodeListLazy: true,
    $asList: function() {
      return [W.Node];
    }
  },
  Interceptor_ListMixin0: {
    "": "Interceptor+ListMixin;",
    $isList: true,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: true
  },
  Interceptor_ListMixin_ImmutableListMixin0: {
    "": "Interceptor_ListMixin0+ImmutableListMixin;",
    $isList: true,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: true
  },
  Interceptor_ListMixin1: {
    "": "Interceptor+ListMixin;",
    $isList: true,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: true
  },
  Interceptor_ListMixin_ImmutableListMixin1: {
    "": "Interceptor_ListMixin1+ImmutableListMixin;",
    $isList: true,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: true
  },
  _AttributeMap: {
    "": "Object;",
    clear$0: function(_) {
      var t1;
      for (t1 = this.get$keys(), t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();)
        this.remove$1(this, t1._current);
    },
    forEach$1: function(_, f) {
      var t1, key;
      for (t1 = this.get$keys(), t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
        key = t1._current;
        f.call$2(key, this.$index(this, key));
      }
    },
    get$keys: function() {
      var attributes, keys, len, i, t1;
      attributes = this._element.attributes;
      keys = H.setRuntimeTypeInfo([], [J.JSString]);
      for (len = attributes.length, i = 0; i < len; ++i) {
        if (i >= attributes.length)
          return H.ioore(attributes, i);
        t1 = attributes[i];
        if (this._matches$1(t1))
          keys.push(J.get$name$x(t1));
      }
      return keys;
    },
    get$values: function(_) {
      var attributes, values, len, i, t1;
      attributes = this._element.attributes;
      values = H.setRuntimeTypeInfo([], [J.JSString]);
      for (len = attributes.length, i = 0; i < len; ++i) {
        if (i >= attributes.length)
          return H.ioore(attributes, i);
        t1 = attributes[i];
        if (this._matches$1(t1))
          values.push(J.get$value$x(t1));
      }
      return values;
    },
    $isMap: true,
    $asMap: function() {
      return [J.JSString, J.JSString];
    }
  },
  _ElementAttributeMap: {
    "": "_AttributeMap;_element",
    $index: function(_, key) {
      return this._element.getAttribute(key);
    },
    $indexSet: function(_, key, value) {
      this._element.setAttribute(key, value);
    },
    remove$1: function(_, key) {
      var t1, value;
      t1 = this._element;
      value = t1.getAttribute(key);
      t1.removeAttribute(key);
      return value;
    },
    get$length: function(_) {
      return this.get$keys().length;
    },
    _matches$1: function(node) {
      return node.namespaceURI == null;
    }
  },
  EventStreamProvider: {
    "": "Object;_eventType",
    forTarget$2$useCapture: function(e, useCapture) {
      return H.setRuntimeTypeInfo(new W._EventStream(e, this._eventType, useCapture), [null]);
    },
    forTarget$1: function(e) {
      return this.forTarget$2$useCapture(e, false);
    },
    forElement$2$useCapture: function(e, useCapture) {
      return H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(e, this._eventType, useCapture), [null]);
    },
    forElement$1: function(e) {
      return this.forElement$2$useCapture(e, false);
    }
  },
  _EventStream: {
    "": "Stream;_target,_eventType,_useCapture",
    listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
      var t1 = new W._EventStreamSubscription(0, this._target, this._eventType, W._wrapZone(onData), this._useCapture);
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      t1._tryResume$0();
      return t1;
    },
    $asStream: null
  },
  _ElementEventStreamImpl: {
    "": "_EventStream;_target,_eventType,_useCapture",
    $as_EventStream: null
  },
  _EventStreamSubscription: {
    "": "StreamSubscription;_pauseCount,_target,_eventType,_onData,_useCapture",
    cancel$0: function() {
      if (this._target == null)
        return;
      this._unlisten$0();
      this._target = null;
      this._onData = null;
    },
    _tryResume$0: function() {
      var t1 = this._onData;
      if (t1 != null && this._pauseCount <= 0)
        J.addEventListener$3$x(this._target, this._eventType, t1, this._useCapture);
    },
    _unlisten$0: function() {
      var t1 = this._onData;
      if (t1 != null)
        J.removeEventListener$3$x(this._target, this._eventType, t1, this._useCapture);
    },
    $asStreamSubscription: null
  },
  _CustomEventStreamProvider: {
    "": "Object;_eventTypeGetter",
    _eventTypeGetter$1: function(arg0) {
      return this._eventTypeGetter.call$1(arg0);
    },
    forTarget$2$useCapture: function(e, useCapture) {
      return H.setRuntimeTypeInfo(new W._EventStream(e, this._eventTypeGetter$1(e), useCapture), [null]);
    },
    forTarget$1: function(e) {
      return this.forTarget$2$useCapture(e, false);
    },
    forElement$2$useCapture: function(e, useCapture) {
      return H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(e, this._eventTypeGetter$1(e), useCapture), [null]);
    },
    forElement$1: function(e) {
      return this.forElement$2$useCapture(e, false);
    }
  },
  _Html5NodeValidator: {
    "": "Object;uriPolicy<",
    allowsElement$1: function(element) {
      var t1 = $.get$_Html5NodeValidator__allowedElements();
      return t1.contains$1(t1, element.tagName);
    },
    allowsAttribute$3: function(element, attributeName, value) {
      var tagName, t1, validator;
      tagName = element.tagName;
      t1 = $.get$_Html5NodeValidator__attributeValidators();
      validator = t1.$index(t1, tagName + "::" + attributeName);
      if (validator == null)
        validator = t1.$index(t1, "*::" + attributeName);
      if (validator == null)
        return false;
      return validator.call$4(element, attributeName, value, this);
    },
    _Html5NodeValidator$1$uriPolicy: function(uriPolicy) {
      var t1, t2;
      t1 = $.get$_Html5NodeValidator__attributeValidators();
      if (t1.get$isEmpty(t1)) {
        for (t2 = new H.ListIterator(C.List_1GN, 261, 0, null); t2.moveNext$0();)
          t1.$indexSet(t1, t2._current, W._Html5NodeValidator__standardAttributeValidator$closure());
        for (t2 = new H.ListIterator(C.List_yrN, 12, 0, null); t2.moveNext$0();)
          t1.$indexSet(t1, t2._current, W._Html5NodeValidator__uriAttributeValidator$closure());
      }
    },
    static: {"": "_Html5NodeValidator__allowedElements,_Html5NodeValidator__standardAttributes,_Html5NodeValidator__uriAttributes,_Html5NodeValidator__attributeValidators", _Html5NodeValidator$: function(uriPolicy) {
        var e, t1;
        e = document.createElement("a", null);
        t1 = new W._SameOriginUriPolicy(e, C.Window_methods.get$location(window));
        t1 = new W._Html5NodeValidator(t1);
        t1._Html5NodeValidator$1$uriPolicy(uriPolicy);
        return t1;
      }, _Html5NodeValidator__standardAttributeValidator: [function(element, attributeName, value, context) {
        return true;
      }, "call$4", "_Html5NodeValidator__standardAttributeValidator$closure", 8, 0, 11], _Html5NodeValidator__uriAttributeValidator: [function(element, attributeName, value, context) {
        var t1, t2, t3, t4, t5, t6;
        t1 = context.get$uriPolicy();
        t2 = t1._hiddenAnchor;
        t3 = J.getInterceptor$x(t2);
        t3.set$href(t2, value);
        t4 = t3.get$hostname(t2);
        t1 = t1._loc;
        t5 = J.getInterceptor$x(t1);
        t6 = t5.get$hostname(t1);
        if (t4 == null ? t6 == null : t4 === t6) {
          t4 = t3.get$port(t2);
          t6 = t5.get$port(t1);
          if (t4 == null ? t6 == null : t4 === t6) {
            t4 = t3.get$protocol(t2);
            t1 = t5.get$protocol(t1);
            t1 = t4 == null ? t1 == null : t4 === t1;
          } else
            t1 = false;
        } else
          t1 = false;
        if (!t1)
          t1 = t3.get$hostname(t2) === "" && t3.get$port(t2) === "" && t3.get$protocol(t2) === ":";
        else
          t1 = true;
        return t1;
      }, "call$4", "_Html5NodeValidator__uriAttributeValidator$closure", 8, 0, 11]}
  },
  ImmutableListMixin: {
    "": "Object;",
    get$iterator: function(receiver) {
      return new W.FixedSizeListIterator(receiver, this.get$length(receiver), -1, null);
    },
    add$1: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot add to immutable List."));
    },
    $isList: true,
    $asList: null,
    $isEfficientLength: true
  },
  NodeValidatorBuilder: {
    "": "Object;_validators",
    add$1: function(_, validator) {
      this._validators.push(validator);
    },
    allowsElement$1: function(element) {
      return H.IterableMixinWorkaround_any(this._validators, new W.NodeValidatorBuilder_allowsElement_closure(element));
    },
    allowsAttribute$3: function(element, attributeName, value) {
      return H.IterableMixinWorkaround_any(this._validators, new W.NodeValidatorBuilder_allowsAttribute_closure(element, attributeName, value));
    }
  },
  NodeValidatorBuilder_allowsElement_closure: {
    "": "Closure:14;element_0",
    call$1: function(v) {
      return v.allowsElement$1(this.element_0);
    }
  },
  NodeValidatorBuilder_allowsAttribute_closure: {
    "": "Closure:14;element_0,attributeName_1,value_2",
    call$1: function(v) {
      return v.allowsAttribute$3(this.element_0, this.attributeName_1, this.value_2);
    }
  },
  _SimpleNodeValidator: {
    "": "Object;uriPolicy<",
    allowsElement$1: function(element) {
      var t1 = this.allowedElements;
      return t1.contains$1(t1, element.tagName);
    },
    allowsAttribute$3: function(element, attributeName, value) {
      var tagName, t1;
      tagName = element.tagName;
      t1 = this.allowedUriAttributes;
      if (t1.contains$1(t1, tagName + "::" + attributeName))
        return this.uriPolicy.allowsUri$1(value);
      else if (t1.contains$1(t1, "*::" + attributeName))
        return this.uriPolicy.allowsUri$1(value);
      else {
        t1 = this.allowedAttributes;
        if (t1.contains$1(t1, tagName + "::" + attributeName))
          return true;
        else if (t1.contains$1(t1, "*::" + attributeName))
          return true;
        else if (t1.contains$1(t1, tagName + "::*"))
          return true;
        else if (t1.contains$1(t1, "*::*"))
          return true;
      }
      return false;
    }
  },
  _TemplatingNodeValidator: {
    "": "_SimpleNodeValidator;_templateAttrs,allowedElements,allowedAttributes,allowedUriAttributes,uriPolicy",
    allowsAttribute$3: function(element, attributeName, value) {
      var t1;
      if (W._SimpleNodeValidator.prototype.allowsAttribute$3.call(this, element, attributeName, value))
        return true;
      if (attributeName === "template" && value === "")
        return true;
      if (element.getAttribute("template") === "") {
        t1 = this._templateAttrs;
        return t1.contains$1(t1, attributeName);
      }
      return false;
    },
    static: {"": "_TemplatingNodeValidator__TEMPLATE_ATTRS", _TemplatingNodeValidator$: function() {
        var t1, t2, t3, t4;
        t1 = H.setRuntimeTypeInfo(new H.MappedListIterable(C.List_wSV, new W._TemplatingNodeValidator_closure()), [null, null]);
        t2 = P.LinkedHashSet_LinkedHashSet(null, null, null, null);
        t2.addAll$1(t2, ["TEMPLATE"]);
        t3 = P.LinkedHashSet_LinkedHashSet(null, null, null, null);
        t3.addAll$1(t3, t1);
        t1 = t3;
        t3 = P.LinkedHashSet_LinkedHashSet(null, null, null, null);
        t4 = P.LinkedHashSet_LinkedHashSet(null, null, null, J.JSString);
        t4.addAll$1(t4, C.List_wSV);
        return new W._TemplatingNodeValidator(t4, t2, t1, t3, null);
      }}
  },
  _TemplatingNodeValidator_closure: {
    "": "Closure:14;",
    call$1: function(attr) {
      return "TEMPLATE::" + H.S(attr);
    }
  },
  _SvgNodeValidator: {
    "": "Object;",
    allowsElement$1: function(element) {
      var t1 = J.getInterceptor(element);
      if (!!t1.$isScriptElement)
        return false;
      if (!!t1.$isSvgElement)
        return true;
      return false;
    },
    allowsAttribute$3: function(element, attributeName, value) {
      if (attributeName === "is" || C.JSString_methods.startsWith$1(attributeName, "on"))
        return false;
      return this.allowsElement$1(element);
    }
  },
  FixedSizeListIterator: {
    "": "Object;_array,_html$_length,_position,_html$_current",
    moveNext$0: function() {
      var nextPosition, t1;
      nextPosition = this._position + 1;
      t1 = this._html$_length;
      if (nextPosition < t1) {
        this._html$_current = J.$index$asx(this._array, nextPosition);
        this._position = nextPosition;
        return true;
      }
      this._html$_current = null;
      this._position = t1;
      return false;
    },
    get$current: function() {
      return this._html$_current;
    }
  },
  _DOMWindowCrossFrame: {
    "": "Object;_window",
    $isEventTarget: true,
    static: {_DOMWindowCrossFrame__createSafe: function(w) {
        if (w === window)
          return w;
        else
          return new W._DOMWindowCrossFrame(w);
      }}
  },
  _LocationWrapper: {
    "": "Object;_ptr",
    get$hostname: function(_) {
      return this._ptr.hostname;
    },
    get$port: function(_) {
      return this._ptr.port;
    },
    get$protocol: function(_) {
      return this._ptr.protocol;
    },
    toString$0: function(_) {
      return this._ptr.toString();
    },
    $isLocation: true
  },
  NodeValidator: {
    "": "Object;"
  },
  _SameOriginUriPolicy: {
    "": "Object;_hiddenAnchor,_loc"
  },
  _ValidatingTreeSanitizer: {
    "": "Object;validator",
    sanitizeTree$1: function(node) {
      new W._ValidatingTreeSanitizer_sanitizeTree_walk(this).call$1(node);
    },
    sanitizeNode$1: function(node) {
      var t1, attrs, t2, t3, isAttr, keys, i, $name, t4;
      switch (node.nodeType) {
        case 1:
          t1 = J.getInterceptor$x(node);
          attrs = t1.get$attributes(node);
          if (!this.validator.allowsElement$1(node)) {
            window;
            t2 = $.get$Console__safeConsole();
            t3 = "Removing disallowed element <" + node.tagName + ">";
            t2.toString;
            if (typeof console != "undefined")
              console.warn(t3);
            t1.remove$0(node);
            break;
          }
          t2 = attrs._element;
          isAttr = t2.getAttribute("is");
          if (isAttr != null)
            if (!this.validator.allowsAttribute$3(node, "is", isAttr)) {
              window;
              t2 = $.get$Console__safeConsole();
              t3 = "Removing disallowed type extension <" + node.tagName + " is=\"" + isAttr + "\">";
              t2.toString;
              if (typeof console != "undefined")
                console.warn(t3);
              t1.remove$0(node);
              break;
            }
          keys = C.JSArray_methods.toList$0(attrs.get$keys());
          for (i = attrs.get$keys().length - 1; i >= 0; --i) {
            if (i >= keys.length)
              return H.ioore(keys, i);
            $name = keys[i];
            if (!this.validator.allowsAttribute$3(node, J.toLowerCase$0$s($name), t2.getAttribute($name))) {
              window;
              t3 = $.get$Console__safeConsole();
              t4 = "Removing disallowed attribute <" + node.tagName + " " + $name + "=\"" + t2.getAttribute($name) + "\">";
              t3.toString;
              if (typeof console != "undefined")
                console.warn(t4);
              t2.getAttribute($name);
              t2.removeAttribute($name);
            }
          }
          if (typeof node === "object" && node !== null && !!t1.$isTemplateElement)
            this.sanitizeTree$1(node.content);
          break;
        case 8:
        case 11:
        case 3:
        case 4:
          break;
        default:
          J.remove$0$ax(node);
      }
    }
  },
  _ValidatingTreeSanitizer_sanitizeTree_walk: {
    "": "Closure:25;this_0",
    call$1: function(node) {
      var child, nextChild;
      this.this_0.sanitizeNode$1(node);
      child = node.lastChild;
      for (; child != null; child = nextChild) {
        nextChild = child.previousSibling;
        this.call$1(child);
      }
    }
  }
}],
["dart.dom.svg", "dart:svg", , P, {
  "": "",
  FEBlendElement: {
    "": "SvgElement;height=,width=,x=,y=",
    "%": "SVGFEBlendElement"
  },
  FEColorMatrixElement: {
    "": "SvgElement;type=,height=,width=,x=,y=",
    "%": "SVGFEColorMatrixElement"
  },
  FEComponentTransferElement: {
    "": "SvgElement;height=,width=,x=,y=",
    "%": "SVGFEComponentTransferElement"
  },
  FECompositeElement: {
    "": "SvgElement;height=,width=,x=,y=",
    "%": "SVGFECompositeElement"
  },
  FEConvolveMatrixElement: {
    "": "SvgElement;height=,width=,x=,y=",
    "%": "SVGFEConvolveMatrixElement"
  },
  FEDiffuseLightingElement: {
    "": "SvgElement;height=,width=,x=,y=",
    "%": "SVGFEDiffuseLightingElement"
  },
  FEDisplacementMapElement: {
    "": "SvgElement;height=,width=,x=,y=",
    "%": "SVGFEDisplacementMapElement"
  },
  FEFloodElement: {
    "": "SvgElement;height=,width=,x=,y=",
    "%": "SVGFEFloodElement"
  },
  FEGaussianBlurElement: {
    "": "SvgElement;height=,width=,x=,y=",
    "%": "SVGFEGaussianBlurElement"
  },
  FEImageElement: {
    "": "SvgElement;height=,width=,x=,y=",
    "%": "SVGFEImageElement"
  },
  FEMergeElement: {
    "": "SvgElement;height=,width=,x=,y=",
    "%": "SVGFEMergeElement"
  },
  FEMorphologyElement: {
    "": "SvgElement;height=,width=,x=,y=",
    "%": "SVGFEMorphologyElement"
  },
  FEOffsetElement: {
    "": "SvgElement;height=,width=,x=,y=",
    "%": "SVGFEOffsetElement"
  },
  FEPointLightElement: {
    "": "SvgElement;x=,y=",
    "%": "SVGFEPointLightElement"
  },
  FESpecularLightingElement: {
    "": "SvgElement;height=,width=,x=,y=",
    "%": "SVGFESpecularLightingElement"
  },
  FESpotLightElement: {
    "": "SvgElement;x=,y=",
    "%": "SVGFESpotLightElement"
  },
  FETileElement: {
    "": "SvgElement;height=,width=,x=,y=",
    "%": "SVGFETileElement"
  },
  FETurbulenceElement: {
    "": "SvgElement;type=,height=,width=,x=,y=",
    "%": "SVGFETurbulenceElement"
  },
  FilterElement: {
    "": "SvgElement;height=,width=,x=,y=",
    "%": "SVGFilterElement"
  },
  ForeignObjectElement: {
    "": "GraphicsElement;height=,width=,x=,y=",
    "%": "SVGForeignObjectElement"
  },
  GraphicsElement: {
    "": "SvgElement;",
    "%": "SVGAElement|SVGCircleElement|SVGClipPathElement|SVGDefsElement|SVGEllipseElement|SVGGElement|SVGLineElement|SVGPathElement|SVGPolygonElement|SVGPolylineElement|SVGSwitchElement;SVGGraphicsElement"
  },
  ImageElement0: {
    "": "GraphicsElement;height=,width=,x=,y=",
    "%": "SVGImageElement"
  },
  MaskElement: {
    "": "SvgElement;height=,width=,x=,y=",
    "%": "SVGMaskElement"
  },
  PatternElement: {
    "": "SvgElement;height=,width=,x=,y=",
    "%": "SVGPatternElement"
  },
  RectElement: {
    "": "GraphicsElement;height=,width=,x=,y=",
    "%": "SVGRectElement"
  },
  ScriptElement: {
    "": "SvgElement;type=",
    $isScriptElement: true,
    "%": "SVGScriptElement"
  },
  StyleElement0: {
    "": "SvgElement;type=",
    "%": "SVGStyleElement"
  },
  SvgElement: {
    "": "Element;",
    get$children: function(receiver) {
      return H.setRuntimeTypeInfo(new P.FilteredElementList(receiver, new W._ChildNodeListLazy(receiver)), [W.Element]);
    },
    set$innerHtml: function(receiver, value) {
      receiver.textContent = null;
      receiver.appendChild(this.createFragment$3$treeSanitizer$validator(receiver, value, null, null));
    },
    createFragment$3$treeSanitizer$validator: function(receiver, svg, treeSanitizer, validator) {
      var t1, html, fragment, svgFragment, root;
      t1 = H.setRuntimeTypeInfo([], [W.NodeValidator]);
      validator = new W.NodeValidatorBuilder(t1);
      t1.push(W._Html5NodeValidator$(null));
      t1.push(W._TemplatingNodeValidator$());
      t1.push(new W._SvgNodeValidator());
      treeSanitizer = new W._ValidatingTreeSanitizer(validator);
      html = "<svg version=\"1.1\">" + svg + "</svg>";
      fragment = J.createFragment$2$treeSanitizer$x(document.body, html, treeSanitizer);
      svgFragment = document.createDocumentFragment();
      fragment.toString;
      t1 = new W._ChildNodeListLazy(fragment);
      root = t1.get$single(t1);
      for (; t1 = root.firstChild, t1 != null;)
        svgFragment.appendChild(t1);
      return svgFragment;
    },
    $isSvgElement: true,
    "%": "SVGAltGlyphDefElement|SVGAltGlyphItemElement|SVGAnimateColorElement|SVGAnimateElement|SVGAnimateMotionElement|SVGAnimateTransformElement|SVGAnimationElement|SVGComponentTransferFunctionElement|SVGCursorElement|SVGDescElement|SVGFEDistantLightElement|SVGFEDropShadowElement|SVGFEFuncAElement|SVGFEFuncBElement|SVGFEFuncGElement|SVGFEFuncRElement|SVGFEMergeNodeElement|SVGFontElement|SVGFontFaceElement|SVGFontFaceFormatElement|SVGFontFaceNameElement|SVGFontFaceSrcElement|SVGFontFaceUriElement|SVGGlyphElement|SVGGlyphRefElement|SVGGradientElement|SVGHKernElement|SVGLinearGradientElement|SVGMPathElement|SVGMarkerElement|SVGMetadataElement|SVGMissingGlyphElement|SVGRadialGradientElement|SVGSetElement|SVGStopElement|SVGSymbolElement|SVGTitleElement|SVGVKernElement|SVGViewElement;SVGElement"
  },
  SvgSvgElement: {
    "": "GraphicsElement;height=,width=,x=,y=",
    "%": "SVGSVGElement"
  },
  TextContentElement: {
    "": "GraphicsElement;",
    "%": "SVGTextPathElement;SVGTextContentElement"
  },
  TextPositioningElement: {
    "": "TextContentElement;x=,y=",
    "%": "SVGAltGlyphElement|SVGTSpanElement|SVGTextElement|SVGTextPositioningElement"
  },
  UseElement: {
    "": "GraphicsElement;height=,width=,x=,y=",
    "%": "SVGUseElement"
  }
}],
["dart.math", "dart:math", , P, {
  "": "",
  _JenkinsSmiHash_combine0: function(hash, value) {
    hash = 536870911 & hash + value;
    hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
    return hash ^ hash >>> 6;
  },
  _JenkinsSmiHash_finish: function(hash) {
    hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
    hash ^= hash >>> 11;
    return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
  },
  _JSRandom: {
    "": "Object;",
    nextInt$1: function(max) {
      if (typeof max !== "number")
        return max.$le();
      if (max <= 0 || max > 4294967296)
        throw H.wrapException(P.RangeError$("max must be in range 0 < max \u2264 2^32, was " + H.S(max)));
      return Math.random() * max >>> 0;
    },
    nextDouble$0: function() {
      return Math.random();
    }
  },
  _Random: {
    "": "Object;_lo,_hi",
    _nextState$0: function() {
      var t1, tmpHi, tmpHiLo, tmpLo, tmpLoLo, newLo;
      t1 = this._lo;
      if (typeof t1 !== "number")
        return H.iae(t1);
      tmpHi = 4294901760 * t1;
      tmpHiLo = (tmpHi & 4294967295) >>> 0;
      tmpLo = 55905 * t1;
      tmpLoLo = (tmpLo & 4294967295) >>> 0;
      newLo = tmpLoLo + tmpHiLo + this._hi;
      t1 = (newLo & 4294967295) >>> 0;
      this._lo = t1;
      this._hi = (C.JSNumber_methods._tdivFast$1(tmpLo - tmpLoLo + (tmpHi - tmpHiLo) + (newLo - t1), 4294967296) & 4294967295) >>> 0;
    },
    nextInt$1: function(max) {
      var t1, t2, rnd32, result;
      if (typeof max !== "number")
        return max.$le();
      if (max <= 0 || max > 4294967296)
        throw H.wrapException(P.RangeError$("max must be in range 0 < max \u2264 2^32, was " + H.S(max)));
      t1 = max - 1;
      if ((max & t1) >>> 0 === 0) {
        this._nextState$0();
        t2 = this._lo;
        if (typeof t2 !== "number")
          return t2.$and();
        return (t2 & t1) >>> 0;
      }
      do {
        this._nextState$0();
        rnd32 = this._lo;
        rnd32.toString;
        result = rnd32 % max;
        if (typeof rnd32 !== "number")
          return rnd32.$sub();
      } while (rnd32 - result + max >= 4294967296);
      return result;
    },
    nextDouble$0: function() {
      var t1, t2;
      this._nextState$0();
      t1 = this._lo;
      if (typeof t1 !== "number")
        return t1.$and();
      this._nextState$0();
      t2 = this._lo;
      if (typeof t2 !== "number")
        return t2.$and();
      return ((t1 & 67108863) * 134217728 + (t2 & 134217727)) / 9007199254740992;
    },
    _Random$1: function(seed) {
      var t1, t2;
      if (typeof seed !== "number")
        return seed.$add();
      seed += 23063;
      t1 = (seed & 4294967295) >>> 0;
      this._lo = t1;
      t2 = C.JSNumber_methods._tdivFast$1(seed - t1, 4294967296);
      this._hi = t2;
      if (t2 === 0 && t1 === 0)
        this._lo = 23063;
      this._nextState$0();
      this._nextState$0();
      this._nextState$0();
      this._nextState$0();
    },
    static: {"": "_Random__POW2_53_D,_Random__POW2_27_D,_Random__MASK32", _Random$: function(seed) {
        var t1 = new P._Random(null, null);
        t1._Random$1(seed);
        return t1;
      }}
  },
  Point: {
    "": "Object;x>,y>",
    toString$0: function(_) {
      return "Point(" + H.S(this.x) + ", " + H.S(this.y) + ")";
    },
    $eq: function(_, other) {
      var t1;
      if (other == null)
        return false;
      t1 = J.getInterceptor(other);
      if (typeof other !== "object" || other === null || !t1.$isPoint)
        return false;
      return J.$eq(this.x, other.x) && J.$eq(this.y, other.y);
    },
    get$hashCode: function(_) {
      var t1, t2;
      t1 = J.get$hashCode$(this.x);
      t2 = J.get$hashCode$(this.y);
      return P._JenkinsSmiHash_finish(P._JenkinsSmiHash_combine0(P._JenkinsSmiHash_combine0(0, t1), t2));
    },
    $add: function(_, other) {
      var t1 = new P.Point(J.$add$ns(this.x, C.JSNumber_methods.get$x(other)), J.$add$ns(this.y, C.JSNumber_methods.get$y(other)));
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      return t1;
    },
    $sub: function(_, other) {
      var t1 = new P.Point(J.$sub$n(this.x, J.get$x$x(other)), J.$sub$n(this.y, other.y));
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      return t1;
    },
    $isPoint: true
  },
  _RectangleBase: {
    "": "Object;",
    get$right: function(_) {
      return J.$add$ns(this.get$left(this), this.width);
    },
    get$bottom: function(_) {
      return J.$add$ns(this.get$top(this), this.height);
    },
    toString$0: function(_) {
      return "Rectangle (" + H.S(this.get$left(this)) + ", " + H.S(this.top) + ") " + H.S(this.width) + " x " + H.S(this.height);
    },
    $eq: function(_, other) {
      var t1;
      if (other == null)
        return false;
      t1 = J.getInterceptor$x(other);
      if (typeof other !== "object" || other === null || !t1.$isRectangle)
        return false;
      return J.$eq(this.get$left(this), t1.get$left(other)) && J.$eq(this.top, t1.get$top(other)) && J.$eq(this.width, t1.get$width(other)) && J.$eq(this.height, t1.get$height(other));
    },
    get$hashCode: function(_) {
      var t1, t2, t3, t4;
      t1 = J.get$hashCode$(this.get$left(this));
      t2 = J.get$hashCode$(this.top);
      t3 = J.get$hashCode$(this.width);
      t4 = J.get$hashCode$(this.height);
      return P._JenkinsSmiHash_finish(P._JenkinsSmiHash_combine0(P._JenkinsSmiHash_combine0(P._JenkinsSmiHash_combine0(P._JenkinsSmiHash_combine0(0, t1), t2), t3), t4));
    },
    intersects$1: function(_, other) {
      var t1, t2, t3;
      t1 = this.get$left(this);
      t2 = other.left;
      t3 = J.$add$ns(t2, other.width);
      if (typeof t1 !== "number")
        return t1.$le();
      if (typeof t3 !== "number")
        return H.iae(t3);
      if (t1 <= t3) {
        t1 = J.$add$ns(this.left, this.width);
        if (typeof t2 !== "number")
          return t2.$le();
        if (typeof t1 !== "number")
          return H.iae(t1);
        if (t2 <= t1) {
          t1 = this.top;
          t2 = other.top;
          t3 = J.$add$ns(t2, other.height);
          if (typeof t1 !== "number")
            return t1.$le();
          if (typeof t3 !== "number")
            return H.iae(t3);
          if (t1 <= t3) {
            t3 = this.height;
            if (typeof t3 !== "number")
              return H.iae(t3);
            if (typeof t2 !== "number")
              return t2.$le();
            t3 = t2 <= t1 + t3;
            t1 = t3;
          } else
            t1 = false;
        } else
          t1 = false;
      } else
        t1 = false;
      return t1;
    },
    containsPoint$1: function(_, another) {
      var t1, t2, t3;
      t1 = another.x;
      t2 = this.get$left(this);
      if (typeof t1 !== "number")
        return t1.$ge();
      if (typeof t2 !== "number")
        return H.iae(t2);
      if (t1 >= t2) {
        t2 = J.$add$ns(this.left, this.width);
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (t1 <= t2) {
          t1 = another.y;
          t2 = this.top;
          if (typeof t1 !== "number")
            return t1.$ge();
          if (typeof t2 !== "number")
            return H.iae(t2);
          if (t1 >= t2) {
            t3 = this.height;
            if (typeof t3 !== "number")
              return H.iae(t3);
            t3 = t1 <= t2 + t3;
            t1 = t3;
          } else
            t1 = false;
        } else
          t1 = false;
      } else
        t1 = false;
      return t1;
    },
    get$topLeft: function(_) {
      var t1 = new P.Point(this.get$left(this), this.top);
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      return t1;
    }
  },
  Rectangle: {
    "": "_RectangleBase;left>,top>,width>,height>",
    $isRectangle: true,
    $asRectangle: null,
    $as_RectangleBase: null
  }
}],
["dart.typed_data", "dart:typed_data", , P, {
  "": "",
  TypedData: {
    "": "Interceptor;",
    _invalidIndex$2: function(receiver, index, $length) {
      var t1 = J.getInterceptor$n(index);
      if (t1.$lt(index, 0) || t1.$ge(index, $length))
        throw H.wrapException(P.RangeError$range(index, 0, $length));
      else
        throw H.wrapException(P.ArgumentError$("Invalid list index " + H.S(index)));
    },
    "%": ";ArrayBufferView;_NativeTypedArray|_NativeTypedArray_ListMixin|_NativeTypedArray_ListMixin_FixedLengthListMixin|_NativeTypedArrayOfInt"
  },
  Uint8List: {
    "": "_NativeTypedArrayOfInt;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      var t1, t2;
      t1 = receiver.length;
      if (!(index >>> 0 != index)) {
        if (typeof index !== "number")
          return index.$ge();
        t2 = index >= t1;
      } else
        t2 = true;
      if (t2)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      var t1 = receiver.length;
      if (index >>> 0 != index || J.$ge$n(index, t1))
        this._invalidIndex$2(receiver, index, t1);
      receiver[index] = value;
    },
    "%": ";Uint8Array"
  },
  _NativeTypedArray: {
    "": "TypedData;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $isJavaScriptIndexingBehavior: true
  },
  _NativeTypedArrayOfInt: {
    "": "_NativeTypedArray_ListMixin_FixedLengthListMixin;",
    $isList: true,
    $asList: function() {
      return [J.JSInt];
    },
    $isEfficientLength: true
  },
  _NativeTypedArray_ListMixin: {
    "": "_NativeTypedArray+ListMixin;",
    $isList: true,
    $asList: function() {
      return [J.JSInt];
    },
    $isEfficientLength: true
  },
  _NativeTypedArray_ListMixin_FixedLengthListMixin: {
    "": "_NativeTypedArray_ListMixin+FixedLengthListMixin;"
  }
}],
["dart2js._js_primitives", "dart:_js_primitives", , H, {
  "": "",
  printString: function(string) {
    if (typeof dartPrint == "function") {
      dartPrint(string);
      return;
    }
    if (typeof console == "object" && typeof console.log == "function") {
      console.log(string);
      return;
    }
    if (typeof window == "object")
      return;
    if (typeof print == "function") {
      print(string);
      return;
    }
    throw "Unable to print message: " + String(string);
  }
}],
["html_common", "dart:html_common", , P, {
  "": "",
  FilteredElementList: {
    "": "ListBase;_node,_childNodes",
    get$_filtered: function() {
      var t1 = this._childNodes;
      return P.List_List$from(t1.where$1(t1, new P.FilteredElementList__filtered_closure()), true, W.Element);
    },
    forEach$1: function(_, f) {
      H.IterableMixinWorkaround_forEach(this.get$_filtered(), f);
    },
    $indexSet: function(_, index, value) {
      var t1 = this.get$_filtered();
      if (index >>> 0 !== index || index >= t1.length)
        return H.ioore(t1, index);
      J.replaceWith$1$x(t1[index], value);
    },
    set$length: function(_, newLength) {
      var len = this.get$_filtered().length;
      if (newLength >= len)
        return;
      else if (newLength < 0)
        throw H.wrapException(new P.ArgumentError("Invalid list length"));
      this.removeRange$2(this, newLength, len);
    },
    add$1: function(_, value) {
      this._childNodes._this.appendChild(value);
    },
    removeRange$2: function(_, start, end) {
      H.IterableMixinWorkaround_forEach(C.JSArray_methods.sublist$2(this.get$_filtered(), start, end), new P.FilteredElementList_removeRange_closure());
    },
    clear$0: function(_) {
      this._childNodes._this.textContent = "";
    },
    get$length: function(_) {
      return this.get$_filtered().length;
    },
    $index: function(_, index) {
      var t1 = this.get$_filtered();
      if (index >>> 0 !== index || index >= t1.length)
        return H.ioore(t1, index);
      return t1[index];
    },
    get$iterator: function(_) {
      var t1 = this.get$_filtered();
      return new H.ListIterator(t1, t1.length, 0, null);
    },
    $asListBase: null,
    $asList: null
  },
  FilteredElementList__filtered_closure: {
    "": "Closure:14;",
    call$1: function(n) {
      var t1 = J.getInterceptor(n);
      return typeof n === "object" && n !== null && !!t1.$isElement;
    }
  },
  FilteredElementList_removeRange_closure: {
    "": "Closure:14;",
    call$1: function(el) {
      return J.remove$0$ax(el);
    }
  }
}],
]);
Isolate.$finishClasses($$, $, null);
$$ = null;

// Runtime type support
J.JSInt.$isint = true;
J.JSInt.$isnum = true;
J.JSInt.$isComparable = true;
J.JSInt.$asComparable = [J.JSNumber];
J.JSInt.$isComparable = true;
J.JSInt.$asComparable = [J.JSNumber];
J.JSInt.$isComparable = true;
J.JSInt.$asComparable = [J.JSNumber];
J.JSInt.$isObject = true;
W.Node.$isNode = true;
W.Node.$isEventTarget = true;
W.Node.$isObject = true;
J.JSNumber.$isnum = true;
J.JSNumber.$isComparable = true;
J.JSNumber.$asComparable = [J.JSNumber];
J.JSNumber.$isObject = true;
J.JSString.$isString = true;
J.JSString.$isComparable = true;
J.JSString.$asComparable = [J.JSString];
J.JSString.$isObject = true;
P.Duration.$isDuration = true;
P.Duration.$isComparable = true;
P.Duration.$asComparable = [P.Duration];
P.Duration.$isObject = true;
W.Element.$isElement = true;
W.Element.$isNode = true;
W.Element.$isEventTarget = true;
W.Element.$isObject = true;
U.Vector.$isObject = true;
W.Event.$isObject = true;
U.Building.$isObject = true;
U.Sporetower.$isObject = true;
U.Emitter.$isObject = true;
U.UISymbol.$isObject = true;
U.Ship.$isObject = true;
U.Explosion.$isObject = true;
U.Smoke.$isObject = true;
U.Packet.$isObject = true;
U.Route.$isRoute = true;
U.Route.$isObject = true;
U.Connection.$isObject = true;
U.Spore.$isObject = true;
U.Shell.$isObject = true;
U.Projectile.$isObject = true;
W.MouseEvent.$isObject = true;
W.KeyboardEvent.$isObject = true;
W.WheelEvent.$isObject = true;
U.Tile.$isObject = true;
W.NodeValidator.$isNodeValidator = true;
W.NodeValidator.$isObject = true;
J.JSArray.$isIterable = true;
J.JSArray.$isObject = true;
U.DisplayObject.$isObject = true;
H.RawReceivePortImpl.$isObject = true;
H._IsolateEvent.$isObject = true;
H._IsolateContext.$isObject = true;
P.Timer.$isTimer = true;
P.Timer.$isObject = true;
P.Symbol.$isSymbol = true;
P.Symbol.$isObject = true;
P.StackTrace.$isStackTrace = true;
P.StackTrace.$isObject = true;
P.Comparable.$isComparable = true;
P.Comparable.$isObject = true;
W.EventTarget.$isEventTarget = true;
W.EventTarget.$isObject = true;
P.Object.$isObject = true;
J.JSBool.$isbool = true;
J.JSBool.$isObject = true;
W._Html5NodeValidator.$is_Html5NodeValidator = true;
W._Html5NodeValidator.$isNodeValidator = true;
W._Html5NodeValidator.$isObject = true;
P.Future.$isFuture = true;
P.Future.$isObject = true;
P._DelayedEvent.$is_DelayedEvent = true;
P._DelayedEvent.$isObject = true;
P._EventSink.$is_EventSink = true;
P._EventSink.$isObject = true;
P.StreamSubscription.$isStreamSubscription = true;
P.StreamSubscription.$isObject = true;
P.DateTime.$isDateTime = true;
P.DateTime.$isComparable = true;
P.DateTime.$asComparable = [null];
P.DateTime.$isObject = true;
P.Iterable.$isIterable = true;
P.Iterable.$isObject = true;
P.Stream.$isStream = true;
P.Stream.$isObject = true;
$.$signature_args2 = {func: "args2", args: [null, null]};
$.$signature_args1 = {func: "args1", args: [null]};
// getInterceptor methods
J.getInterceptor = function(receiver) {
  if (typeof receiver == "number") {
    if (Math.floor(receiver) == receiver)
      return J.JSInt.prototype;
    return J.JSDouble.prototype;
  }
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return J.JSNull.prototype;
  if (typeof receiver == "boolean")
    return J.JSBool.prototype;
  if (receiver.constructor == Array)
    return J.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.getInterceptor$asx = function(receiver) {
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return J.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.getInterceptor$ax = function(receiver) {
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return J.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.getInterceptor$n = function(receiver) {
  if (typeof receiver == "number")
    return J.JSNumber.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof P.Object))
    return J.UnknownJavaScriptObject.prototype;
  return receiver;
};
J.getInterceptor$ns = function(receiver) {
  if (typeof receiver == "number")
    return J.JSNumber.prototype;
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof P.Object))
    return J.UnknownJavaScriptObject.prototype;
  return receiver;
};
J.getInterceptor$s = function(receiver) {
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof P.Object))
    return J.UnknownJavaScriptObject.prototype;
  return receiver;
};
J.getInterceptor$x = function(receiver) {
  if (receiver == null)
    return receiver;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.$add$ns = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver + a0;
  return J.getInterceptor$ns(receiver).$add(receiver, a0);
};
J.$div$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver / a0;
  return J.getInterceptor$n(receiver).$div(receiver, a0);
};
J.$eq = function(receiver, a0) {
  if (receiver == null)
    return a0 == null;
  if (typeof receiver != "object")
    return a0 != null && receiver === a0;
  return J.getInterceptor(receiver).$eq(receiver, a0);
};
J.$ge$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver >= a0;
  return J.getInterceptor$n(receiver).$ge(receiver, a0);
};
J.$gt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver > a0;
  return J.getInterceptor$n(receiver).$gt(receiver, a0);
};
J.$index$asx = function(receiver, a0) {
  if (receiver.constructor == Array || typeof receiver == "string" || H.isJsIndexable(receiver, receiver[init.dispatchPropertyName]))
    if (a0 >>> 0 === a0 && a0 < receiver.length)
      return receiver[a0];
  return J.getInterceptor$asx(receiver).$index(receiver, a0);
};
J.$indexSet$ax = function(receiver, a0, a1) {
  if ((receiver.constructor == Array || H.isJsIndexable(receiver, receiver[init.dispatchPropertyName])) && !receiver.immutable$list && a0 >>> 0 === a0 && a0 < receiver.length)
    return receiver[a0] = a1;
  return J.getInterceptor$ax(receiver).$indexSet(receiver, a0, a1);
};
J.$lt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver < a0;
  return J.getInterceptor$n(receiver).$lt(receiver, a0);
};
J.$mul$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver * a0;
  return J.getInterceptor$n(receiver).$mul(receiver, a0);
};
J.$sub$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver - a0;
  return J.getInterceptor$n(receiver).$sub(receiver, a0);
};
J._replaceChild$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver)._replaceChild$2(receiver, a0, a1);
};
J.abs$0$n = function(receiver) {
  return J.getInterceptor$n(receiver).abs$0(receiver);
};
J.add$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).add$1(receiver, a0);
};
J.addEventListener$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).addEventListener$3(receiver, a0, a1, a2);
};
J.arc$6$x = function(receiver, a0, a1, a2, a3, a4, a5) {
  return J.getInterceptor$x(receiver).arc$6(receiver, a0, a1, a2, a3, a4, a5);
};
J.beginPath$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).beginPath$0(receiver);
};
J.clamp$2$n = function(receiver, a0, a1) {
  return J.getInterceptor$n(receiver).clamp$2(receiver, a0, a1);
};
J.clear$0$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).clear$0(receiver);
};
J.clearRect$4$x = function(receiver, a0, a1, a2, a3) {
  return J.getInterceptor$x(receiver).clearRect$4(receiver, a0, a1, a2, a3);
};
J.closePath$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).closePath$0(receiver);
};
J.compareTo$1$ns = function(receiver, a0) {
  return J.getInterceptor$ns(receiver).compareTo$1(receiver, a0);
};
J.createFragment$2$treeSanitizer$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).createFragment$2$treeSanitizer(receiver, a0, a1);
};
J.createFragment$3$treeSanitizer$validator$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).createFragment$3$treeSanitizer$validator(receiver, a0, a1, a2);
};
J.createPatternFromImage$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).createPatternFromImage$2(receiver, a0, a1);
};
J.drawImage$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).drawImage$3(receiver, a0, a1, a2);
};
J.drawImageScaled$5$x = function(receiver, a0, a1, a2, a3, a4) {
  return J.getInterceptor$x(receiver).drawImageScaled$5(receiver, a0, a1, a2, a3, a4);
};
J.drawImageScaledFromSource$9$x = function(receiver, a0, a1, a2, a3, a4, a5, a6, a7, a8) {
  return J.getInterceptor$x(receiver).drawImageScaledFromSource$9(receiver, a0, a1, a2, a3, a4, a5, a6, a7, a8);
};
J.elementAt$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).elementAt$1(receiver, a0);
};
J.fillRect$4$x = function(receiver, a0, a1, a2, a3) {
  return J.getInterceptor$x(receiver).fillRect$4(receiver, a0, a1, a2, a3);
};
J.floor$0$n = function(receiver) {
  return J.getInterceptor$n(receiver).floor$0(receiver);
};
J.forEach$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).forEach$1(receiver, a0);
};
J.get$children$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$children(receiver);
};
J.get$currentTime$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$currentTime(receiver);
};
J.get$deltaY$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$deltaY(receiver);
};
J.get$ended$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$ended(receiver);
};
J.get$error$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$error(receiver);
};
J.get$hashCode$ = function(receiver) {
  return J.getInterceptor(receiver).get$hashCode(receiver);
};
J.get$height$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$height(receiver);
};
J.get$index$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$index(receiver);
};
J.get$iterator$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).get$iterator(receiver);
};
J.get$left$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$left(receiver);
};
J.get$length$asx = function(receiver) {
  return J.getInterceptor$asx(receiver).get$length(receiver);
};
J.get$name$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$name(receiver);
};
J.get$nodes$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$nodes(receiver);
};
J.get$offset$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$offset(receiver);
};
J.get$offsetLeft$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$offsetLeft(receiver);
};
J.get$offsetTop$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$offsetTop(receiver);
};
J.get$onLoad$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$onLoad(receiver);
};
J.get$position$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$position(receiver);
};
J.get$selected$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$selected(receiver);
};
J.get$size$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$size(receiver);
};
J.get$status$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$status(receiver);
};
J.get$style$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$style(receiver);
};
J.get$top$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$top(receiver);
};
J.get$topLeft$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$topLeft(receiver);
};
J.get$type$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$type(receiver);
};
J.get$value$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$value(receiver);
};
J.get$view$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$view(receiver);
};
J.get$which$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$which(receiver);
};
J.get$width$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$width(receiver);
};
J.get$x$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$x(receiver);
};
J.get$y$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$y(receiver);
};
J.getBoundingClientRect$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).getBoundingClientRect$0(receiver);
};
J.getContext$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).getContext$1(receiver, a0);
};
J.lineTo$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).lineTo$2(receiver, a0, a1);
};
J.moveTo$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).moveTo$2(receiver, a0, a1);
};
J.play$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).play$0(receiver);
};
J.preventDefault$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).preventDefault$0(receiver);
};
J.remove$0$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).remove$0(receiver);
};
J.removeAt$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).removeAt$1(receiver, a0);
};
J.removeEventListener$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).removeEventListener$3(receiver, a0, a1, a2);
};
J.replaceWith$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).replaceWith$1(receiver, a0);
};
J.restore$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).restore$0(receiver);
};
J.rotate$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).rotate$1(receiver, a0);
};
J.save$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).save$0(receiver);
};
J.send$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).send$1(receiver, a0);
};
J.set$bottom$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$bottom(receiver, value);
};
J.set$cursor$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$cursor(receiver, value);
};
J.set$display$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$display(receiver, value);
};
J.set$fillStyle$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$fillStyle(receiver, value);
};
J.set$globalAlpha$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$globalAlpha(receiver, value);
};
J.set$globalCompositeOperation$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$globalCompositeOperation(receiver, value);
};
J.set$height$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$height(receiver, value);
};
J.set$href$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$href(receiver, value);
};
J.set$index$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$index(receiver, value);
};
J.set$innerHtml$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$innerHtml(receiver, value);
};
J.set$left$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$left(receiver, value);
};
J.set$length$asx = function(receiver, value) {
  return J.getInterceptor$asx(receiver).set$length(receiver, value);
};
J.set$lineWidth$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$lineWidth(receiver, value);
};
J.set$position$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$position(receiver, value);
};
J.set$right$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$right(receiver, value);
};
J.set$selected$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$selected(receiver, value);
};
J.set$src$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$src(receiver, value);
};
J.set$status$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$status(receiver, value);
};
J.set$strokeStyle$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$strokeStyle(receiver, value);
};
J.set$top$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$top(receiver, value);
};
J.set$volume$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$volume(receiver, value);
};
J.set$zIndex$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$zIndex(receiver, value);
};
J.split$1$s = function(receiver, a0) {
  return J.getInterceptor$s(receiver).split$1(receiver, a0);
};
J.stroke$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).stroke$0(receiver);
};
J.substring$1$s = function(receiver, a0) {
  return J.getInterceptor$s(receiver).substring$1(receiver, a0);
};
J.substring$2$s = function(receiver, a0, a1) {
  return J.getInterceptor$s(receiver).substring$2(receiver, a0, a1);
};
J.toInt$0$n = function(receiver) {
  return J.getInterceptor$n(receiver).toInt$0(receiver);
};
J.toList$0$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).toList$0(receiver);
};
J.toLowerCase$0$s = function(receiver) {
  return J.getInterceptor$s(receiver).toLowerCase$0(receiver);
};
J.toString$0 = function(receiver) {
  return J.getInterceptor(receiver).toString$0(receiver);
};
J.toStringAsFixed$1$n = function(receiver, a0) {
  return J.getInterceptor$n(receiver).toStringAsFixed$1(receiver, a0);
};
J.translate$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).translate$2(receiver, a0, a1);
};
C.C_DynamicRuntimeType = new H.DynamicRuntimeType();
C.C__DelayedDone = new P._DelayedDone();
C.C__JSRandom = new P._JSRandom();
C.C__RootZone = new P._RootZone();
C.CanvasRenderingContext2D_methods = W.CanvasRenderingContext2D.prototype;
C.Duration_0 = new P.Duration(0);
C.EventStreamProvider_canplay = new W.EventStreamProvider("canplay");
C.EventStreamProvider_click = new W.EventStreamProvider("click");
C.EventStreamProvider_contextmenu = new W.EventStreamProvider("contextmenu");
C.EventStreamProvider_dblclick = new W.EventStreamProvider("dblclick");
C.EventStreamProvider_keydown = new W.EventStreamProvider("keydown");
C.EventStreamProvider_keyup = new W.EventStreamProvider("keyup");
C.EventStreamProvider_load = new W.EventStreamProvider("load");
C.EventStreamProvider_mousedown = new W.EventStreamProvider("mousedown");
C.EventStreamProvider_mousemove = new W.EventStreamProvider("mousemove");
C.EventStreamProvider_mouseup = new W.EventStreamProvider("mouseup");
C.EventStreamProvider_resize = new W.EventStreamProvider("resize");
C.JSArray_methods = J.JSArray.prototype;
C.JSDouble_methods = J.JSDouble.prototype;
C.JSInt_methods = J.JSInt.prototype;
C.JSNumber_methods = J.JSNumber.prototype;
C.JSString_methods = J.JSString.prototype;
C.JS_CONST_0 = function(hooks) {
  if (typeof dartExperimentalFixupGetTag != "function") return hooks;
  hooks.getTag = dartExperimentalFixupGetTag(hooks.getTag);
};
C.JS_CONST_Fs4 = function(hooks) { return hooks; }
;
C.JS_CONST_IX5 = function getTagFallback(o) {
  var constructor = o.constructor;
  if (typeof constructor == "function") {
    var name = constructor.name;
    if (typeof name == "string"
        && name !== ""
        && name !== "Object"
        && name !== "Function.prototype") {
      return name;
    }
  }
  var s = Object.prototype.toString.call(o);
  return s.substring(8, s.length - 1);
};
C.JS_CONST_QJm = function(getTagFallback) {
  return function(hooks) {
    if (typeof navigator != "object") return hooks;
    var ua = navigator.userAgent;
    if (ua.indexOf("DumpRenderTree") >= 0) return hooks;
    if (ua.indexOf("Chrome") >= 0) {
      function confirm(p) {
        return typeof window == "object" && window[p] && window[p].name == p;
      }
      if (confirm("Window") && confirm("HTMLElement")) return hooks;
    }
    hooks.getTag = getTagFallback;
  };
};
C.JS_CONST_U4w = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Firefox") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "GeoGeolocation": "Geolocation",
    "WorkerMessageEvent": "MessageEvent",
    "XMLDocument": "!Document"};
  function getTagFirefox(o) {
    var tag = getTag(o);
    return quickMap[tag] || tag;
  }
  hooks.getTag = getTagFirefox;
};
C.JS_CONST_aQP = function() {
  function typeNameInChrome(o) {
    var name = o.constructor.name;
    if (name) return name;
    var s = Object.prototype.toString.call(o);
    return s.substring(8, s.length - 1);
  }
  function getUnknownTag(object, tag) {
    if (/^HTML[A-Z].*Element$/.test(tag)) {
      var name = Object.prototype.toString.call(object);
      if (name == "[object Object]") return null;
      return "HTMLElement";
    }
  }
  function getUnknownTagGenericBrowser(object, tag) {
    if (object instanceof HTMLElement) return "HTMLElement";
    return getUnknownTag(object, tag);
  }
  function prototypeForTag(tag) {
    if (typeof window == "undefined") return null;
    if (typeof window[tag] == "undefined") return null;
    var constructor = window[tag];
    if (typeof constructor != "function") return null;
    return constructor.prototype;
  }
  function discriminator(tag) { return null; }
  var isBrowser = typeof navigator == "object";
  return {
    getTag: typeNameInChrome,
    getUnknownTag: isBrowser ? getUnknownTagGenericBrowser : getUnknownTag,
    prototypeForTag: prototypeForTag,
    discriminator: discriminator };
};
C.JS_CONST_gkc = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Trident/") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "HTMLDDElement": "HTMLElement",
    "HTMLDTElement": "HTMLElement",
    "HTMLPhraseElement": "HTMLElement",
    "Position": "Geoposition"
  };
  function getTagIE(o) {
    var tag = getTag(o);
    var newTag = quickMap[tag];
    if (newTag) return newTag;
    if (tag == "Object") {
      if (window.DataView && (o instanceof window.DataView)) return "DataView";
    }
    return tag;
  }
  function prototypeForTagIE(tag) {
    var constructor = window[tag];
    if (constructor == null) return null;
    return constructor.prototype;
  }
  hooks.getTag = getTagIE;
  hooks.prototypeForTag = prototypeForTagIE;
};
C.JS_CONST_rr7 = function(hooks) {
  var getTag = hooks.getTag;
  var prototypeForTag = hooks.prototypeForTag;
  function getTagFixed(o) {
    var tag = getTag(o);
    if (tag == "Document") {
      if (!!o.xmlVersion) return "!Document";
      return "!HTMLDocument";
    }
    return tag;
  }
  function prototypeForTagFixed(tag) {
    if (tag == "Document") return null;
    return prototypeForTag(tag);
  }
  hooks.getTag = getTagFixed;
  hooks.prototypeForTag = prototypeForTagFixed;
};
C.Layer_0 = new U.Layer(0);
C.Layer_1 = new U.Layer(1);
C.Layer_10 = new U.Layer(10);
C.Layer_2 = new U.Layer(2);
C.Layer_3 = new U.Layer(3);
C.Layer_4 = new U.Layer(4);
C.Layer_5 = new U.Layer(5);
C.Layer_6 = new U.Layer(6);
C.Layer_7 = new U.Layer(7);
C.Layer_8 = new U.Layer(8);
C.Layer_9 = new U.Layer(9);
Isolate.makeConstantList = function(list) {
  list.immutable$list = init;
  list.fixed$length = init;
  return list;
};
C.List_1GN = H.setRuntimeTypeInfo(Isolate.makeConstantList(["*::class", "*::dir", "*::draggable", "*::hidden", "*::id", "*::inert", "*::itemprop", "*::itemref", "*::itemscope", "*::lang", "*::spellcheck", "*::title", "*::translate", "A::accesskey", "A::coords", "A::hreflang", "A::name", "A::shape", "A::tabindex", "A::target", "A::type", "AREA::accesskey", "AREA::alt", "AREA::coords", "AREA::nohref", "AREA::shape", "AREA::tabindex", "AREA::target", "AUDIO::controls", "AUDIO::loop", "AUDIO::mediagroup", "AUDIO::muted", "AUDIO::preload", "BDO::dir", "BODY::alink", "BODY::bgcolor", "BODY::link", "BODY::text", "BODY::vlink", "BR::clear", "BUTTON::accesskey", "BUTTON::disabled", "BUTTON::name", "BUTTON::tabindex", "BUTTON::type", "BUTTON::value", "CANVAS::height", "CANVAS::width", "CAPTION::align", "COL::align", "COL::char", "COL::charoff", "COL::span", "COL::valign", "COL::width", "COLGROUP::align", "COLGROUP::char", "COLGROUP::charoff", "COLGROUP::span", "COLGROUP::valign", "COLGROUP::width", "COMMAND::checked", "COMMAND::command", "COMMAND::disabled", "COMMAND::label", "COMMAND::radiogroup", "COMMAND::type", "DATA::value", "DEL::datetime", "DETAILS::open", "DIR::compact", "DIV::align", "DL::compact", "FIELDSET::disabled", "FONT::color", "FONT::face", "FONT::size", "FORM::accept", "FORM::autocomplete", "FORM::enctype", "FORM::method", "FORM::name", "FORM::novalidate", "FORM::target", "FRAME::name", "H1::align", "H2::align", "H3::align", "H4::align", "H5::align", "H6::align", "HR::align", "HR::noshade", "HR::size", "HR::width", "HTML::version", "IFRAME::align", "IFRAME::frameborder", "IFRAME::height", "IFRAME::marginheight", "IFRAME::marginwidth", "IFRAME::width", "IMG::align", "IMG::alt", "IMG::border", "IMG::height", "IMG::hspace", "IMG::ismap", "IMG::name", "IMG::usemap", "IMG::vspace", "IMG::width", "INPUT::accept", "INPUT::accesskey", "INPUT::align", "INPUT::alt", "INPUT::autocomplete", "INPUT::checked", "INPUT::disabled", "INPUT::inputmode", "INPUT::ismap", "INPUT::list", "INPUT::max", "INPUT::maxlength", "INPUT::min", "INPUT::multiple", "INPUT::name", "INPUT::placeholder", "INPUT::readonly", "INPUT::required", "INPUT::size", "INPUT::step", "INPUT::tabindex", "INPUT::type", "INPUT::usemap", "INPUT::value", "INS::datetime", "KEYGEN::disabled", "KEYGEN::keytype", "KEYGEN::name", "LABEL::accesskey", "LABEL::for", "LEGEND::accesskey", "LEGEND::align", "LI::type", "LI::value", "LINK::sizes", "MAP::name", "MENU::compact", "MENU::label", "MENU::type", "METER::high", "METER::low", "METER::max", "METER::min", "METER::value", "OBJECT::typemustmatch", "OL::compact", "OL::reversed", "OL::start", "OL::type", "OPTGROUP::disabled", "OPTGROUP::label", "OPTION::disabled", "OPTION::label", "OPTION::selected", "OPTION::value", "OUTPUT::for", "OUTPUT::name", "P::align", "PRE::width", "PROGRESS::max", "PROGRESS::min", "PROGRESS::value", "SELECT::autocomplete", "SELECT::disabled", "SELECT::multiple", "SELECT::name", "SELECT::required", "SELECT::size", "SELECT::tabindex", "SOURCE::type", "TABLE::align", "TABLE::bgcolor", "TABLE::border", "TABLE::cellpadding", "TABLE::cellspacing", "TABLE::frame", "TABLE::rules", "TABLE::summary", "TABLE::width", "TBODY::align", "TBODY::char", "TBODY::charoff", "TBODY::valign", "TD::abbr", "TD::align", "TD::axis", "TD::bgcolor", "TD::char", "TD::charoff", "TD::colspan", "TD::headers", "TD::height", "TD::nowrap", "TD::rowspan", "TD::scope", "TD::valign", "TD::width", "TEXTAREA::accesskey", "TEXTAREA::autocomplete", "TEXTAREA::cols", "TEXTAREA::disabled", "TEXTAREA::inputmode", "TEXTAREA::name", "TEXTAREA::placeholder", "TEXTAREA::readonly", "TEXTAREA::required", "TEXTAREA::rows", "TEXTAREA::tabindex", "TEXTAREA::wrap", "TFOOT::align", "TFOOT::char", "TFOOT::charoff", "TFOOT::valign", "TH::abbr", "TH::align", "TH::axis", "TH::bgcolor", "TH::char", "TH::charoff", "TH::colspan", "TH::headers", "TH::height", "TH::nowrap", "TH::rowspan", "TH::scope", "TH::valign", "TH::width", "THEAD::align", "THEAD::char", "THEAD::charoff", "THEAD::valign", "TR::align", "TR::bgcolor", "TR::char", "TR::charoff", "TR::valign", "TRACK::default", "TRACK::kind", "TRACK::label", "TRACK::srclang", "UL::compact", "UL::type", "VIDEO::controls", "VIDEO::height", "VIDEO::loop", "VIDEO::mediagroup", "VIDEO::muted", "VIDEO::preload", "VIDEO::width"]), [J.JSString]);
C.List_wSV = H.setRuntimeTypeInfo(Isolate.makeConstantList(["bind", "if", "ref", "repeat", "syntax"]), [J.JSString]);
C.List_yrN = H.setRuntimeTypeInfo(Isolate.makeConstantList(["A::href", "AREA::href", "BLOCKQUOTE::cite", "BODY::background", "COMMAND::icon", "DEL::cite", "FORM::action", "IMG::src", "INPUT::src", "INS::cite", "Q::cite", "VIDEO::poster"]), [J.JSString]);
C.NodeList_methods = W.NodeList.prototype;
C.Type_6Vn = H.createRuntimeType('_NativeTypedArray');
C.Type_Hp8 = H.createRuntimeType('_NativeTypedArrayOfInt');
C.UnknownJavaScriptObject_methods = J.UnknownJavaScriptObject.prototype;
C.Window_methods = W.Window.prototype;
C._CustomEventStreamProvider__determineMouseWheelEventType = new W._CustomEventStreamProvider(W.Element__determineMouseWheelEventType$closure());
$.controlPort = null;
$.RawReceivePortImpl__nextFreeId = 1;
$.Primitives_mirrorFunctionCacheName = "$cachedFunction";
$.Primitives_mirrorInvokeCacheName = "$cachedInvocation";
$.Closure_functionCounter = 0;
$.BoundClosure_selfFieldNameCache = null;
$.BoundClosure_receiverFieldNameCache = null;
$.RuntimeFunctionType_inAssert = false;
$.getTagFunction = null;
$.alternateTagFunction = null;
$.prototypeForTagFunction = null;
$.dispatchRecordsForInstanceTags = null;
$.interceptorsForUncacheableTags = null;
$.initNativeDispatchFlag = null;
$.Building_damageCounter = 0;
$.Building_collectCounter = 0;
$.Building_base = null;
$.Emitter_counter = null;
$.Explosion_counter = 0;
$.engine = null;
$.game = null;
$.Packet_baseSpeed = 3;
$.Projectile_baseSpeed = 7;
$.Smoke_counter = 0;
$.UISymbol_activeSymbol = null;
$.World_creeperCounter = null;
$.World_creeperDirty = true;
$.printToZone = null;
$._callbacksAreEnqueued = false;
$.Zone__current = C.C__RootZone;
$.Expando__keyCount = 0;
$.Element__parseDocument = null;
$.Element__parseRange = null;
$.Element__defaultValidator = null;
$.Element__defaultSanitizer = null;
$.Device__isOpera = null;
$.Device__isWebKit = null;
Isolate.$lazy($, "globalThis", "globalThis", "get$globalThis", function() {
  return function() { return this; }();
});
Isolate.$lazy($, "globalWindow", "globalWindow", "get$globalWindow", function() {
  return $.get$globalThis().window;
});
Isolate.$lazy($, "globalWorker", "globalWorker", "get$globalWorker", function() {
  return $.get$globalThis().Worker;
});
Isolate.$lazy($, "globalPostMessageDefined", "globalPostMessageDefined", "get$globalPostMessageDefined", function() {
  return $.get$globalThis().postMessage !== void 0;
});
Isolate.$lazy($, "thisScript", "IsolateNatives_thisScript", "get$IsolateNatives_thisScript", function() {
  return H.IsolateNatives_computeThisScript();
});
Isolate.$lazy($, "workerIds", "IsolateNatives_workerIds", "get$IsolateNatives_workerIds", function() {
  return new P.Expando(null);
});
Isolate.$lazy($, "noSuchMethodPattern", "TypeErrorDecoder_noSuchMethodPattern", "get$TypeErrorDecoder_noSuchMethodPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({ toString: function() { return "$receiver$"; } }));
});
Isolate.$lazy($, "notClosurePattern", "TypeErrorDecoder_notClosurePattern", "get$TypeErrorDecoder_notClosurePattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({ $method$: null, toString: function() { return "$receiver$"; } }));
});
Isolate.$lazy($, "nullCallPattern", "TypeErrorDecoder_nullCallPattern", "get$TypeErrorDecoder_nullCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(null));
});
Isolate.$lazy($, "nullLiteralCallPattern", "TypeErrorDecoder_nullLiteralCallPattern", "get$TypeErrorDecoder_nullLiteralCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(function() {
  var $argumentsExpr$ = '$arguments$'
  try {
    null.$method$($argumentsExpr$);
  } catch (e) {
    return e.message;
  }
}());
});
Isolate.$lazy($, "undefinedCallPattern", "TypeErrorDecoder_undefinedCallPattern", "get$TypeErrorDecoder_undefinedCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(void 0));
});
Isolate.$lazy($, "undefinedLiteralCallPattern", "TypeErrorDecoder_undefinedLiteralCallPattern", "get$TypeErrorDecoder_undefinedLiteralCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(function() {
  var $argumentsExpr$ = '$arguments$'
  try {
    (void 0).$method$($argumentsExpr$);
  } catch (e) {
    return e.message;
  }
}());
});
Isolate.$lazy($, "nullPropertyPattern", "TypeErrorDecoder_nullPropertyPattern", "get$TypeErrorDecoder_nullPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(null));
});
Isolate.$lazy($, "nullLiteralPropertyPattern", "TypeErrorDecoder_nullLiteralPropertyPattern", "get$TypeErrorDecoder_nullLiteralPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(function() {
  try {
    null.$method$;
  } catch (e) {
    return e.message;
  }
}());
});
Isolate.$lazy($, "undefinedPropertyPattern", "TypeErrorDecoder_undefinedPropertyPattern", "get$TypeErrorDecoder_undefinedPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(void 0));
});
Isolate.$lazy($, "undefinedLiteralPropertyPattern", "TypeErrorDecoder_undefinedLiteralPropertyPattern", "get$TypeErrorDecoder_undefinedLiteralPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(function() {
  try {
    (void 0).$method$;
  } catch (e) {
    return e.message;
  }
}());
});
Isolate.$lazy($, "buildings", "Building_buildings", "get$Building_buildings", function() {
  return H.setRuntimeTypeInfo([], [U.Building]);
});
Isolate.$lazy($, "connections", "Connection_connections", "get$Connection_connections", function() {
  return H.setRuntimeTypeInfo([], [U.Connection]);
});
Isolate.$lazy($, "emitters", "Emitter_emitters", "get$Emitter_emitters", function() {
  return H.setRuntimeTypeInfo([], [U.Emitter]);
});
Isolate.$lazy($, "explosions", "Explosion_explosions", "get$Explosion_explosions", function() {
  return H.setRuntimeTypeInfo([], [U.Explosion]);
});
Isolate.$lazy($, "packets", "Packet_packets", "get$Packet_packets", function() {
  return H.setRuntimeTypeInfo([], [U.Packet]);
});
Isolate.$lazy($, "queue", "Packet_queue", "get$Packet_queue", function() {
  return H.setRuntimeTypeInfo([], [U.Packet]);
});
Isolate.$lazy($, "projectiles", "Projectile_projectiles", "get$Projectile_projectiles", function() {
  return H.setRuntimeTypeInfo([], [U.Projectile]);
});
Isolate.$lazy($, "shells", "Shell_shells", "get$Shell_shells", function() {
  return H.setRuntimeTypeInfo([], [U.Shell]);
});
Isolate.$lazy($, "ships", "Ship_ships", "get$Ship_ships", function() {
  return H.setRuntimeTypeInfo([], [U.Ship]);
});
Isolate.$lazy($, "smokes", "Smoke_smokes", "get$Smoke_smokes", function() {
  return H.setRuntimeTypeInfo([], [U.Smoke]);
});
Isolate.$lazy($, "spores", "Spore_spores", "get$Spore_spores", function() {
  return H.setRuntimeTypeInfo([], [U.Spore]);
});
Isolate.$lazy($, "sporetowers", "Sporetower_sporetowers", "get$Sporetower_sporetowers", function() {
  return H.setRuntimeTypeInfo([], [U.Sporetower]);
});
Isolate.$lazy($, "symbols", "UISymbol_symbols", "get$UISymbol_symbols", function() {
  return H.setRuntimeTypeInfo([], [U.UISymbol]);
});
Isolate.$lazy($, "_toStringList", "IterableMixinWorkaround__toStringList", "get$IterableMixinWorkaround__toStringList", function() {
  return [];
});
Isolate.$lazy($, "_asyncCallbacks", "_asyncCallbacks", "get$_asyncCallbacks", function() {
  var t1, t2;
  t1 = {func: "void_", void: true};
  t2 = H.setRuntimeTypeInfo(new P.ListQueue(null, 0, 0, 0), [t1]);
  t2.ListQueue$1(null, t1);
  return t2;
});
Isolate.$lazy($, "_toStringVisiting", "_toStringVisiting", "get$_toStringVisiting", function() {
  return P.HashSet_HashSet$identity(null);
});
Isolate.$lazy($, "_toStringList", "Maps__toStringList", "get$Maps__toStringList", function() {
  return [];
});
Isolate.$lazy($, "_safeConsole", "Console__safeConsole", "get$Console__safeConsole", function() {
  return new W.Console();
});
Isolate.$lazy($, "_allowedElements", "_Html5NodeValidator__allowedElements", "get$_Html5NodeValidator__allowedElements", function() {
  var t1 = P.LinkedHashSet_LinkedHashSet(null, null, null, null);
  t1.addAll$1(t1, ["A", "ABBR", "ACRONYM", "ADDRESS", "AREA", "ARTICLE", "ASIDE", "AUDIO", "B", "BDI", "BDO", "BIG", "BLOCKQUOTE", "BR", "BUTTON", "CANVAS", "CAPTION", "CENTER", "CITE", "CODE", "COL", "COLGROUP", "COMMAND", "DATA", "DATALIST", "DD", "DEL", "DETAILS", "DFN", "DIR", "DIV", "DL", "DT", "EM", "FIELDSET", "FIGCAPTION", "FIGURE", "FONT", "FOOTER", "FORM", "H1", "H2", "H3", "H4", "H5", "H6", "HEADER", "HGROUP", "HR", "I", "IFRAME", "IMG", "INPUT", "INS", "KBD", "LABEL", "LEGEND", "LI", "MAP", "MARK", "MENU", "METER", "NAV", "NOBR", "OL", "OPTGROUP", "OPTION", "OUTPUT", "P", "PRE", "PROGRESS", "Q", "S", "SAMP", "SECTION", "SELECT", "SMALL", "SOURCE", "SPAN", "STRIKE", "STRONG", "SUB", "SUMMARY", "SUP", "TABLE", "TBODY", "TD", "TEXTAREA", "TFOOT", "TH", "THEAD", "TIME", "TR", "TRACK", "TT", "U", "UL", "VAR", "VIDEO", "WBR"]);
  return t1;
});
Isolate.$lazy($, "_attributeValidators", "_Html5NodeValidator__attributeValidators", "get$_Html5NodeValidator__attributeValidators", function() {
  return H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
});
// Native classes

init.functionAliases = {};
;
init.metadata = [{func: "dynamic__String", args: [J.JSString]},
{func: "void_", void: true},
{func: "void__dynamic", void: true, args: [null]},
{func: "void__dynamic__StackTrace", void: true, args: [null], opt: [P.StackTrace]},
,
{func: "bool__dynamic_dynamic", ret: J.JSBool, args: [null, null]},
{func: "int__dynamic", ret: J.JSInt, args: [null]},
{func: "int__Comparable_Comparable", ret: J.JSInt, args: [P.Comparable, P.Comparable]},
{func: "bool__Object_Object", ret: J.JSBool, args: [P.Object, P.Object]},
{func: "int__Object", ret: J.JSInt, args: [P.Object]},
{func: "String__EventTarget", ret: J.JSString, args: [W.EventTarget]},
{func: "bool__Element_String_String__Html5NodeValidator", ret: J.JSBool, args: [W.Element, J.JSString, J.JSString, W._Html5NodeValidator]},
{func: "args0"},
{func: "args2", args: [null, null]},
{func: "args1", args: [null]},
{func: "dynamic__dynamic_String", args: [null, J.JSString]},
{func: "void__Timer", void: true, args: [P.Timer]},
{func: "void__num", void: true, args: [J.JSNumber]},
{func: "dynamic__Timer", args: [P.Timer]},
{func: "dynamic__Route_Route", args: [U.Route, U.Route]},
{func: "dynamic__dynamic__dynamic", args: [null], opt: [null]},
{func: "dynamic__dynamic_StackTrace", args: [null, P.StackTrace]},
{func: "dynamic__Symbol_dynamic", args: [P.Symbol, null]},
{func: "String__int", ret: J.JSString, args: [J.JSInt]},
{func: "void__Object", void: true, args: [P.Object]},
{func: "void__Node", void: true, args: [W.Node]},
];
$ = null;
Isolate = Isolate.$finishIsolateConstructor(Isolate);
$ = new Isolate();
function convertToFastObject(properties) {
  function MyClass() {};
  MyClass.prototype = properties;
  new MyClass();
  return properties;
}
A = convertToFastObject(A);
B = convertToFastObject(B);
C = convertToFastObject(C);
D = convertToFastObject(D);
E = convertToFastObject(E);
F = convertToFastObject(F);
G = convertToFastObject(G);
H = convertToFastObject(H);
J = convertToFastObject(J);
K = convertToFastObject(K);
L = convertToFastObject(L);
M = convertToFastObject(M);
N = convertToFastObject(N);
O = convertToFastObject(O);
P = convertToFastObject(P);
Q = convertToFastObject(Q);
R = convertToFastObject(R);
S = convertToFastObject(S);
T = convertToFastObject(T);
U = convertToFastObject(U);
V = convertToFastObject(V);
W = convertToFastObject(W);
X = convertToFastObject(X);
Y = convertToFastObject(Y);
Z = convertToFastObject(Z);
!function() {
  var objectProto = Object.prototype;
  for (var i = 0;; i++) {
    var property = "___dart_dispatch_record_ZxYxX_0_";
    if (i > 0)
      property = rootProperty + "_" + i;
    if (!(property in objectProto))
      return init.dispatchPropertyName = property;
  }
}();
// BEGIN invoke [main].
;(function (callback) {
  if (typeof document === "undefined") {
    callback(null);
    return;
  }
  if (document.currentScript) {
    callback(document.currentScript);
    return;
  }

  var scripts = document.scripts;
  function onLoad(event) {
    for (var i = 0; i < scripts.length; ++i) {
      scripts[i].removeEventListener("load", onLoad, false);
    }
    callback(event.target);
  }
  for (var i = 0; i < scripts.length; ++i) {
    scripts[i].addEventListener("load", onLoad, false);
  }
})(function(currentScript) {
  init.currentScript = currentScript;

  if (typeof dartMainRunner === "function") {
    dartMainRunner(function() { H.startRootIsolate(U.main$closure()); });
  } else {
    H.startRootIsolate(U.main$closure());
  }
});
// END invoke [main].
function init() {
  Isolate.$isolateProperties = {};
  function generateAccessor(fieldDescriptor, accessors, cls) {
    var fieldInformation = fieldDescriptor.split("-");
    var field = fieldInformation[0];
    var len = field.length;
    var code = field.charCodeAt(len - 1);
    var reflectable;
    if (fieldInformation.length > 1)
      reflectable = true;
    else
      reflectable = false;
    code = code >= 60 && code <= 64 ? code - 59 : code >= 123 && code <= 126 ? code - 117 : code >= 37 && code <= 43 ? code - 27 : 0;
    if (code) {
      var getterCode = code & 3;
      var setterCode = code >> 2;
      var accessorName = field = field.substring(0, len - 1);
      var divider = field.indexOf(":");
      if (divider > 0) {
        accessorName = field.substring(0, divider);
        field = field.substring(divider + 1);
      }
      if (getterCode) {
        var args = getterCode & 2 ? "receiver" : "";
        var receiver = getterCode & 1 ? "this" : "receiver";
        var body = "return " + receiver + "." + field;
        var property = cls + ".prototype.get$" + accessorName + "=";
        var fn = "function(" + args + "){" + body + "}";
        if (reflectable)
          accessors.push(property + "$reflectable(" + fn + ");\n");
        else
          accessors.push(property + fn + ";\n");
      }
      if (setterCode) {
        var args = setterCode & 2 ? "receiver, value" : "value";
        var receiver = setterCode & 1 ? "this" : "receiver";
        var body = receiver + "." + field + " = value";
        var property = cls + ".prototype.set$" + accessorName + "=";
        var fn = "function(" + args + "){" + body + "}";
        if (reflectable)
          accessors.push(property + "$reflectable(" + fn + ");\n");
        else
          accessors.push(property + fn + ";\n");
      }
    }
    return field;
  }
  Isolate.$isolateProperties.$generateAccessor = generateAccessor;
  function defineClass(name, cls, fields) {
    var accessors = [];
    var str = "function " + cls + "(";
    var body = "";
    for (var i = 0; i < fields.length; i++) {
      if (i != 0)
        str += ", ";
      var field = generateAccessor(fields[i], accessors, cls);
      var parameter = "parameter_" + field;
      str += parameter;
      body += "this." + field + " = " + parameter + ";\n";
    }
    str += ") {\n" + body + "}\n";
    str += cls + ".builtin$cls=\"" + name + "\";\n";
    str += "$desc=$collectedClasses." + cls + ";\n";
    str += "if($desc instanceof Array) $desc = $desc[1];\n";
    str += cls + ".prototype = $desc;\n";
    if (typeof defineClass.name != "string") {
      str += cls + ".name=\"" + cls + "\";\n";
    }
    str += accessors.join("");
    return str;
  }
  var inheritFrom = function() {
    function tmp() {
    }
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    return function(constructor, superConstructor) {
      tmp.prototype = superConstructor.prototype;
      var object = new tmp();
      var properties = constructor.prototype;
      for (var member in properties)
        if (hasOwnProperty.call(properties, member))
          object[member] = properties[member];
      object.constructor = constructor;
      constructor.prototype = object;
      return object;
    };
  }();
  Isolate.$finishClasses = function(collectedClasses, isolateProperties, existingIsolateProperties) {
    var pendingClasses = {};
    if (!init.allClasses)
      init.allClasses = {};
    var allClasses = init.allClasses;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    if (typeof dart_precompiled == "function") {
      var constructors = dart_precompiled(collectedClasses);
    } else {
      var combinedConstructorFunction = "function $reflectable(fn){fn.$reflectable=1;return fn};\n" + "var $desc;\n";
      var constructorsList = [];
    }
    for (var cls in collectedClasses) {
      if (hasOwnProperty.call(collectedClasses, cls)) {
        var desc = collectedClasses[cls];
        if (desc instanceof Array)
          desc = desc[1];
        var classData = desc[""], supr, name = cls, fields = classData;
        if (typeof classData == "string") {
          var split = classData.split("/");
          if (split.length == 2) {
            name = split[0];
            fields = split[1];
          }
        }
        var s = fields.split(";");
        fields = s[1] == "" ? [] : s[1].split(",");
        supr = s[0];
        split = supr.split(":");
        if (split.length == 2) {
          supr = split[0];
          var functionSignature = split[1];
          if (functionSignature)
            desc.$signature = function(s) {
              return function() {
                return init.metadata[s];
              };
            }(functionSignature);
        }
        if (supr && supr.indexOf("+") > 0) {
          s = supr.split("+");
          supr = s[0];
          var mixin = collectedClasses[s[1]];
          if (mixin instanceof Array)
            mixin = mixin[1];
          for (var d in mixin) {
            if (hasOwnProperty.call(mixin, d) && !hasOwnProperty.call(desc, d))
              desc[d] = mixin[d];
          }
        }
        if (typeof dart_precompiled != "function") {
          combinedConstructorFunction += defineClass(name, cls, fields);
          constructorsList.push(cls);
        }
        if (supr)
          pendingClasses[cls] = supr;
      }
    }
    if (typeof dart_precompiled != "function") {
      combinedConstructorFunction += "return [\n  " + constructorsList.join(",\n  ") + "\n]";
      var constructors = new Function("$collectedClasses", combinedConstructorFunction)(collectedClasses);
      combinedConstructorFunction = null;
    }
    for (var i = 0; i < constructors.length; i++) {
      var constructor = constructors[i];
      var cls = constructor.name;
      var desc = collectedClasses[cls];
      var globalObject = isolateProperties;
      if (desc instanceof Array) {
        globalObject = desc[0] || isolateProperties;
        desc = desc[1];
      }
      allClasses[cls] = constructor;
      globalObject[cls] = constructor;
    }
    constructors = null;
    var finishedClasses = {};
    init.interceptorsByTag = Object.create(null);
    init.leafTags = {};
    function finishClass(cls) {
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      if (hasOwnProperty.call(finishedClasses, cls))
        return;
      finishedClasses[cls] = true;
      var superclass = pendingClasses[cls];
      if (!superclass || typeof superclass != "string")
        return;
      finishClass(superclass);
      var constructor = allClasses[cls];
      var superConstructor = allClasses[superclass];
      if (!superConstructor)
        superConstructor = existingIsolateProperties[superclass];
      var prototype = inheritFrom(constructor, superConstructor);
      if (hasOwnProperty.call(prototype, "%")) {
        var nativeSpec = prototype["%"].split(";");
        if (nativeSpec[0]) {
          var tags = nativeSpec[0].split("|");
          for (var i = 0; i < tags.length; i++) {
            init.interceptorsByTag[tags[i]] = constructor;
            init.leafTags[tags[i]] = true;
          }
        }
        if (nativeSpec[1]) {
          tags = nativeSpec[1].split("|");
          if (nativeSpec[2]) {
            var subclasses = nativeSpec[2].split("|");
            for (var i = 0; i < subclasses.length; i++) {
              var subclass = allClasses[subclasses[i]];
              subclass.$nativeSuperclassTag = tags[0];
            }
          }
          for (i = 0; i < tags.length; i++) {
            init.interceptorsByTag[tags[i]] = constructor;
            init.leafTags[tags[i]] = false;
          }
        }
      }
    }
    for (var cls in pendingClasses)
      finishClass(cls);
  };
  Isolate.$lazy = function(prototype, staticName, fieldName, getterName, lazyValue) {
    var sentinelUndefined = {};
    var sentinelInProgress = {};
    prototype[fieldName] = sentinelUndefined;
    prototype[getterName] = function() {
      var result = $[fieldName];
      try {
        if (result === sentinelUndefined) {
          $[fieldName] = sentinelInProgress;
          try {
            result = $[fieldName] = lazyValue();
          } finally {
            if (result === sentinelUndefined) {
              if ($[fieldName] === sentinelInProgress) {
                $[fieldName] = null;
              }
            }
          }
        } else {
          if (result === sentinelInProgress)
            H.throwCyclicInit(staticName);
        }
        return result;
      } finally {
        $[getterName] = function() {
          return this[fieldName];
        };
      }
    };
  };
  Isolate.$finishIsolateConstructor = function(oldIsolate) {
    var isolateProperties = oldIsolate.$isolateProperties;
    function Isolate() {
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      for (var staticName in isolateProperties)
        if (hasOwnProperty.call(isolateProperties, staticName))
          this[staticName] = isolateProperties[staticName];
      function ForceEfficientMap() {
      }
      ForceEfficientMap.prototype = this;
      new ForceEfficientMap();
    }
    Isolate.prototype = oldIsolate.prototype;
    Isolate.prototype.constructor = Isolate;
    Isolate.$isolateProperties = isolateProperties;
    Isolate.$finishClasses = oldIsolate.$finishClasses;
    Isolate.makeConstantList = oldIsolate.makeConstantList;
    return Isolate;
  };
}
})()

//# sourceMappingURL=main.dart.js.map
//@ sourceMappingURL=main.dart.js.map
